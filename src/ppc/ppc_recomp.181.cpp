#include "ppc_recomp_shared.h"

PPC_FUNC_IMPL(__imp____savevmx_87) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-656
	r11.s64 = -656;
	// stvx128 v87,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v87), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-640
	r11.s64 = -640;
	// stvx128 v88,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v88), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-624
	r11.s64 = -624;
	// stvx128 v89,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v89), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-608
	r11.s64 = -608;
	// stvx128 v90,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v90), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-592
	r11.s64 = -592;
	// stvx128 v91,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v91), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-576
	r11.s64 = -576;
	// stvx128 v92,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v92), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-560
	r11.s64 = -560;
	// stvx128 v93,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v93), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-544
	r11.s64 = -544;
	// stvx128 v94,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v94), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_87) {
	__imp____savevmx_87(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-640
	r11.s64 = -640;
	// stvx128 v88,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v88), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-624
	r11.s64 = -624;
	// stvx128 v89,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v89), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-608
	r11.s64 = -608;
	// stvx128 v90,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v90), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-592
	r11.s64 = -592;
	// stvx128 v91,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v91), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-576
	r11.s64 = -576;
	// stvx128 v92,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v92), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-560
	r11.s64 = -560;
	// stvx128 v93,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v93), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-544
	r11.s64 = -544;
	// stvx128 v94,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v94), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_88) {
	__imp____savevmx_88(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_89) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-624
	r11.s64 = -624;
	// stvx128 v89,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v89), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-608
	r11.s64 = -608;
	// stvx128 v90,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v90), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-592
	r11.s64 = -592;
	// stvx128 v91,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v91), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-576
	r11.s64 = -576;
	// stvx128 v92,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v92), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-560
	r11.s64 = -560;
	// stvx128 v93,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v93), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-544
	r11.s64 = -544;
	// stvx128 v94,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v94), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_89) {
	__imp____savevmx_89(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-608
	r11.s64 = -608;
	// stvx128 v90,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v90), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-592
	r11.s64 = -592;
	// stvx128 v91,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v91), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-576
	r11.s64 = -576;
	// stvx128 v92,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v92), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-560
	r11.s64 = -560;
	// stvx128 v93,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v93), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-544
	r11.s64 = -544;
	// stvx128 v94,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v94), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_90) {
	__imp____savevmx_90(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_91) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-592
	r11.s64 = -592;
	// stvx128 v91,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v91), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-576
	r11.s64 = -576;
	// stvx128 v92,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v92), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-560
	r11.s64 = -560;
	// stvx128 v93,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v93), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-544
	r11.s64 = -544;
	// stvx128 v94,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v94), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_91) {
	__imp____savevmx_91(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_92) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-576
	r11.s64 = -576;
	// stvx128 v92,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v92), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-560
	r11.s64 = -560;
	// stvx128 v93,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v93), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-544
	r11.s64 = -544;
	// stvx128 v94,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v94), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_92) {
	__imp____savevmx_92(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_93) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-560
	r11.s64 = -560;
	// stvx128 v93,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v93), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-544
	r11.s64 = -544;
	// stvx128 v94,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v94), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_93) {
	__imp____savevmx_93(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_94) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-544
	r11.s64 = -544;
	// stvx128 v94,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v94), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_94) {
	__imp____savevmx_94(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_95) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-528
	r11.s64 = -528;
	// stvx128 v95,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v95), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_95) {
	__imp____savevmx_95(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_96) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-512
	r11.s64 = -512;
	// stvx128 v96,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v96), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_96) {
	__imp____savevmx_96(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_97) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-496
	r11.s64 = -496;
	// stvx128 v97,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v97), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_97) {
	__imp____savevmx_97(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-480
	r11.s64 = -480;
	// stvx128 v98,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v98), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_98) {
	__imp____savevmx_98(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_99) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-464
	r11.s64 = -464;
	// stvx128 v99,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v99), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_99) {
	__imp____savevmx_99(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_100) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-448
	r11.s64 = -448;
	// stvx128 v100,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v100), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_100) {
	__imp____savevmx_100(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_101) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-432
	r11.s64 = -432;
	// stvx128 v101,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v101), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_101) {
	__imp____savevmx_101(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_102) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-416
	r11.s64 = -416;
	// stvx128 v102,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v102), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_102) {
	__imp____savevmx_102(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_103) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-400
	r11.s64 = -400;
	// stvx128 v103,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v103), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_103) {
	__imp____savevmx_103(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_104) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-384
	r11.s64 = -384;
	// stvx128 v104,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v104), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_104) {
	__imp____savevmx_104(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_105) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-368
	r11.s64 = -368;
	// stvx128 v105,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v105), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_105) {
	__imp____savevmx_105(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_106) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-352
	r11.s64 = -352;
	// stvx128 v106,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v106), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_106) {
	__imp____savevmx_106(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_107) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-336
	r11.s64 = -336;
	// stvx128 v107,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v107), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_107) {
	__imp____savevmx_107(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_108) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-320
	r11.s64 = -320;
	// stvx128 v108,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v108), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_108) {
	__imp____savevmx_108(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_109) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-304
	r11.s64 = -304;
	// stvx128 v109,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v109), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_109) {
	__imp____savevmx_109(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_110) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-288
	r11.s64 = -288;
	// stvx128 v110,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v110), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_110) {
	__imp____savevmx_110(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_111) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-272
	r11.s64 = -272;
	// stvx128 v111,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v111), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_111) {
	__imp____savevmx_111(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_112) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-256
	r11.s64 = -256;
	// stvx128 v112,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v112), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_112) {
	__imp____savevmx_112(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_113) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-240
	r11.s64 = -240;
	// stvx128 v113,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v113), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_113) {
	__imp____savevmx_113(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_114) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-224
	r11.s64 = -224;
	// stvx128 v114,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v114), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_114) {
	__imp____savevmx_114(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_115) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-208
	r11.s64 = -208;
	// stvx128 v115,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v115), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_115) {
	__imp____savevmx_115(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_116) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-192
	r11.s64 = -192;
	// stvx128 v116,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v116), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_116) {
	__imp____savevmx_116(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_117) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-176
	r11.s64 = -176;
	// stvx128 v117,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v117), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_117) {
	__imp____savevmx_117(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_118) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-160
	r11.s64 = -160;
	// stvx128 v118,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v118), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_118) {
	__imp____savevmx_118(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_119) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-144
	r11.s64 = -144;
	// stvx128 v119,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v119), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_119) {
	__imp____savevmx_119(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_120) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-128
	r11.s64 = -128;
	// stvx128 v120,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v120), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_120) {
	__imp____savevmx_120(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_121) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-112
	r11.s64 = -112;
	// stvx128 v121,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v121), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_121) {
	__imp____savevmx_121(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_122) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-96
	r11.s64 = -96;
	// stvx128 v122,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v122), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_122) {
	__imp____savevmx_122(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_123) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-80
	r11.s64 = -80;
	// stvx128 v123,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v123), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_123) {
	__imp____savevmx_123(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_124) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-64
	r11.s64 = -64;
	// stvx128 v124,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v124), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_124) {
	__imp____savevmx_124(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_125) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-48
	r11.s64 = -48;
	// stvx128 v125,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v125), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_125) {
	__imp____savevmx_125(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_126) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-32
	r11.s64 = -32;
	// stvx128 v126,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v126), &VectorMaskL[(ea & 0xF) * 16]);
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_126) {
	__imp____savevmx_126(ctx, base);
}

PPC_FUNC_IMPL(__imp____savevmx_127) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v127{};
	uint32_t ea{};
	// li r11,-16
	r11.s64 = -16;
	// stvx128 v127,r11,r12
	ea = (r11.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// blr 
	return;
}

PPC_WEAK_FUNC(__savevmx_127) {
	__imp____savevmx_127(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_14) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v14{};
	PPCVRegister v15{};
	PPCVRegister v16{};
	PPCVRegister v17{};
	PPCVRegister v18{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-288
	r11.s64 = -288;
	// lvx v14,r11,r12
	simd::store_shuffled(v14, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx v15,r11,r12
	simd::store_shuffled(v15, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx v16,r11,r12
	simd::store_shuffled(v16, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx v17,r11,r12
	simd::store_shuffled(v17, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx v18,r11,r12
	simd::store_shuffled(v18, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx v19,r11,r12
	simd::store_shuffled(v19, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx v20,r11,r12
	simd::store_shuffled(v20, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx v21,r11,r12
	simd::store_shuffled(v21, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_14) {
	__imp____restvmx_14(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_15) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v15{};
	PPCVRegister v16{};
	PPCVRegister v17{};
	PPCVRegister v18{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-272
	r11.s64 = -272;
	// lvx v15,r11,r12
	simd::store_shuffled(v15, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx v16,r11,r12
	simd::store_shuffled(v16, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx v17,r11,r12
	simd::store_shuffled(v17, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx v18,r11,r12
	simd::store_shuffled(v18, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx v19,r11,r12
	simd::store_shuffled(v19, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx v20,r11,r12
	simd::store_shuffled(v20, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx v21,r11,r12
	simd::store_shuffled(v21, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_15) {
	__imp____restvmx_15(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_16) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v16{};
	PPCVRegister v17{};
	PPCVRegister v18{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-256
	r11.s64 = -256;
	// lvx v16,r11,r12
	simd::store_shuffled(v16, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx v17,r11,r12
	simd::store_shuffled(v17, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx v18,r11,r12
	simd::store_shuffled(v18, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx v19,r11,r12
	simd::store_shuffled(v19, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx v20,r11,r12
	simd::store_shuffled(v20, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx v21,r11,r12
	simd::store_shuffled(v21, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_16) {
	__imp____restvmx_16(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_17) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v17{};
	PPCVRegister v18{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-240
	r11.s64 = -240;
	// lvx v17,r11,r12
	simd::store_shuffled(v17, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx v18,r11,r12
	simd::store_shuffled(v18, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx v19,r11,r12
	simd::store_shuffled(v19, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx v20,r11,r12
	simd::store_shuffled(v20, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx v21,r11,r12
	simd::store_shuffled(v21, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_17) {
	__imp____restvmx_17(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v18{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-224
	r11.s64 = -224;
	// lvx v18,r11,r12
	simd::store_shuffled(v18, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx v19,r11,r12
	simd::store_shuffled(v19, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx v20,r11,r12
	simd::store_shuffled(v20, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx v21,r11,r12
	simd::store_shuffled(v21, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_18) {
	__imp____restvmx_18(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_19) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v19{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-208
	r11.s64 = -208;
	// lvx v19,r11,r12
	simd::store_shuffled(v19, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx v20,r11,r12
	simd::store_shuffled(v20, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx v21,r11,r12
	simd::store_shuffled(v21, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_19) {
	__imp____restvmx_19(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_20) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v20{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-192
	r11.s64 = -192;
	// lvx v20,r11,r12
	simd::store_shuffled(v20, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx v21,r11,r12
	simd::store_shuffled(v21, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_20) {
	__imp____restvmx_20(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_21) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v21{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-176
	r11.s64 = -176;
	// lvx v21,r11,r12
	simd::store_shuffled(v21, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_21) {
	__imp____restvmx_21(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_22) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v22{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-160
	r11.s64 = -160;
	// lvx v22,r11,r12
	simd::store_shuffled(v22, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_22) {
	__imp____restvmx_22(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_23) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v23{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-144
	r11.s64 = -144;
	// lvx v23,r11,r12
	simd::store_shuffled(v23, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_23) {
	__imp____restvmx_23(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_24) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v24{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-128
	r11.s64 = -128;
	// lvx v24,r11,r12
	simd::store_shuffled(v24, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_24) {
	__imp____restvmx_24(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_25) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v25{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-112
	r11.s64 = -112;
	// lvx v25,r11,r12
	simd::store_shuffled(v25, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_25) {
	__imp____restvmx_25(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_26) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v26{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-96
	r11.s64 = -96;
	// lvx v26,r11,r12
	simd::store_shuffled(v26, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_26) {
	__imp____restvmx_26(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_27) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v27{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-80
	r11.s64 = -80;
	// lvx v27,r11,r12
	simd::store_shuffled(v27, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_27) {
	__imp____restvmx_27(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v28{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-64
	r11.s64 = -64;
	// lvx v28,r11,r12
	simd::store_shuffled(v28, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_28) {
	__imp____restvmx_28(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_29) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v29{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-48
	r11.s64 = -48;
	// lvx v29,r11,r12
	simd::store_shuffled(v29, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_29) {
	__imp____restvmx_29(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v30{};
	PPCVRegister v31{};
	// li r11,-32
	r11.s64 = -32;
	// lvx v30,r11,r12
	simd::store_shuffled(v30, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_30) {
	__imp____restvmx_30(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_31) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v31{};
	// li r11,-16
	r11.s64 = -16;
	// lvx v31,r11,r12
	simd::store_shuffled(v31, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_31) {
	__imp____restvmx_31(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_64) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v64{};
	PPCVRegister v65{};
	PPCVRegister v66{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-1024
	r11.s64 = -1024;
	// lvx128 v64,r11,r12
	simd::store_shuffled(v64, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-1008
	r11.s64 = -1008;
	// lvx128 v65,r11,r12
	simd::store_shuffled(v65, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-992
	r11.s64 = -992;
	// lvx128 v66,r11,r12
	simd::store_shuffled(v66, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-976
	r11.s64 = -976;
	// lvx128 v67,r11,r12
	simd::store_shuffled(v67, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-960
	r11.s64 = -960;
	// lvx128 v68,r11,r12
	simd::store_shuffled(v68, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-944
	r11.s64 = -944;
	// lvx128 v69,r11,r12
	simd::store_shuffled(v69, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-928
	r11.s64 = -928;
	// lvx128 v70,r11,r12
	simd::store_shuffled(v70, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-912
	r11.s64 = -912;
	// lvx128 v71,r11,r12
	simd::store_shuffled(v71, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_64) {
	__imp____restvmx_64(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_65) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v65{};
	PPCVRegister v66{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-1008
	r11.s64 = -1008;
	// lvx128 v65,r11,r12
	simd::store_shuffled(v65, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-992
	r11.s64 = -992;
	// lvx128 v66,r11,r12
	simd::store_shuffled(v66, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-976
	r11.s64 = -976;
	// lvx128 v67,r11,r12
	simd::store_shuffled(v67, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-960
	r11.s64 = -960;
	// lvx128 v68,r11,r12
	simd::store_shuffled(v68, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-944
	r11.s64 = -944;
	// lvx128 v69,r11,r12
	simd::store_shuffled(v69, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-928
	r11.s64 = -928;
	// lvx128 v70,r11,r12
	simd::store_shuffled(v70, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-912
	r11.s64 = -912;
	// lvx128 v71,r11,r12
	simd::store_shuffled(v71, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_65) {
	__imp____restvmx_65(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_66) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v66{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-992
	r11.s64 = -992;
	// lvx128 v66,r11,r12
	simd::store_shuffled(v66, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-976
	r11.s64 = -976;
	// lvx128 v67,r11,r12
	simd::store_shuffled(v67, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-960
	r11.s64 = -960;
	// lvx128 v68,r11,r12
	simd::store_shuffled(v68, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-944
	r11.s64 = -944;
	// lvx128 v69,r11,r12
	simd::store_shuffled(v69, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-928
	r11.s64 = -928;
	// lvx128 v70,r11,r12
	simd::store_shuffled(v70, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-912
	r11.s64 = -912;
	// lvx128 v71,r11,r12
	simd::store_shuffled(v71, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_66) {
	__imp____restvmx_66(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_67) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-976
	r11.s64 = -976;
	// lvx128 v67,r11,r12
	simd::store_shuffled(v67, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-960
	r11.s64 = -960;
	// lvx128 v68,r11,r12
	simd::store_shuffled(v68, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-944
	r11.s64 = -944;
	// lvx128 v69,r11,r12
	simd::store_shuffled(v69, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-928
	r11.s64 = -928;
	// lvx128 v70,r11,r12
	simd::store_shuffled(v70, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-912
	r11.s64 = -912;
	// lvx128 v71,r11,r12
	simd::store_shuffled(v71, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_67) {
	__imp____restvmx_67(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_68) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-960
	r11.s64 = -960;
	// lvx128 v68,r11,r12
	simd::store_shuffled(v68, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-944
	r11.s64 = -944;
	// lvx128 v69,r11,r12
	simd::store_shuffled(v69, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-928
	r11.s64 = -928;
	// lvx128 v70,r11,r12
	simd::store_shuffled(v70, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-912
	r11.s64 = -912;
	// lvx128 v71,r11,r12
	simd::store_shuffled(v71, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_68) {
	__imp____restvmx_68(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_69) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-944
	r11.s64 = -944;
	// lvx128 v69,r11,r12
	simd::store_shuffled(v69, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-928
	r11.s64 = -928;
	// lvx128 v70,r11,r12
	simd::store_shuffled(v70, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-912
	r11.s64 = -912;
	// lvx128 v71,r11,r12
	simd::store_shuffled(v71, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_69) {
	__imp____restvmx_69(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-928
	r11.s64 = -928;
	// lvx128 v70,r11,r12
	simd::store_shuffled(v70, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-912
	r11.s64 = -912;
	// lvx128 v71,r11,r12
	simd::store_shuffled(v71, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_70) {
	__imp____restvmx_70(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_71) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-912
	r11.s64 = -912;
	// lvx128 v71,r11,r12
	simd::store_shuffled(v71, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_71) {
	__imp____restvmx_71(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_72) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-896
	r11.s64 = -896;
	// lvx128 v72,r11,r12
	simd::store_shuffled(v72, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_72) {
	__imp____restvmx_72(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_73) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-880
	r11.s64 = -880;
	// lvx128 v73,r11,r12
	simd::store_shuffled(v73, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_73) {
	__imp____restvmx_73(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_74) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-864
	r11.s64 = -864;
	// lvx128 v74,r11,r12
	simd::store_shuffled(v74, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_74) {
	__imp____restvmx_74(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_75) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-848
	r11.s64 = -848;
	// lvx128 v75,r11,r12
	simd::store_shuffled(v75, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_75) {
	__imp____restvmx_75(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_76) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-832
	r11.s64 = -832;
	// lvx128 v76,r11,r12
	simd::store_shuffled(v76, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_76) {
	__imp____restvmx_76(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_77) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-816
	r11.s64 = -816;
	// lvx128 v77,r11,r12
	simd::store_shuffled(v77, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_77) {
	__imp____restvmx_77(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-800
	r11.s64 = -800;
	// lvx128 v78,r11,r12
	simd::store_shuffled(v78, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_78) {
	__imp____restvmx_78(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_79) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-784
	r11.s64 = -784;
	// lvx128 v79,r11,r12
	simd::store_shuffled(v79, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_79) {
	__imp____restvmx_79(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-768
	r11.s64 = -768;
	// lvx128 v80,r11,r12
	simd::store_shuffled(v80, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_80) {
	__imp____restvmx_80(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_81) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-752
	r11.s64 = -752;
	// lvx128 v81,r11,r12
	simd::store_shuffled(v81, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_81) {
	__imp____restvmx_81(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_82) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-736
	r11.s64 = -736;
	// lvx128 v82,r11,r12
	simd::store_shuffled(v82, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_82) {
	__imp____restvmx_82(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_83) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-720
	r11.s64 = -720;
	// lvx128 v83,r11,r12
	simd::store_shuffled(v83, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_83) {
	__imp____restvmx_83(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_84) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-704
	r11.s64 = -704;
	// lvx128 v84,r11,r12
	simd::store_shuffled(v84, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_84) {
	__imp____restvmx_84(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_85) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-688
	r11.s64 = -688;
	// lvx128 v85,r11,r12
	simd::store_shuffled(v85, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_85) {
	__imp____restvmx_85(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_86) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-672
	r11.s64 = -672;
	// lvx128 v86,r11,r12
	simd::store_shuffled(v86, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_86) {
	__imp____restvmx_86(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_87) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-656
	r11.s64 = -656;
	// lvx128 v87,r11,r12
	simd::store_shuffled(v87, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_87) {
	__imp____restvmx_87(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-640
	r11.s64 = -640;
	// lvx128 v88,r11,r12
	simd::store_shuffled(v88, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_88) {
	__imp____restvmx_88(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_89) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-624
	r11.s64 = -624;
	// lvx128 v89,r11,r12
	simd::store_shuffled(v89, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_89) {
	__imp____restvmx_89(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-608
	r11.s64 = -608;
	// lvx128 v90,r11,r12
	simd::store_shuffled(v90, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_90) {
	__imp____restvmx_90(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_91) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-592
	r11.s64 = -592;
	// lvx128 v91,r11,r12
	simd::store_shuffled(v91, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_91) {
	__imp____restvmx_91(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_92) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-576
	r11.s64 = -576;
	// lvx128 v92,r11,r12
	simd::store_shuffled(v92, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_92) {
	__imp____restvmx_92(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_93) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-560
	r11.s64 = -560;
	// lvx128 v93,r11,r12
	simd::store_shuffled(v93, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_93) {
	__imp____restvmx_93(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_94) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-544
	r11.s64 = -544;
	// lvx128 v94,r11,r12
	simd::store_shuffled(v94, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_94) {
	__imp____restvmx_94(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_95) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-528
	r11.s64 = -528;
	// lvx128 v95,r11,r12
	simd::store_shuffled(v95, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_95) {
	__imp____restvmx_95(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_96) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-512
	r11.s64 = -512;
	// lvx128 v96,r11,r12
	simd::store_shuffled(v96, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_96) {
	__imp____restvmx_96(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_97) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-496
	r11.s64 = -496;
	// lvx128 v97,r11,r12
	simd::store_shuffled(v97, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_97) {
	__imp____restvmx_97(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-480
	r11.s64 = -480;
	// lvx128 v98,r11,r12
	simd::store_shuffled(v98, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_98) {
	__imp____restvmx_98(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_99) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-464
	r11.s64 = -464;
	// lvx128 v99,r11,r12
	simd::store_shuffled(v99, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_99) {
	__imp____restvmx_99(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_100) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-448
	r11.s64 = -448;
	// lvx128 v100,r11,r12
	simd::store_shuffled(v100, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_100) {
	__imp____restvmx_100(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_101) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-432
	r11.s64 = -432;
	// lvx128 v101,r11,r12
	simd::store_shuffled(v101, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_101) {
	__imp____restvmx_101(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_102) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-416
	r11.s64 = -416;
	// lvx128 v102,r11,r12
	simd::store_shuffled(v102, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_102) {
	__imp____restvmx_102(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_103) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-400
	r11.s64 = -400;
	// lvx128 v103,r11,r12
	simd::store_shuffled(v103, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_103) {
	__imp____restvmx_103(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_104) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-384
	r11.s64 = -384;
	// lvx128 v104,r11,r12
	simd::store_shuffled(v104, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_104) {
	__imp____restvmx_104(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_105) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-368
	r11.s64 = -368;
	// lvx128 v105,r11,r12
	simd::store_shuffled(v105, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_105) {
	__imp____restvmx_105(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_106) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-352
	r11.s64 = -352;
	// lvx128 v106,r11,r12
	simd::store_shuffled(v106, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_106) {
	__imp____restvmx_106(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_107) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-336
	r11.s64 = -336;
	// lvx128 v107,r11,r12
	simd::store_shuffled(v107, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_107) {
	__imp____restvmx_107(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_108) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-320
	r11.s64 = -320;
	// lvx128 v108,r11,r12
	simd::store_shuffled(v108, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_108) {
	__imp____restvmx_108(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_109) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-304
	r11.s64 = -304;
	// lvx128 v109,r11,r12
	simd::store_shuffled(v109, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_109) {
	__imp____restvmx_109(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_110) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-288
	r11.s64 = -288;
	// lvx128 v110,r11,r12
	simd::store_shuffled(v110, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_110) {
	__imp____restvmx_110(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_111) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-272
	r11.s64 = -272;
	// lvx128 v111,r11,r12
	simd::store_shuffled(v111, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_111) {
	__imp____restvmx_111(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_112) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-256
	r11.s64 = -256;
	// lvx128 v112,r11,r12
	simd::store_shuffled(v112, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_112) {
	__imp____restvmx_112(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_113) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-240
	r11.s64 = -240;
	// lvx128 v113,r11,r12
	simd::store_shuffled(v113, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_113) {
	__imp____restvmx_113(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_114) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-224
	r11.s64 = -224;
	// lvx128 v114,r11,r12
	simd::store_shuffled(v114, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_114) {
	__imp____restvmx_114(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_115) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-208
	r11.s64 = -208;
	// lvx128 v115,r11,r12
	simd::store_shuffled(v115, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_115) {
	__imp____restvmx_115(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_116) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-192
	r11.s64 = -192;
	// lvx128 v116,r11,r12
	simd::store_shuffled(v116, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_116) {
	__imp____restvmx_116(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_117) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-176
	r11.s64 = -176;
	// lvx128 v117,r11,r12
	simd::store_shuffled(v117, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_117) {
	__imp____restvmx_117(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_118) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-160
	r11.s64 = -160;
	// lvx128 v118,r11,r12
	simd::store_shuffled(v118, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_118) {
	__imp____restvmx_118(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_119) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-144
	r11.s64 = -144;
	// lvx128 v119,r11,r12
	simd::store_shuffled(v119, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_119) {
	__imp____restvmx_119(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_120) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-128
	r11.s64 = -128;
	// lvx128 v120,r11,r12
	simd::store_shuffled(v120, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_120) {
	__imp____restvmx_120(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_121) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-112
	r11.s64 = -112;
	// lvx128 v121,r11,r12
	simd::store_shuffled(v121, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_121) {
	__imp____restvmx_121(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_122) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-96
	r11.s64 = -96;
	// lvx128 v122,r11,r12
	simd::store_shuffled(v122, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_122) {
	__imp____restvmx_122(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_123) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-80
	r11.s64 = -80;
	// lvx128 v123,r11,r12
	simd::store_shuffled(v123, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_123) {
	__imp____restvmx_123(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_124) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-64
	r11.s64 = -64;
	// lvx128 v124,r11,r12
	simd::store_shuffled(v124, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_124) {
	__imp____restvmx_124(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_125) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-48
	r11.s64 = -48;
	// lvx128 v125,r11,r12
	simd::store_shuffled(v125, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_125) {
	__imp____restvmx_125(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_126) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// li r11,-32
	r11.s64 = -32;
	// lvx128 v126,r11,r12
	simd::store_shuffled(v126, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_126) {
	__imp____restvmx_126(ctx, base);
}

PPC_FUNC_IMPL(__imp____restvmx_127) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCVRegister v127{};
	// li r11,-16
	r11.s64 = -16;
	// lvx128 v127,r11,r12
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((r11.u32 + r12.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(__restvmx_127) {
	__imp____restvmx_127(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000200) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr1{};
	PPCCRRegister cr2{};
	PPCCRRegister cr3{};
	PPCCRRegister cr4{};
	PPCCRRegister cr5{};
	PPCCRRegister cr6{};
	PPCCRRegister cr7{};
	PPCRegister r0{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f14{};
	PPCRegister f15{};
	PPCRegister f16{};
	PPCRegister f17{};
	PPCRegister f18{};
	PPCRegister f19{};
	PPCRegister f20{};
	PPCRegister f21{};
	PPCRegister f22{};
	PPCRegister f23{};
	PPCRegister f24{};
	PPCRegister f25{};
	PPCRegister f26{};
	PPCRegister f27{};
	PPCRegister f28{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCVRegister v64{};
	PPCVRegister v65{};
	PPCVRegister v66{};
	PPCVRegister v67{};
	PPCVRegister v68{};
	PPCVRegister v69{};
	PPCVRegister v70{};
	PPCVRegister v71{};
	PPCVRegister v72{};
	PPCVRegister v73{};
	PPCVRegister v74{};
	PPCVRegister v75{};
	PPCVRegister v76{};
	PPCVRegister v77{};
	PPCVRegister v78{};
	PPCVRegister v79{};
	PPCVRegister v80{};
	PPCVRegister v81{};
	PPCVRegister v82{};
	PPCVRegister v83{};
	PPCVRegister v84{};
	PPCVRegister v85{};
	PPCVRegister v86{};
	PPCVRegister v87{};
	PPCVRegister v88{};
	PPCVRegister v89{};
	PPCVRegister v90{};
	PPCVRegister v91{};
	PPCVRegister v92{};
	PPCVRegister v93{};
	PPCVRegister v94{};
	PPCVRegister v95{};
	PPCVRegister v96{};
	PPCVRegister v97{};
	PPCVRegister v98{};
	PPCVRegister v99{};
	PPCVRegister v100{};
	PPCVRegister v101{};
	PPCVRegister v102{};
	PPCVRegister v103{};
	PPCVRegister v104{};
	PPCVRegister v105{};
	PPCVRegister v106{};
	PPCVRegister v107{};
	PPCVRegister v108{};
	PPCVRegister v109{};
	PPCVRegister v110{};
	PPCVRegister v111{};
	PPCVRegister v112{};
	PPCVRegister v113{};
	PPCVRegister v114{};
	PPCVRegister v115{};
	PPCVRegister v116{};
	PPCVRegister v117{};
	PPCVRegister v118{};
	PPCVRegister v119{};
	PPCVRegister v120{};
	PPCVRegister v121{};
	PPCVRegister v122{};
	PPCVRegister v123{};
	PPCVRegister v124{};
	PPCVRegister v125{};
	PPCVRegister v126{};
	PPCVRegister v127{};
	// lis r4,-31950
	ctx.r4.s64 = -2093875200;
	// lwz r0,6796(r4)
	r0.u64 = PPC_LOAD_U32(ctx.r4.u32 + 6796);
	// cmpwi r0,0
	cr0.compare<int32_t>(r0.s32, 0, xer);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bnectr 
	if (!cr0.eq) {
		PPC_CALL_INDIRECT_FUNC(ctr.u32);
		return;
	}
	// mflr r0
	// mfcr r4
	ctx.r4.u64 = 0;
	ctx.r4.u64 |= (cr0.lt ? 0x80000000 : 0);
	ctx.r4.u64 |= (cr0.gt ? 0x40000000 : 0);
	ctx.r4.u64 |= (cr0.eq ? 0x20000000 : 0);
	ctx.r4.u64 |= (cr0.so ? 0x10000000 : 0);
	ctx.r4.u64 |= (cr1.lt ? 0x08000000 : 0);
	ctx.r4.u64 |= (cr1.gt ? 0x04000000 : 0);
	ctx.r4.u64 |= (cr1.eq ? 0x02000000 : 0);
	ctx.r4.u64 |= (cr1.so ? 0x01000000 : 0);
	ctx.r4.u64 |= (cr2.lt ? 0x00800000 : 0);
	ctx.r4.u64 |= (cr2.gt ? 0x00400000 : 0);
	ctx.r4.u64 |= (cr2.eq ? 0x00200000 : 0);
	ctx.r4.u64 |= (cr2.so ? 0x00100000 : 0);
	ctx.r4.u64 |= (cr3.lt ? 0x00080000 : 0);
	ctx.r4.u64 |= (cr3.gt ? 0x00040000 : 0);
	ctx.r4.u64 |= (cr3.eq ? 0x00020000 : 0);
	ctx.r4.u64 |= (cr3.so ? 0x00010000 : 0);
	ctx.r4.u64 |= (cr4.lt ? 0x00008000 : 0);
	ctx.r4.u64 |= (cr4.gt ? 0x00004000 : 0);
	ctx.r4.u64 |= (cr4.eq ? 0x00002000 : 0);
	ctx.r4.u64 |= (cr4.so ? 0x00001000 : 0);
	ctx.r4.u64 |= (cr5.lt ? 0x00000800 : 0);
	ctx.r4.u64 |= (cr5.gt ? 0x00000400 : 0);
	ctx.r4.u64 |= (cr5.eq ? 0x00000200 : 0);
	ctx.r4.u64 |= (cr5.so ? 0x00000100 : 0);
	ctx.r4.u64 |= (cr6.lt ? 0x00000080 : 0);
	ctx.r4.u64 |= (cr6.gt ? 0x00000040 : 0);
	ctx.r4.u64 |= (cr6.eq ? 0x00000020 : 0);
	ctx.r4.u64 |= (cr6.so ? 0x00000010 : 0);
	ctx.r4.u64 |= (cr7.lt ? 0x00000008 : 0);
	ctx.r4.u64 |= (cr7.gt ? 0x00000004 : 0);
	ctx.r4.u64 |= (cr7.eq ? 0x00000002 : 0);
	ctx.r4.u64 |= (cr7.so ? 0x00000001 : 0);
	// stfd f14,0(r3)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r3.u32 + 0, f14.u64);
	// stfd f15,8(r3)
	PPC_STORE_U64(ctx.r3.u32 + 8, f15.u64);
	// stfd f16,16(r3)
	PPC_STORE_U64(ctx.r3.u32 + 16, f16.u64);
	// stfd f17,24(r3)
	PPC_STORE_U64(ctx.r3.u32 + 24, f17.u64);
	// stfd f18,32(r3)
	PPC_STORE_U64(ctx.r3.u32 + 32, f18.u64);
	// stfd f19,40(r3)
	PPC_STORE_U64(ctx.r3.u32 + 40, f19.u64);
	// stfd f20,48(r3)
	PPC_STORE_U64(ctx.r3.u32 + 48, f20.u64);
	// stfd f21,56(r3)
	PPC_STORE_U64(ctx.r3.u32 + 56, f21.u64);
	// stfd f22,64(r3)
	PPC_STORE_U64(ctx.r3.u32 + 64, f22.u64);
	// stfd f23,72(r3)
	PPC_STORE_U64(ctx.r3.u32 + 72, f23.u64);
	// stfd f24,80(r3)
	PPC_STORE_U64(ctx.r3.u32 + 80, f24.u64);
	// stfd f25,88(r3)
	PPC_STORE_U64(ctx.r3.u32 + 88, f25.u64);
	// stfd f26,96(r3)
	PPC_STORE_U64(ctx.r3.u32 + 96, f26.u64);
	// stfd f27,104(r3)
	PPC_STORE_U64(ctx.r3.u32 + 104, f27.u64);
	// stfd f28,112(r3)
	PPC_STORE_U64(ctx.r3.u32 + 112, f28.u64);
	// stfd f29,120(r3)
	PPC_STORE_U64(ctx.r3.u32 + 120, f29.u64);
	// stfd f30,128(r3)
	PPC_STORE_U64(ctx.r3.u32 + 128, f30.u64);
	// stfd f31,136(r3)
	PPC_STORE_U64(ctx.r3.u32 + 136, f31.u64);
	// std r13,152(r3)
	PPC_STORE_U64(ctx.r3.u32 + 152, ctx.r13.u64);
	// std r14,160(r3)
	PPC_STORE_U64(ctx.r3.u32 + 160, r14.u64);
	// std r15,168(r3)
	PPC_STORE_U64(ctx.r3.u32 + 168, r15.u64);
	// std r16,176(r3)
	PPC_STORE_U64(ctx.r3.u32 + 176, r16.u64);
	// std r17,184(r3)
	PPC_STORE_U64(ctx.r3.u32 + 184, r17.u64);
	// std r18,192(r3)
	PPC_STORE_U64(ctx.r3.u32 + 192, r18.u64);
	// std r19,200(r3)
	PPC_STORE_U64(ctx.r3.u32 + 200, r19.u64);
	// std r20,208(r3)
	PPC_STORE_U64(ctx.r3.u32 + 208, r20.u64);
	// std r21,216(r3)
	PPC_STORE_U64(ctx.r3.u32 + 216, r21.u64);
	// std r22,224(r3)
	PPC_STORE_U64(ctx.r3.u32 + 224, r22.u64);
	// std r23,232(r3)
	PPC_STORE_U64(ctx.r3.u32 + 232, r23.u64);
	// std r24,240(r3)
	PPC_STORE_U64(ctx.r3.u32 + 240, r24.u64);
	// std r25,248(r3)
	PPC_STORE_U64(ctx.r3.u32 + 248, r25.u64);
	// std r26,256(r3)
	PPC_STORE_U64(ctx.r3.u32 + 256, r26.u64);
	// std r27,264(r3)
	PPC_STORE_U64(ctx.r3.u32 + 264, r27.u64);
	// std r28,272(r3)
	PPC_STORE_U64(ctx.r3.u32 + 272, r28.u64);
	// std r29,280(r3)
	PPC_STORE_U64(ctx.r3.u32 + 280, r29.u64);
	// std r30,288(r3)
	PPC_STORE_U64(ctx.r3.u32 + 288, r30.u64);
	// std r31,296(r3)
	PPC_STORE_U64(ctx.r3.u32 + 296, r31.u64);
	// li r5,320
	ctx.r5.s64 = 320;
	// stvlx128 v64,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v64), 15 - i));
}
	// li r5,336
	ctx.r5.s64 = 336;
	// stvlx128 v65,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v65), 15 - i));
}
	// li r5,352
	ctx.r5.s64 = 352;
	// stvlx128 v66,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v66), 15 - i));
}
	// li r5,368
	ctx.r5.s64 = 368;
	// stvlx128 v67,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v67), 15 - i));
}
	// li r5,384
	ctx.r5.s64 = 384;
	// stvlx128 v68,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v68), 15 - i));
}
	// li r5,400
	ctx.r5.s64 = 400;
	// stvlx128 v69,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v69), 15 - i));
}
	// li r5,416
	ctx.r5.s64 = 416;
	// stvlx128 v70,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v70), 15 - i));
}
	// li r5,432
	ctx.r5.s64 = 432;
	// stvlx128 v71,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v71), 15 - i));
}
	// li r5,448
	ctx.r5.s64 = 448;
	// stvlx128 v72,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v72), 15 - i));
}
	// li r5,464
	ctx.r5.s64 = 464;
	// stvlx128 v73,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v73), 15 - i));
}
	// li r5,480
	ctx.r5.s64 = 480;
	// stvlx128 v74,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v74), 15 - i));
}
	// li r5,496
	ctx.r5.s64 = 496;
	// stvlx128 v75,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v75), 15 - i));
}
	// li r5,512
	ctx.r5.s64 = 512;
	// stvlx128 v76,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v76), 15 - i));
}
	// li r5,528
	ctx.r5.s64 = 528;
	// stvlx128 v77,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v77), 15 - i));
}
	// li r5,544
	ctx.r5.s64 = 544;
	// stvlx128 v78,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v78), 15 - i));
}
	// li r5,560
	ctx.r5.s64 = 560;
	// stvlx128 v79,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v79), 15 - i));
}
	// li r5,576
	ctx.r5.s64 = 576;
	// stvlx128 v80,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v80), 15 - i));
}
	// li r5,592
	ctx.r5.s64 = 592;
	// stvlx128 v81,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v81), 15 - i));
}
	// li r5,608
	ctx.r5.s64 = 608;
	// stvlx128 v82,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v82), 15 - i));
}
	// li r5,624
	ctx.r5.s64 = 624;
	// stvlx128 v83,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v83), 15 - i));
}
	// li r5,640
	ctx.r5.s64 = 640;
	// stvlx128 v84,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v84), 15 - i));
}
	// li r5,656
	ctx.r5.s64 = 656;
	// stvlx128 v85,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v85), 15 - i));
}
	// li r5,672
	ctx.r5.s64 = 672;
	// stvlx128 v86,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v86), 15 - i));
}
	// li r5,688
	ctx.r5.s64 = 688;
	// stvlx128 v87,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v87), 15 - i));
}
	// li r5,704
	ctx.r5.s64 = 704;
	// stvlx128 v88,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v88), 15 - i));
}
	// li r5,720
	ctx.r5.s64 = 720;
	// stvlx128 v89,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v89), 15 - i));
}
	// li r5,736
	ctx.r5.s64 = 736;
	// stvlx128 v90,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v90), 15 - i));
}
	// li r5,752
	ctx.r5.s64 = 752;
	// stvlx128 v91,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v91), 15 - i));
}
	// li r5,768
	ctx.r5.s64 = 768;
	// stvlx128 v92,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v92), 15 - i));
}
	// li r5,784
	ctx.r5.s64 = 784;
	// stvlx128 v93,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v93), 15 - i));
}
	// li r5,800
	ctx.r5.s64 = 800;
	// stvlx128 v94,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v94), 15 - i));
}
	// li r5,816
	ctx.r5.s64 = 816;
	// stvlx128 v95,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v95), 15 - i));
}
	// li r5,832
	ctx.r5.s64 = 832;
	// stvlx128 v96,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v96), 15 - i));
}
	// li r5,848
	ctx.r5.s64 = 848;
	// stvlx128 v97,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v97), 15 - i));
}
	// li r5,864
	ctx.r5.s64 = 864;
	// stvlx128 v98,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v98), 15 - i));
}
	// li r5,880
	ctx.r5.s64 = 880;
	// stvlx128 v99,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v99), 15 - i));
}
	// li r5,896
	ctx.r5.s64 = 896;
	// stvlx128 v100,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v100), 15 - i));
}
	// li r5,912
	ctx.r5.s64 = 912;
	// stvlx128 v101,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v101), 15 - i));
}
	// li r5,928
	ctx.r5.s64 = 928;
	// stvlx128 v102,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v102), 15 - i));
}
	// li r5,944
	ctx.r5.s64 = 944;
	// stvlx128 v103,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v103), 15 - i));
}
	// li r5,960
	ctx.r5.s64 = 960;
	// stvlx128 v104,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v104), 15 - i));
}
	// li r5,976
	ctx.r5.s64 = 976;
	// stvlx128 v105,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v105), 15 - i));
}
	// li r5,992
	ctx.r5.s64 = 992;
	// stvlx128 v106,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v106), 15 - i));
}
	// li r5,1008
	ctx.r5.s64 = 1008;
	// stvlx128 v107,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v107), 15 - i));
}
	// li r5,1024
	ctx.r5.s64 = 1024;
	// stvlx128 v108,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v108), 15 - i));
}
	// li r5,1040
	ctx.r5.s64 = 1040;
	// stvlx128 v109,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v109), 15 - i));
}
	// li r5,1056
	ctx.r5.s64 = 1056;
	// stvlx128 v110,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v110), 15 - i));
}
	// li r5,1072
	ctx.r5.s64 = 1072;
	// stvlx128 v111,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v111), 15 - i));
}
	// li r5,1088
	ctx.r5.s64 = 1088;
	// stvlx128 v112,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v112), 15 - i));
}
	// li r5,1104
	ctx.r5.s64 = 1104;
	// stvlx128 v113,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v113), 15 - i));
}
	// li r5,1120
	ctx.r5.s64 = 1120;
	// stvlx128 v114,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v114), 15 - i));
}
	// li r5,1136
	ctx.r5.s64 = 1136;
	// stvlx128 v115,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v115), 15 - i));
}
	// li r5,1152
	ctx.r5.s64 = 1152;
	// stvlx128 v116,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v116), 15 - i));
}
	// li r5,1168
	ctx.r5.s64 = 1168;
	// stvlx128 v117,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v117), 15 - i));
}
	// li r5,1184
	ctx.r5.s64 = 1184;
	// stvlx128 v118,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v118), 15 - i));
}
	// li r5,1200
	ctx.r5.s64 = 1200;
	// stvlx128 v119,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v119), 15 - i));
}
	// li r5,1216
	ctx.r5.s64 = 1216;
	// stvlx128 v120,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v120), 15 - i));
}
	// li r5,1232
	ctx.r5.s64 = 1232;
	// stvlx128 v121,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v121), 15 - i));
}
	// li r5,1248
	ctx.r5.s64 = 1248;
	// stvlx128 v122,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v122), 15 - i));
}
	// li r5,1264
	ctx.r5.s64 = 1264;
	// stvlx128 v123,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v123), 15 - i));
}
	// li r5,1280
	ctx.r5.s64 = 1280;
	// stvlx128 v124,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v124), 15 - i));
}
	// li r5,1296
	ctx.r5.s64 = 1296;
	// stvlx128 v125,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v125), 15 - i));
}
	// li r5,1312
	ctx.r5.s64 = 1312;
	// stvlx128 v126,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v126), 15 - i));
}
	// li r5,1328
	ctx.r5.s64 = 1328;
	// stvlx128 v127,r5,r3
{
	uint32_t addr = 
ctx.r5.u32 + ctx.r3.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v127), 15 - i));
}
	// stw r0,308(r3)
	PPC_STORE_U32(ctx.r3.u32 + 308, r0.u32);
	// stw r4,304(r3)
	PPC_STORE_U32(ctx.r3.u32 + 304, ctx.r4.u32);
	// std r1,144(r3)
	PPC_STORE_U64(ctx.r3.u32 + 144, ctx.r1.u64);
	// li r0,0
	r0.s64 = 0;
	// stw r0,312(r3)
	PPC_STORE_U32(ctx.r3.u32 + 312, r0.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000200) {
	__imp__sub_83000200(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830004D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x8300051c
	if (!cr6.eq) goto loc_8300051C;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x830005c0
	goto loc_830005C0;
loc_8300051C:
	// li r30,0
	r30.s64 = 0;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r30,0(r31)
	PPC_STORE_U8(r31.u32 + 0, r30.u8);
	// bl 0x82cbd660
	sub_82CBD660(ctx, base);
	// li r10,47
	ctx.r10.s64 = 47;
	// li r9,100
	ctx.r9.s64 = 100;
	// lhz r8,82(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 82);
	// stb r10,5(r31)
	PPC_STORE_U8(r31.u32 + 5, ctx.r10.u8);
	// li r11,10
	r11.s64 = 10;
	// stb r10,2(r31)
	PPC_STORE_U8(r31.u32 + 2, ctx.r10.u8);
	// lhz r6,86(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// stb r30,8(r31)
	PPC_STORE_U8(r31.u32 + 8, r30.u8);
	// lhz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// divw r9,r10,r9
	ctx.r9.s32 = ctx.r10.s32 / ctx.r9.s32;
	// mulli r9,r9,100
	ctx.r9.s64 = ctx.r9.s64 * 100;
	// subf r5,r9,r10
	ctx.r5.s64 = ctx.r10.s64 - ctx.r9.s64;
	// divw r10,r8,r11
	ctx.r10.s32 = ctx.r8.s32 / r11.s32;
	// divw r9,r6,r11
	ctx.r9.s32 = ctx.r6.s32 / r11.s32;
	// divw r7,r5,r11
	ctx.r7.s32 = ctx.r5.s32 / r11.s32;
	// mulli r3,r9,10
	ctx.r3.s64 = ctx.r9.s64 * 10;
	// mulli r4,r10,10
	ctx.r4.s64 = ctx.r10.s64 * 10;
	// mulli r30,r7,10
	r30.s64 = ctx.r7.s64 * 10;
	// divw r9,r8,r11
	ctx.r9.s32 = ctx.r8.s32 / r11.s32;
	// divw r7,r6,r11
	ctx.r7.s32 = ctx.r6.s32 / r11.s32;
	// divw r10,r5,r11
	ctx.r10.s32 = ctx.r5.s32 / r11.s32;
	// subf r6,r3,r6
	ctx.r6.s64 = ctx.r6.s64 - ctx.r3.s64;
	// subf r8,r4,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r4.s64;
	// subf r11,r30,r5
	r11.s64 = ctx.r5.s64 - r30.s64;
	// addi r9,r9,48
	ctx.r9.s64 = ctx.r9.s64 + 48;
	// addi r8,r8,48
	ctx.r8.s64 = ctx.r8.s64 + 48;
	// addi r7,r7,48
	ctx.r7.s64 = ctx.r7.s64 + 48;
	// stb r9,0(r31)
	PPC_STORE_U8(r31.u32 + 0, ctx.r9.u8);
	// addi r6,r6,48
	ctx.r6.s64 = ctx.r6.s64 + 48;
	// stb r8,1(r31)
	PPC_STORE_U8(r31.u32 + 1, ctx.r8.u8);
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// stb r7,3(r31)
	PPC_STORE_U8(r31.u32 + 3, ctx.r7.u8);
	// addi r11,r11,48
	r11.s64 = r11.s64 + 48;
	// stb r6,4(r31)
	PPC_STORE_U8(r31.u32 + 4, ctx.r6.u8);
	// stb r10,6(r31)
	PPC_STORE_U8(r31.u32 + 6, ctx.r10.u8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,7(r31)
	PPC_STORE_U8(r31.u32 + 7, r11.u8);
loc_830005C0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830004D0) {
	__imp__sub_830004D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830005D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// cmplwi cr6,r30,1
	cr6.compare<uint32_t>(r30.u32, 1, xer);
	// blt cr6,0x83000628
	if (cr6.lt) goto loc_83000628;
	// beq cr6,0x83000614
	if (cr6.eq) goto loc_83000614;
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bge cr6,0x83000638
	if (!cr6.lt) goto loc_83000638;
	// lis r11,-31946
	r11.s64 = -2093613056;
	// li r29,20
	r29.s64 = 20;
	// addi r11,r11,-26212
	r11.s64 = r11.s64 + -26212;
	// addi r31,r11,36
	r31.s64 = r11.s64 + 36;
	// b 0x8300063c
	goto loc_8300063C;
loc_83000614:
	// lis r11,-31946
	r11.s64 = -2093613056;
	// li r29,20
	r29.s64 = 20;
	// addi r11,r11,-26212
	r11.s64 = r11.s64 + -26212;
	// addi r31,r11,16
	r31.s64 = r11.s64 + 16;
	// b 0x8300063c
	goto loc_8300063C;
loc_83000628:
	// lis r11,-31946
	r11.s64 = -2093613056;
	// li r29,16
	r29.s64 = 16;
	// addi r31,r11,-26212
	r31.s64 = r11.s64 + -26212;
	// b 0x8300063c
	goto loc_8300063C;
loc_83000638:
	// lwz r31,80(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_8300063C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r5,r11,-29916
	ctx.r5.s64 = r11.s64 + -29916;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82170cc8
	sub_82170CC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83000670
	if (cr0.eq) goto loc_83000670;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83000670:
	// lbz r10,2(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 2);
	// addi r11,r31,3
	r11.s64 = r31.s64 + 3;
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpwi cr6,r10,92
	cr6.compare<int32_t>(ctx.r10.s32, 92, xer);
	// beq cr6,0x83000698
	if (cr6.eq) goto loc_83000698;
	// cmpwi cr6,r10,47
	cr6.compare<int32_t>(ctx.r10.s32, 47, xer);
	// beq cr6,0x83000698
	if (cr6.eq) goto loc_83000698;
	// li r10,92
	ctx.r10.s64 = 92;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
loc_83000698:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// addi r30,r11,1
	r30.s64 = r11.s64 + 1;
	// li r10,116
	ctx.r10.s64 = 116;
	// beq cr6,0x830006ac
	if (cr6.eq) goto loc_830006AC;
	// li r10,115
	ctx.r10.s64 = 115;
loc_830006AC:
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// subf r11,r30,r31
	r11.s64 = r31.s64 - r30.s64;
	// add r28,r11,r29
	r28.u64 = r11.u64 + r29.u64;
	// bl 0x8221ee38
	sub_8221EE38(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// bl 0x83003358
	sub_83003358(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830006ec
	if (cr0.eq) goto loc_830006EC;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_830006EC:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r5,r11,-6348
	ctx.r5.s64 = r11.s64 + -6348;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82ca6cf8
	sub_82CA6CF8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83000720
	if (cr0.eq) goto loc_83000720;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83000720:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830005D8) {
	__imp__sub_830005D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000728) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// li r4,46
	ctx.r4.s64 = 46;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// bl 0x82caaf10
	sub_82CAAF10(ctx, base);
	// addi r31,r3,1
	r31.s64 = ctx.r3.s64 + 1;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82ca6300
	sub_82CA6300(ctx, base);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// cmplw cr6,r3,r28
	cr6.compare<uint32_t>(ctx.r3.u32, r28.u32, xer);
	// blt cr6,0x83000770
	if (cr6.lt) goto loc_83000770;
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x830007d8
	goto loc_830007D8;
loc_83000770:
	// li r6,32
	ctx.r6.s64 = 32;
	// li r5,8
	ctx.r5.s64 = 8;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x83003358
	sub_83003358(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830007a0
	if (cr0.eq) goto loc_830007A0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_830007A0:
	// subf r11,r31,r30
	r11.s64 = r30.s64 - r31.s64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// add r4,r11,r29
	ctx.r4.u64 = r11.u64 + r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82170cc8
	sub_82170CC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830007d4
	if (cr0.eq) goto loc_830007D4;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_830007D4:
	// li r3,0
	ctx.r3.s64 = 0;
loc_830007D8:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83000728) {
	__imp__sub_83000728(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830007E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd8
	// addi r31,r1,-160
	r31.s64 = ctx.r1.s64 + -160;
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// stw r25,180(r31)
	PPC_STORE_U32(r31.u32 + 180, r25.u32);
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// li r24,0
	r24.s64 = 0;
	// stw r30,212(r31)
	PPC_STORE_U32(r31.u32 + 212, r30.u32);
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// stw r24,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r24.u32);
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,2
	ctx.r3.s64 = 2;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// bl 0x82cafe08
	sub_82CAFE08(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x8300084c
	if (!cr0.eq) goto loc_8300084C;
	// stw r24,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r24.u32);
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x830009ec
	goto loc_830009EC;
loc_8300084C:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82caff48
	sub_82CAFF48(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// lis r11,-31946
	r11.s64 = -2093613056;
	// bne cr6,0x83000870
	if (!cr6.eq) goto loc_83000870;
	// li r29,16
	r29.s64 = 16;
	// addi r30,r11,-26212
	r30.s64 = r11.s64 + -26212;
	// b 0x8300087c
	goto loc_8300087C;
loc_83000870:
	// li r29,20
	r29.s64 = 20;
	// addi r11,r11,-26212
	r11.s64 = r11.s64 + -26212;
	// addi r30,r11,36
	r30.s64 = r11.s64 + 36;
loc_8300087C:
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83000894
	if (!cr6.eq) goto loc_83000894;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x830005d8
	sub_830005D8(ctx, base);
	// b 0x830008ac
	goto loc_830008AC;
loc_83000894:
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x83000728
	sub_83000728(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x830009ac
	if (!cr0.eq) goto loc_830009AC;
loc_830008AC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x830034f8
	sub_830034F8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x830008e0
	if (!cr0.eq) goto loc_830008E0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x83000728
	sub_83000728(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x830009ac
	if (!cr0.eq) goto loc_830009AC;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x830008ac
	goto loc_830008AC;
loc_830008E0:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// bne cr6,0x83000934
	if (!cr6.eq) goto loc_83000934;
	// bl 0x82cac520
	sub_82CAC520(ctx, base);
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x83000900
	if (!cr0.eq) goto loc_83000900;
loc_830008F4:
	// li r11,12
	r11.s64 = 12;
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// b 0x830009ac
	goto loc_830009AC;
loc_83000900:
	// lwz r11,44(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + 44);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83000924
	if (!cr6.eq) goto loc_83000924;
	// li r3,16
	ctx.r3.s64 = 16;
	// bl 0x82ca3c68
	sub_82CA3C68(ctx, base);
	// stw r3,44(r29)
	PPC_STORE_U32(r29.u32 + 44, ctx.r3.u32);
	// rotlwi r11,r3,0
	r11.u64 = rotl32(ctx.r3.u32, 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x830008f4
	if (cr6.eq) goto loc_830008F4;
loc_83000924:
	// lwz r3,44(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + 44);
	// li r4,16
	ctx.r4.s64 = 16;
	// stw r3,180(r31)
	PPC_STORE_U32(r31.u32 + 180, ctx.r3.u32);
	// b 0x83000984
	goto loc_83000984;
loc_83000934:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x8300097c
	if (cr6.eq) goto loc_8300097C;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_83000940:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x83000940
	if (!cr6.eq) goto loc_83000940;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r11,r11,0
	r11.u64 = rotl32(r11.u32, 0);
	// cmplw cr6,r11,r26
	cr6.compare<uint32_t>(r11.u32, r26.u32, xer);
	// blt cr6,0x8300097c
	if (cr6.lt) goto loc_8300097C;
	// li r11,34
	r11.s64 = 34;
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// stw r11,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r11.u32);
	// beq cr6,0x830009ac
	if (cr6.eq) goto loc_830009AC;
	// stb r24,0(r25)
	PPC_STORE_U8(r25.u32 + 0, r24.u8);
	// b 0x830009ac
	goto loc_830009AC;
loc_8300097C:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
loc_83000984:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x82170cc8
	sub_82170CC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830009ac
	if (cr0.eq) goto loc_830009AC;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_830009AC:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,160
	r12.s64 = r31.s64 + 160;
	// bl 0x830009f4
	sub_830009F4(ctx, base);
	// lwz r11,212(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 212);
	// lwz r10,180(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 180);
	// lwz r30,80(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// beq cr6,0x830009dc
	if (cr6.eq) goto loc_830009DC;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// b 0x830009e8
	goto loc_830009E8;
loc_830009DC:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
loc_830009E8:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_830009EC:
	// addi r1,r31,160
	ctx.r1.s64 = r31.s64 + 160;
	// b 0x82ca2c28
	return;
}

PPC_WEAK_FUNC(sub_830007E8) {
	__imp__sub_830007E8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830009F4) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82cafde8
	sub_82CAFDE8(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830009F4) {
	__imp__sub_830009F4(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000A18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// li r6,32767
	ctx.r6.s64 = 32767;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,-1
	ctx.r4.s64 = -1;
	// bl 0x830007e8
	sub_830007E8(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000A18) {
	__imp__sub_83000A18(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000A60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// addi r31,r1,-176
	r31.s64 = ctx.r1.s64 + -176;
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// cntlzw r11,r26
	r11.u64 = r26.u32 == 0 ? 32 : __builtin_clz(r26.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// li r27,0
	r27.s64 = 0;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stw r27,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r27.u32);
	// stw r27,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r27.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x83000ac4
	if (!cr6.eq) goto loc_83000AC4;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x83000d18
	goto loc_83000D18;
loc_83000AC4:
	// stw r27,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r27.u32);
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82cafe08
	sub_82CAFE08(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83000ae4
	if (!cr0.eq) goto loc_83000AE4;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x83000d18
	goto loc_83000D18;
loc_83000AE4:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82caff48
	sub_82CAFF48(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lis r11,-31946
	r11.s64 = -2093613056;
	// addi r30,r11,-26196
	r30.s64 = r11.s64 + -26196;
	// lbz r11,-26196(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + -26196);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// li r4,20
	ctx.r4.s64 = 20;
	// bne 0x83000bec
	if (!cr0.eq) goto loc_83000BEC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-29916
	ctx.r5.s64 = r11.s64 + -29916;
	// bl 0x82170cc8
	sub_82170CC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83000b38
	if (cr0.eq) goto loc_83000B38;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83000B38:
	// lbz r10,2(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 2);
	// addi r11,r30,3
	r11.s64 = r30.s64 + 3;
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
	// cmpwi cr6,r10,92
	cr6.compare<int32_t>(ctx.r10.s32, 92, xer);
	// beq cr6,0x83000b68
	if (cr6.eq) goto loc_83000B68;
	// cmpwi cr6,r10,47
	cr6.compare<int32_t>(ctx.r10.s32, 47, xer);
	// beq cr6,0x83000b68
	if (cr6.eq) goto loc_83000B68;
	// li r10,92
	ctx.r10.s64 = 92;
	// addi r11,r30,4
	r11.s64 = r30.s64 + 4;
	// stb r10,3(r30)
	PPC_STORE_U8(r30.u32 + 3, ctx.r10.u8);
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
loc_83000B68:
	// li r10,116
	ctx.r10.s64 = 116;
	// addi r29,r11,1
	r29.s64 = r11.s64 + 1;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r30,20
	r11.s64 = r30.s64 + 20;
	// stw r29,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r29.u32);
	// subf r28,r29,r11
	r28.s64 = r11.s64 - r29.s64;
	// bl 0x8221ee38
	sub_8221EE38(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r6,32
	ctx.r6.s64 = 32;
	// bl 0x83003358
	sub_83003358(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83000bb4
	if (cr0.eq) goto loc_83000BB4;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83000BB4:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r5,r11,-6348
	ctx.r5.s64 = r11.s64 + -6348;
	// li r4,20
	ctx.r4.s64 = 20;
	// bl 0x82ca6cf8
	sub_82CA6CF8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83000c00
	if (cr0.eq) goto loc_83000C00;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
	// b 0x83000c00
	goto loc_83000C00;
loc_83000BEC:
	// lis r5,32767
	ctx.r5.s64 = 2147418112;
	// ori r5,r5,65535
	ctx.r5.u64 = ctx.r5.u64 | 65535;
	// bl 0x83000728
	sub_83000728(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83000cf0
	if (!cr0.eq) goto loc_83000CF0;
loc_83000C00:
	// bl 0x82caf298
	sub_82CAF298(ctx, base);
	// mr. r29,r3
	r29.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// stw r29,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r29.u32);
	// bne 0x83000c1c
	if (!cr0.eq) goto loc_83000C1C;
	// li r11,24
	r11.s64 = 24;
	// stw r11,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r11.u32);
	// b 0x83000cf4
	goto loc_83000CF4;
loc_83000C1C:
	// li r11,1
	r11.s64 = 1;
	// stw r11,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r11.u32);
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r28,0(r3)
	r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r27.u32);
loc_83000C34:
	// lis r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r7,384
	ctx.r7.s64 = 384;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// ori r5,r5,34114
	ctx.r5.u64 = ctx.r5.u64 | 34114;
	// addi r3,r31,80
	ctx.r3.s64 = r31.s64 + 80;
	// bl 0x82cb8ae8
	sub_82CB8AE8(ctx, base);
	// cmpwi cr6,r3,17
	cr6.compare<int32_t>(ctx.r3.s32, 17, xer);
	// bne cr6,0x83000c7c
	if (!cr6.eq) goto loc_83000C7C;
	// lis r5,32767
	ctx.r5.s64 = 2147418112;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// ori r5,r5,65535
	ctx.r5.u64 = ctx.r5.u64 | 65535;
	// li r4,20
	ctx.r4.s64 = 20;
	// bl 0x83000728
	sub_83000728(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83000c7c
	if (!cr0.eq) goto loc_83000C7C;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// b 0x83000c34
	goto loc_83000C34;
loc_83000C7C:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x83000c94
	if (!cr6.eq) goto loc_83000C94;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r28.u32);
loc_83000C94:
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x83000cf4
	if (cr6.eq) goto loc_83000CF4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x830035c0
	sub_830035C0(ctx, base);
	// stw r3,28(r29)
	PPC_STORE_U32(r29.u32 + 28, ctx.r3.u32);
	// rotlwi r11,r3,0
	r11.u64 = rotl32(ctx.r3.u32, 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83000cc4
	if (!cr6.eq) goto loc_83000CC4;
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// bl 0x82caf558
	sub_82CAF558(ctx, base);
	// b 0x83000cf4
	goto loc_83000CF4;
loc_83000CC4:
	// stw r27,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r27.u32);
	// lis r11,-31949
	r11.s64 = -2093809664;
	// stw r27,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r27.u32);
	// stw r27,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r27.u32);
	// lwz r11,27392(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 27392);
	// ori r11,r11,128
	r11.u64 = r11.u64 | 128;
	// stw r11,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r11.u32);
	// lwz r11,80(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// stw r11,16(r29)
	PPC_STORE_U32(r29.u32 + 16, r11.u32);
	// stw r29,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r29.u32);
	// b 0x83000cf4
	goto loc_83000CF4;
loc_83000CF0:
	// lwz r29,88(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 88);
loc_83000CF4:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,176
	r12.s64 = r31.s64 + 176;
	// bl 0x83000d40
	sub_83000D40(ctx, base);
	// lwz r30,96(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 96);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x83000d14
	if (cr6.eq) goto loc_83000D14;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
loc_83000D14:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_83000D18:
	// addi r1,r31,176
	ctx.r1.s64 = r31.s64 + 176;
	// b 0x82ca2c2c
	return;
}

PPC_WEAK_FUNC(sub_83000A60) {
	__imp__sub_83000A60(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000D20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-176
	r31.s64 = r12.s64 + -176;
	// std r29,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r29.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r29,88(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// b 0x83000d58
	goto loc_83000D58;
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-176
	r31.s64 = r12.s64 + -176;
	// std r29,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r29.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_83000D58:
	// lwz r11,92(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x83000d6c
	if (cr6.eq) goto loc_83000D6C;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
loc_83000D6C:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82cafde8
	sub_82CAFDE8(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r29,-16(r1)
	r29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000D20) {
	__imp__sub_83000D20(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000D40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-176
	r31.s64 = r12.s64 + -176;
	// std r29,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r29.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,92(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 92);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x83000d6c
	if (cr6.eq) goto loc_83000D6C;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
loc_83000D6C:
	// li r3,2
	ctx.r3.s64 = 2;
	// bl 0x82cafde8
	sub_82CAFDE8(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r29,-16(r1)
	r29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000D40) {
	__imp__sub_83000D40(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000D90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// li r4,64
	ctx.r4.s64 = 64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x83000a60
	sub_83000A60(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000D90) {
	__imp__sub_83000D90(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000DC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beqlr cr6
	if (cr6.eq) return;
	// rlwinm r11,r3,0,0,29
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0xFFFFFFFC;
	// lwz r3,-4(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + -4);
	// b 0x82ca5dc0
	sub_82CA5DC0(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83000DC8) {
	__imp__sub_83000DC8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000DDC) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000DDC) {
	__imp__sub_83000DDC(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000DE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r4,-1
	r11.s64 = ctx.r4.s64 + -1;
	// and. r11,r11,r4
	r11.u64 = r11.u64 & ctx.r4.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83000e28
	if (cr0.eq) goto loc_83000E28;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
loc_83000E20:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83000e5c
	goto loc_83000E5C;
loc_83000E28:
	// cmplwi cr6,r4,4
	cr6.compare<uint32_t>(ctx.r4.u32, 4, xer);
	// bgt cr6,0x83000e34
	if (cr6.gt) goto loc_83000E34;
	// li r4,4
	ctx.r4.s64 = 4;
loc_83000E34:
	// addi r31,r4,-1
	r31.s64 = ctx.r4.s64 + -1;
	// add r11,r31,r3
	r11.u64 = r31.u64 + ctx.r3.u64;
	// addi r3,r11,4
	ctx.r3.s64 = r11.s64 + 4;
	// bl 0x82ca3c68
	sub_82CA3C68(ctx, base);
	// mr. r11,r3
	r11.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83000e20
	if (cr0.eq) goto loc_83000E20;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// andc r3,r10,r31
	ctx.r3.u64 = ctx.r10.u64 & ~r31.u64;
	// stw r11,-4(r3)
	PPC_STORE_U32(ctx.r3.u32 + -4, r11.u32);
loc_83000E5C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000DE0) {
	__imp__sub_83000DE0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000E70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x821882a8
	sub_821882A8(ctx, base);
	// lis r12,-414
	r12.s64 = -27131904;
	// ld r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// lis r11,152
	r11.s64 = 9961472;
	// ori r12,r12,20001
	r12.u64 = r12.u64 | 20001;
	// ori r11,r11,38528
	r11.u64 = r11.u64 | 38528;
	// rldicr r12,r12,32,31
	r12.u64 = rotl64(r12.u64, 32) & 0xFFFFFFFF00000000;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// oris r12,r12,10945
	r12.u64 = r12.u64 | 717291520;
	// ori r12,r12,32768
	r12.u64 = r12.u64 | 32768;
	// add r10,r10,r12
	ctx.r10.u64 = ctx.r10.u64 + r12.u64;
	// divdu r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 / r11.u64;
	// beq cr6,0x83000ec0
	if (cr6.eq) goto loc_83000EC0;
	// std r3,0(r31)
	PPC_STORE_U64(r31.u32 + 0, ctx.r3.u64);
loc_83000EC0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000E70) {
	__imp__sub_83000E70(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000ED8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x83000f04
	if (cr6.lt) goto loc_83000F04;
	// bl 0x83003650
	sub_83003650(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// blt cr6,0x83000f0c
	if (cr6.lt) goto loc_83000F0C;
loc_83000F04:
	// bl 0x83003650
	sub_83003650(ctx, base);
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
loc_83000F0C:
	// bl 0x83003660
	sub_83003660(ctx, base);
	// rlwinm r11,r31,2,0,29
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r3,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83000ED8) {
	__imp__sub_83000ED8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000F30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x82cac520
	sub_82CAC520(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x83000f58
	if (!cr0.eq) goto loc_83000F58;
loc_83000F4C:
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r11,-10632
	ctx.r3.s64 = r11.s64 + -10632;
	// b 0x83000fbc
	goto loc_83000FBC;
loc_83000F58:
	// lwz r31,36(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + 36);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x83000f80
	if (!cr6.eq) goto loc_83000F80;
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,134
	ctx.r3.s64 = 134;
	// bl 0x82caae18
	sub_82CAAE18(ctx, base);
	// stw r3,36(r30)
	PPC_STORE_U32(r30.u32 + 36, ctx.r3.u32);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x83000f4c
	if (cr0.eq) goto loc_83000F4C;
loc_83000F80:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x83000ed8
	sub_83000ED8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,134
	ctx.r4.s64 = 134;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82170cc8
	sub_82170CC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83000fb8
	if (cr0.eq) goto loc_83000FB8;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83000FB8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_83000FBC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_83000F30) {
	__imp__sub_83000F30(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83000FD0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// addi r31,r1,-176
	r31.s64 = ctx.r1.s64 + -176;
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r30,204(r31)
	PPC_STORE_U32(r31.u32 + 204, r30.u32);
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// li r23,0
	r23.s64 = 0;
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r23,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r23.u32);
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x83001040
	if (!cr6.eq) goto loc_83001040;
loc_83001014:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x83001194
	goto loc_83001194;
loc_83001040:
	// cntlzw r11,r27
	r11.u64 = r27.u32 == 0 ? 32 : __builtin_clz(r27.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x83001014
	if (cr6.eq) goto loc_83001014;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8870
	sub_82CA8870(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// rlwinm. r11,r11,0,25,25
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83001160
	if (!cr0.eq) goto loc_83001160;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x830010c4
	if (cr6.eq) goto loc_830010C4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x830010c4
	if (cr6.eq) goto loc_830010C4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// srawi r10,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	ctx.r10.s64 = ctx.r3.s32 >> 5;
	// lis r11,-31921
	r11.s64 = -2091974656;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r28,r10,2,0,29
	r28.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r11,29632
	r29.s64 = r11.s64 + 29632;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// lwzx r11,r28,r29
	r11.u64 = PPC_LOAD_U32(r28.u32 + r29.u32);
	// rlwinm r10,r3,6,21,25
	ctx.r10.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// lis r9,-31953
	ctx.r9.s64 = -2094071808;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r28,r9,-2648
	r28.s64 = ctx.r9.s64 + -2648;
	// b 0x830010d8
	goto loc_830010D8;
loc_830010C4:
	// lis r10,-31953
	ctx.r10.s64 = -2094071808;
	// lis r11,-31921
	r11.s64 = -2091974656;
	// addi r28,r10,-2648
	r28.s64 = ctx.r10.s64 + -2648;
	// addi r29,r11,29632
	r29.s64 = r11.s64 + 29632;
	// mr r11,r28
	r11.u64 = r28.u64;
loc_830010D8:
	// lbz r11,40(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 40);
	// rlwinm. r11,r11,0,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83001134
	if (!cr0.eq) goto loc_83001134;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x83001128
	if (cr6.eq) goto loc_83001128;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x83001128
	if (cr6.eq) goto loc_83001128;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r28,r11,2,0,29
	r28.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// lwzx r10,r28,r29
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + r29.u32);
	// rlwinm r11,r3,6,21,25
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r28,r11,r10
	r28.u64 = r11.u64 + ctx.r10.u64;
loc_83001128:
	// lbz r11,40(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 40);
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83001160
	if (cr0.eq) goto loc_83001160;
loc_83001134:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r23,-1
	r23.s64 = -1;
	// stw r23,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r23.u32);
loc_83001160:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bne cr6,0x83001184
	if (!cr6.eq) goto loc_83001184;
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mtctr r26
	ctr.u64 = r26.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r3,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r3.u32);
loc_83001184:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,176
	r12.s64 = r31.s64 + 176;
	// bl 0x830011bc
	sub_830011BC(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
loc_83001194:
	// addi r1,r31,176
	ctx.r1.s64 = r31.s64 + 176;
	// b 0x82ca2c24
	return;
}

PPC_WEAK_FUNC(sub_83000FD0) {
	__imp__sub_83000FD0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_8300119C) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-176
	r31.s64 = r12.s64 + -176;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r30,204(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 204);
	// b 0x830011d4
	goto loc_830011D4;
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-176
	r31.s64 = r12.s64 + -176;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_830011D4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_8300119C) {
	__imp__sub_8300119C(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830011BC) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-176
	r31.s64 = r12.s64 + -176;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830011BC) {
	__imp__sub_830011BC(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830011F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lis r10,-32053
	ctx.r10.s64 = -2100625408;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r3,r10,8248
	ctx.r3.s64 = ctx.r10.s64 + 8248;
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x83000fd0
	sub_83000FD0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830011F8) {
	__imp__sub_830011F8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001260) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// li r26,0
	r26.s64 = 0;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// stw r26,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r26.u32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x830012c4
	if (!cr6.eq) goto loc_830012C4;
loc_83001298:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x830013b8
	goto loc_830013B8;
loc_830012C4:
	// cmpwi cr6,r28,4
	cr6.compare<int32_t>(r28.s32, 4, xer);
	// beq cr6,0x830012dc
	if (cr6.eq) goto loc_830012DC;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x830012ec
	if (cr6.eq) goto loc_830012EC;
	// cmpwi cr6,r28,64
	cr6.compare<int32_t>(r28.s32, 64, xer);
	// bne cr6,0x83001298
	if (!cr6.eq) goto loc_83001298;
loc_830012DC:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x830012ec
	if (cr6.eq) goto loc_830012EC;
	// cmpwi cr6,r28,64
	cr6.compare<int32_t>(r28.s32, 64, xer);
	// bne cr6,0x83001304
	if (!cr6.eq) goto loc_83001304;
loc_830012EC:
	// cmplwi cr6,r6,2
	cr6.compare<uint32_t>(ctx.r6.u32, 2, xer);
	// blt cr6,0x83001298
	if (cr6.lt) goto loc_83001298;
	// lis r11,32767
	r11.s64 = 2147418112;
	// ori r11,r11,65535
	r11.u64 = r11.u64 | 65535;
	// cmplw cr6,r6,r11
	cr6.compare<uint32_t>(ctx.r6.u32, r11.u32, xer);
	// bgt cr6,0x83001298
	if (cr6.gt) goto loc_83001298;
loc_83001304:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r30,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r30.u32);
	// rlwinm r29,r6,0,0,30
	r29.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFFFE;
	// bl 0x82ca8870
	sub_82CA8870(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca4e68
	sub_82CA4E68(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf720
	sub_82CAF720(ctx, base);
	// rlwinm. r11,r28,0,29,29
	r11.u64 = rotl64(r28.u32 | (r28.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// li r12,-15629
	r12.s64 = -15629;
	// and r11,r11,r12
	r11.u64 = r11.u64 & r12.u64;
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
	// beq 0x83001350
	if (cr0.eq) goto loc_83001350;
	// ori r11,r11,4
	r11.u64 = r11.u64 | 4;
	// addi r27,r30,20
	r27.s64 = r30.s64 + 20;
	// li r29,2
	r29.s64 = 2;
	// b 0x83001394
	goto loc_83001394;
loc_83001350:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x83001390
	if (!cr6.eq) goto loc_83001390;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82ca3c68
	sub_82CA3C68(ctx, base);
	// mr. r27,r3
	r27.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// bne 0x83001384
	if (!cr0.eq) goto loc_83001384;
	// lis r10,-31949
	ctx.r10.s64 = -2093809664;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lwz r11,26836(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 26836);
	// stw r9,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r9.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,26836(r10)
	PPC_STORE_U32(ctx.r10.u32 + 26836, r11.u32);
	// b 0x830013a8
	goto loc_830013A8;
loc_83001384:
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// ori r11,r11,1032
	r11.u64 = r11.u64 | 1032;
	// b 0x83001394
	goto loc_83001394;
loc_83001390:
	// ori r11,r11,1280
	r11.u64 = r11.u64 | 1280;
loc_83001394:
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
	// stw r29,24(r30)
	PPC_STORE_U32(r30.u32 + 24, r29.u32);
	// stw r27,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r27.u32);
	// stw r27,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r27.u32);
	// stw r26,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r26.u32);
loc_830013A8:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x830013c0
	sub_830013C0(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
loc_830013B8:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_83001260) {
	__imp__sub_83001260(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830013C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// mflr r12
	// stw r12,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// lwz r12,-16(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830013C0) {
	__imp__sub_830013C0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830013F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x83001430
	if (!cr6.eq) goto loc_83001430;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83001438
	goto loc_83001438;
loc_83001430:
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// rlwinm r3,r11,0,27,27
	ctx.r3.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
loc_83001438:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830013F0) {
	__imp__sub_830013F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001448) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x83001488
	if (!cr6.eq) goto loc_83001488;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83001490
	goto loc_83001490;
loc_83001488:
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// rlwinm r3,r11,0,26,26
	ctx.r3.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
loc_83001490:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83001448) {
	__imp__sub_83001448(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830014A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,164(r31)
	PPC_STORE_U32(r31.u32 + 164, r30.u32);
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// li r27,0
	r27.s64 = 0;
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stw r27,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r27.u32);
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x83001508
	if (!cr6.eq) goto loc_83001508;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x8300165c
	goto loc_8300165C;
loc_83001508:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8870
	sub_82CA8870(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// rlwinm. r11,r11,0,25,25
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83001614
	if (!cr0.eq) goto loc_83001614;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x83001578
	if (cr6.eq) goto loc_83001578;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x83001578
	if (cr6.eq) goto loc_83001578;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// srawi r10,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	ctx.r10.s64 = ctx.r3.s32 >> 5;
	// lis r11,-31921
	r11.s64 = -2091974656;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r28,r10,2,0,29
	r28.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r11,29632
	r29.s64 = r11.s64 + 29632;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// lwzx r10,r28,r29
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + r29.u32);
	// rlwinm r9,r3,6,21,25
	ctx.r9.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// lis r11,-31953
	r11.s64 = -2094071808;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r28,r11,-2648
	r28.s64 = r11.s64 + -2648;
	// b 0x8300158c
	goto loc_8300158C;
loc_83001578:
	// lis r10,-31953
	ctx.r10.s64 = -2094071808;
	// lis r11,-31921
	r11.s64 = -2091974656;
	// addi r28,r10,-2648
	r28.s64 = ctx.r10.s64 + -2648;
	// addi r29,r11,29632
	r29.s64 = r11.s64 + 29632;
	// mr r10,r28
	ctx.r10.u64 = r28.u64;
loc_8300158C:
	// lbz r11,40(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 40);
	// rlwinm. r11,r11,0,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x830015e8
	if (!cr0.eq) goto loc_830015E8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x830015dc
	if (cr6.eq) goto loc_830015DC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x830015dc
	if (cr6.eq) goto loc_830015DC;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r28,r11,2,0,29
	r28.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// lwzx r10,r28,r29
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + r29.u32);
	// rlwinm r11,r3,6,21,25
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r28,r11,r10
	r28.u64 = r11.u64 + ctx.r10.u64;
loc_830015DC:
	// lbz r11,40(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 40);
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83001614
	if (cr0.eq) goto loc_83001614;
loc_830015E8:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r27,-1
	r27.s64 = -1;
	// stw r27,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r27.u32);
loc_83001614:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x8300164c
	if (!cr6.eq) goto loc_8300164C;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 4);
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// blt 0x83001640
	if (cr0.lt) goto loc_83001640;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
	// b 0x83001648
	goto loc_83001648;
loc_83001640:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82cb5958
	sub_82CB5958(ctx, base);
loc_83001648:
	// stw r3,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r3.u32);
loc_8300164C:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,144
	r12.s64 = r31.s64 + 144;
	// bl 0x83001684
	sub_83001684(ctx, base);
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
loc_8300165C:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_830014A8) {
	__imp__sub_830014A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001664) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r30,164(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 164);
	// b 0x8300169c
	goto loc_8300169C;
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_8300169C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83001664) {
	__imp__sub_83001664(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001684) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-144
	r31.s64 = r12.s64 + -144;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83001684) {
	__imp__sub_83001684(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830016C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,148(r31)
	PPC_STORE_U32(r31.u32 + 148, r30.u32);
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x83001720
	if (!cr6.eq) goto loc_83001720;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x830017b0
	goto loc_830017B0;
loc_83001720:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8870
	sub_82CA8870(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r11,r11,0,28,25
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFCF;
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x83001788
	if (cr6.eq) goto loc_83001788;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x83001788
	if (cr6.eq) goto loc_83001788;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// lis r10,-31921
	ctx.r10.s64 = -2091974656;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r28,r11,2,0,29
	r28.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r10,29632
	r29.s64 = ctx.r10.s64 + 29632;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// lwzx r11,r28,r29
	r11.u64 = PPC_LOAD_U32(r28.u32 + r29.u32);
	// rlwinm r10,r3,6,21,25
	ctx.r10.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// b 0x83001790
	goto loc_83001790;
loc_83001788:
	// lis r11,-31953
	r11.s64 = -2094071808;
	// addi r11,r11,-2648
	r11.s64 = r11.s64 + -2648;
loc_83001790:
	// lbz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// rlwinm r10,r10,0,31,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// stb r10,4(r11)
	PPC_STORE_U8(r11.u32 + 4, ctx.r10.u8);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,128
	r12.s64 = r31.s64 + 128;
	// bl 0x830017d8
	sub_830017D8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_830017B0:
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830016C8) {
	__imp__sub_830016C8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830017B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-128
	r31.s64 = r12.s64 + -128;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r30,148(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 148);
	// b 0x830017f0
	goto loc_830017F0;
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-128
	r31.s64 = r12.s64 + -128;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_830017F0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830017B8) {
	__imp__sub_830017B8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830017D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-128
	r31.s64 = r12.s64 + -128;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830017D8) {
	__imp__sub_830017D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001810) {
	PPC_FUNC_PROLOGUE();
	// b 0x830016c8
	sub_830016C8(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83001810) {
	__imp__sub_83001810(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001818) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x83004f70
	sub_83004F70(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83001838
	if (!cr0.eq) goto loc_83001838;
	// bl 0x82cc0758
	sub_82CC0758(ctx, base);
	// b 0x8300183c
	goto loc_8300183C;
loc_83001838:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8300183C:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x83001850
	if (cr6.eq) goto loc_83001850;
	// bl 0x82240508
	sub_82240508(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x83001854
	goto loc_83001854;
loc_83001850:
	// li r3,0
	ctx.r3.s64 = 0;
loc_83001854:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83001818) {
	__imp__sub_83001818(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001868) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bne cr6,0x830018b4
	if (!cr6.eq) goto loc_830018B4;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// b 0x83001af8
	goto loc_83001AF8;
loc_830018B4:
	// lwa r11,20(r31)
	r11.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 20));
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// cmpdi cr6,r11,69
	cr6.compare<int64_t>(r11.s64, 69, xer);
	// blt cr6,0x83001ae8
	if (cr6.lt) goto loc_83001AE8;
	// cmpdi cr6,r11,1101
	cr6.compare<int64_t>(r11.s64, 1101, xer);
	// bgt cr6,0x83001ae8
	if (cr6.gt) goto loc_83001AE8;
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x830018e0
	if (cr6.lt) goto loc_830018E0;
	// cmpwi cr6,r10,11
	cr6.compare<int32_t>(ctx.r10.s32, 11, xer);
	// ble cr6,0x83001928
	if (!cr6.gt) goto loc_83001928;
loc_830018E0:
	// li r9,12
	ctx.r9.s64 = 12;
	// divw r8,r10,r9
	ctx.r8.s32 = ctx.r10.s32 / ctx.r9.s32;
	// divw r9,r10,r9
	ctx.r9.s32 = ctx.r10.s32 / ctx.r9.s32;
	// mulli r8,r8,12
	ctx.r8.s64 = ctx.r8.s64 * 12;
	// extsw r9,r9
	ctx.r9.s64 = ctx.r9.s32;
	// subf. r10,r8,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r8.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// stw r10,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r10.u32);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// bge 0x83001918
	if (!cr0.lt) goto loc_83001918;
	// addi r10,r10,12
	ctx.r10.s64 = ctx.r10.s64 + 12;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r10,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r10.u32);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
loc_83001918:
	// cmpdi cr6,r11,69
	cr6.compare<int64_t>(r11.s64, 69, xer);
	// blt cr6,0x83001ae8
	if (cr6.lt) goto loc_83001AE8;
	// cmpdi cr6,r11,1101
	cr6.compare<int64_t>(r11.s64, 1101, xer);
	// bgt cr6,0x83001ae8
	if (cr6.gt) goto loc_83001AE8;
loc_83001928:
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// lis r9,-31953
	ctx.r9.s64 = -2094071808;
	// sradi r8,r11,2
	xer.ca = (r11.s64 < 0) & ((r11.u64 & 0x3) != 0);
	ctx.r8.s64 = r11.s64 >> 2;
	// rlwinm r7,r10,2,0,29
	ctx.r7.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r9,r9,-572
	ctx.r9.s64 = ctx.r9.s64 + -572;
	// addze r6,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	ctx.r6.s64 = temp.s64;
	// li r8,400
	ctx.r8.s64 = 400;
	// rldicr r6,r6,2,61
	ctx.r6.u64 = rotl64(ctx.r6.u64, 2) & 0xFFFFFFFFFFFFFFFC;
	// li r5,100
	ctx.r5.s64 = 100;
	// lwax r9,r7,r9
	ctx.r9.s64 = int32_t(PPC_LOAD_U32(ctx.r7.u32 + ctx.r9.u32));
	// subf r7,r6,r11
	ctx.r7.s64 = r11.s64 - ctx.r6.s64;
	// mr r6,r9
	ctx.r6.u64 = ctx.r9.u64;
	// cmpdi cr6,r7,0
	cr6.compare<int64_t>(ctx.r7.s64, 0, xer);
	// bne cr6,0x83001974
	if (!cr6.eq) goto loc_83001974;
	// divd r9,r11,r5
	ctx.r9.s64 = r11.s64 / ctx.r5.s64;
	// mulli r9,r9,100
	ctx.r9.s64 = ctx.r9.s64 * 100;
	// subf r9,r9,r11
	ctx.r9.s64 = r11.s64 - ctx.r9.s64;
	// cmpdi cr6,r9,0
	cr6.compare<int64_t>(ctx.r9.s64, 0, xer);
	// bne cr6,0x8300198c
	if (!cr6.eq) goto loc_8300198C;
loc_83001974:
	// addi r9,r11,1900
	ctx.r9.s64 = r11.s64 + 1900;
	// divd r7,r9,r8
	ctx.r7.s64 = ctx.r9.s64 / ctx.r8.s64;
	// mulli r7,r7,400
	ctx.r7.s64 = ctx.r7.s64 * 400;
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// cmpdi cr6,r9,0
	cr6.compare<int64_t>(ctx.r9.s64, 0, xer);
	// bne cr6,0x83001998
	if (!cr6.eq) goto loc_83001998;
loc_8300198C:
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// ble cr6,0x83001998
	if (!cr6.gt) goto loc_83001998;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
loc_83001998:
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// lwa r9,12(r31)
	ctx.r9.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 12));
	// addi r7,r11,299
	ctx.r7.s64 = r11.s64 + 299;
	// lwa r3,8(r31)
	ctx.r3.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 8));
	// sradi r30,r10,1
	xer.ca = (ctx.r10.s64 < 0) & ((ctx.r10.u64 & 0x1) != 0);
	r30.s64 = ctx.r10.s64 >> 1;
	// lwa r29,4(r31)
	r29.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 4));
	// divd r8,r7,r8
	ctx.r8.s64 = ctx.r7.s64 / ctx.r8.s64;
	// lwa r28,0(r31)
	r28.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 0));
	// rldicl r7,r30,2,62
	ctx.r7.u64 = rotl64(r30.u64, 2) & 0x3;
	// add r9,r8,r9
	ctx.r9.u64 = ctx.r8.u64 + ctx.r9.u64;
	// divd r8,r10,r5
	ctx.r8.s64 = ctx.r10.s64 / ctx.r5.s64;
	// add r10,r7,r10
	ctx.r10.u64 = ctx.r7.u64 + ctx.r10.u64;
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// sradi r10,r10,2
	xer.ca = (ctx.r10.s64 < 0) & ((ctx.r10.u64 & 0x3) != 0);
	ctx.r10.s64 = ctx.r10.s64 >> 2;
	// mulli r11,r11,365
	r11.s64 = r11.s64 * 365;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// cmpwi cr6,r4,0
	cr6.compare<int32_t>(ctx.r4.s32, 0, xer);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// add r8,r11,r6
	ctx.r8.u64 = r11.u64 + ctx.r6.u64;
	// addi r8,r8,-25567
	ctx.r8.s64 = ctx.r8.s64 + -25567;
	// mulli r8,r8,24
	ctx.r8.s64 = ctx.r8.s64 * 24;
	// add r9,r3,r8
	ctx.r9.u64 = ctx.r3.u64 + ctx.r8.u64;
	// mulli r9,r9,60
	ctx.r9.s64 = ctx.r9.s64 * 60;
	// add r10,r29,r9
	ctx.r10.u64 = r29.u64 + ctx.r9.u64;
	// mulli r10,r10,60
	ctx.r10.s64 = ctx.r10.s64 * 60;
	// add r11,r28,r10
	r11.u64 = r28.u64 + ctx.r10.u64;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// beq cr6,0x83001abc
	if (cr6.eq) goto loc_83001ABC;
	// bl 0x82cbae38
	sub_82CBAE38(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x82cbafc0
	sub_82CBAFC0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83001a34
	if (cr0.eq) goto loc_83001A34;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83001A34:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82cbb028
	sub_82CBB028(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83001a5c
	if (cr0.eq) goto loc_83001A5C;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83001A5C:
	// ld r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwa r11,80(r1)
	r11.s64 = int32_t(PPC_LOAD_U32(ctx.r1.u32 + 80));
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// bl 0x83001e48
	sub_83001E48(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83001ae8
	if (!cr0.eq) goto loc_83001AE8;
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x83001a9c
	if (cr6.gt) goto loc_83001A9C;
	// bge cr6,0x83001ad0
	if (!cr6.lt) goto loc_83001AD0;
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// ble cr6,0x83001ad0
	if (!cr6.gt) goto loc_83001AD0;
loc_83001A9C:
	// ld r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwa r11,84(r1)
	r11.s64 = int32_t(PPC_LOAD_U32(ctx.r1.u32 + 84));
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
	// bl 0x83001e48
	sub_83001E48(ctx, base);
	// b 0x83001ac8
	goto loc_83001AC8;
loc_83001ABC:
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x83001b10
	sub_83001B10(ctx, base);
loc_83001AC8:
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83001ae8
	if (!cr0.eq) goto loc_83001AE8;
loc_83001AD0:
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// li r5,36
	ctx.r5.s64 = 36;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// ld r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// b 0x83001afc
	goto loc_83001AFC;
loc_83001AE8:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_83001AF8:
	// li r3,-1
	ctx.r3.s64 = -1;
loc_83001AFC:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83001868) {
	__imp__sub_83001868(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001B08) {
	PPC_FUNC_PROLOGUE();
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x83001868
	sub_83001868(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83001B08) {
	__imp__sub_83001B08(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001B10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x83001b5c
	if (!cr6.eq) goto loc_83001B5C;
loc_83001B30:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x83001d8c
	goto loc_83001D8C;
loc_83001B5C:
	// li r5,36
	ctx.r5.s64 = 36;
	// li r4,255
	ctx.r4.s64 = 255;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82ca3190
	sub_82CA3190(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x83001b30
	if (cr6.eq) goto loc_83001B30;
	// ld r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U64(r29.u32 + 0);
	// cmpdi cr6,r8,0
	cr6.compare<int64_t>(ctx.r8.s64, 0, xer);
	// bge cr6,0x83001b98
	if (!cr6.lt) goto loc_83001B98;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r3,22
	ctx.r3.s64 = 22;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x83001d8c
	goto loc_83001D8C;
loc_83001B98:
	// lis r11,-27840
	r11.s64 = -1824522240;
	// li r10,7
	ctx.r10.s64 = 7;
	// ori r11,r11,28671
	r11.u64 = r11.u64 | 28671;
	// rldimi r11,r10,32,0
	r11.u64 = (rotl64(ctx.r10.u64, 32) & 0xFFFFFFFF00000000) | (r11.u64 & 0xFFFFFFFF);
	// cmpd cr6,r8,r11
	cr6.compare<int64_t>(ctx.r8.s64, r11.s64, xer);
	// bgt cr6,0x83001b30
	if (cr6.gt) goto loc_83001B30;
	// lis r11,481
	r11.s64 = 31522816;
	// lis r10,1
	ctx.r10.s64 = 65536;
	// ori r7,r11,13184
	ctx.r7.u64 = r11.u64 | 13184;
	// ori r9,r10,20864
	ctx.r9.u64 = ctx.r10.u64 | 20864;
	// divd r11,r8,r7
	r11.s64 = ctx.r8.s64 / ctx.r7.s64;
	// li r3,400
	ctx.r3.s64 = 400;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// li r4,100
	ctx.r4.s64 = 100;
	// addi r11,r11,70
	r11.s64 = r11.s64 + 70;
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// addi r6,r11,299
	ctx.r6.s64 = r11.s64 + 299;
	// divw r5,r10,r4
	ctx.r5.s32 = ctx.r10.s32 / ctx.r4.s32;
	// divw r6,r6,r3
	ctx.r6.s32 = ctx.r6.s32 / ctx.r3.s32;
	// srawi r28,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r28.s64 = ctx.r10.s32 >> 2;
	// subf r5,r5,r6
	ctx.r5.s64 = ctx.r6.s64 - ctx.r5.s64;
	// addze r6,r28
	temp.s64 = r28.s64 + xer.ca;
	xer.ca = temp.u32 < r28.u32;
	ctx.r6.s64 = temp.s64;
	// addi r28,r11,-70
	r28.s64 = r11.s64 + -70;
	// add r6,r5,r6
	ctx.r6.u64 = ctx.r5.u64 + ctx.r6.u64;
	// extsw r5,r28
	ctx.r5.s64 = r28.s32;
	// addi r28,r6,-17
	r28.s64 = ctx.r6.s64 + -17;
	// mulli r6,r5,365
	ctx.r6.s64 = ctx.r5.s64 * 365;
	// extsw r5,r28
	ctx.r5.s64 = r28.s32;
	// add r6,r5,r6
	ctx.r6.u64 = ctx.r5.u64 + ctx.r6.u64;
	// mulld r6,r6,r9
	ctx.r6.s64 = ctx.r6.s64 * ctx.r9.s64;
	// subf r8,r6,r8
	ctx.r8.s64 = ctx.r8.s64 - ctx.r6.s64;
	// cmpdi cr6,r8,0
	cr6.compare<int64_t>(ctx.r8.s64, 0, xer);
	// bge cr6,0x83001c64
	if (!cr6.lt) goto loc_83001C64;
	// srawi r11,r10,2
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3) != 0);
	r11.s64 = ctx.r10.s32 >> 2;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// addze r7,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	ctx.r7.s64 = temp.s64;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// rlwinm r7,r7,2,0,29
	ctx.r7.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// subf. r10,r7,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x83001c48
	if (!cr0.eq) goto loc_83001C48;
	// divw r10,r11,r4
	ctx.r10.s32 = r11.s32 / ctx.r4.s32;
	// mulli r10,r10,100
	ctx.r10.s64 = ctx.r10.s64 * 100;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x83001c5c
	if (!cr0.eq) goto loc_83001C5C;
loc_83001C48:
	// addi r10,r11,1900
	ctx.r10.s64 = r11.s64 + 1900;
	// divw r7,r10,r3
	ctx.r7.s32 = ctx.r10.s32 / ctx.r3.s32;
	// mulli r7,r7,400
	ctx.r7.s64 = ctx.r7.s64 * 400;
	// subf. r10,r7,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x83001ca0
	if (!cr0.eq) goto loc_83001CA0;
loc_83001C5C:
	// add r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 + ctx.r9.u64;
	// b 0x83001c9c
	goto loc_83001C9C;
loc_83001C64:
	// srawi r10,r11,2
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3) != 0);
	ctx.r10.s64 = r11.s32 >> 2;
	// addze r10,r10
	temp.s64 = ctx.r10.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r10.s64 = temp.s64;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x83001c88
	if (!cr0.eq) goto loc_83001C88;
	// divw r10,r11,r4
	ctx.r10.s32 = r11.s32 / ctx.r4.s32;
	// mulli r10,r10,100
	ctx.r10.s64 = ctx.r10.s64 * 100;
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x83001c9c
	if (!cr0.eq) goto loc_83001C9C;
loc_83001C88:
	// addi r10,r11,1900
	ctx.r10.s64 = r11.s64 + 1900;
	// divw r7,r10,r3
	ctx.r7.s32 = ctx.r10.s32 / ctx.r3.s32;
	// mulli r7,r7,400
	ctx.r7.s64 = ctx.r7.s64 * 400;
	// subf. r10,r7,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x83001ca0
	if (!cr0.eq) goto loc_83001CA0;
loc_83001C9C:
	// li r30,1
	r30.s64 = 1;
loc_83001CA0:
	// divd r10,r8,r9
	ctx.r10.s64 = ctx.r8.s64 / ctx.r9.s64;
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// extsw r11,r10
	r11.s64 = ctx.r10.s32;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// mulld r11,r10,r9
	r11.s64 = ctx.r10.s64 * ctx.r9.s64;
	// subf r6,r11,r8
	ctx.r6.s64 = ctx.r8.s64 - r11.s64;
	// beq cr6,0x83001cd0
	if (cr6.eq) goto loc_83001CD0;
	// lis r11,-31953
	r11.s64 = -2094071808;
	// addi r7,r11,-624
	ctx.r7.s64 = r11.s64 + -624;
	// b 0x83001cd8
	goto loc_83001CD8;
loc_83001CD0:
	// lis r11,-31953
	r11.s64 = -2094071808;
	// addi r7,r11,-572
	ctx.r7.s64 = r11.s64 + -572;
loc_83001CD8:
	// lwz r8,28(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// addi r10,r7,4
	ctx.r10.s64 = ctx.r7.s64 + 4;
	// lwz r5,4(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// li r11,1
	r11.s64 = 1;
	// cmpw cr6,r5,r8
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r8.s32, xer);
	// bge cr6,0x83001d08
	if (!cr6.lt) goto loc_83001D08;
	// rotlwi r5,r8,0
	ctx.r5.u64 = rotl32(ctx.r8.u32, 0);
loc_83001CF4:
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r4,r5
	cr6.compare<int32_t>(ctx.r4.s32, ctx.r5.s32, xer);
	// blt cr6,0x83001cf4
	if (cr6.lt) goto loc_83001CF4;
loc_83001D08:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// li r10,3600
	ctx.r10.s64 = 3600;
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// divd r10,r6,r10
	ctx.r10.s64 = ctx.r6.s64 / ctx.r10.s64;
	// li r5,60
	ctx.r5.s64 = 60;
	// extsw r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// li r30,0
	r30.s64 = 0;
	// mulli r3,r3,3600
	ctx.r3.s64 = ctx.r3.s64 * 3600;
	// subf r6,r3,r6
	ctx.r6.s64 = ctx.r6.s64 - ctx.r3.s64;
	// li r3,0
	ctx.r3.s64 = 0;
	// divd r5,r6,r5
	ctx.r5.s64 = ctx.r6.s64 / ctx.r5.s64;
	// extsw r6,r6
	ctx.r6.s64 = ctx.r6.s32;
	// extsw r5,r5
	ctx.r5.s64 = ctx.r5.s32;
	// lwzx r11,r11,r7
	r11.u64 = PPC_LOAD_U32(r11.u32 + ctx.r7.u32);
	// mulli r7,r5,60
	ctx.r7.s64 = ctx.r5.s64 * 60;
	// subf r11,r11,r8
	r11.s64 = ctx.r8.s64 - r11.s64;
	// subf r8,r7,r6
	ctx.r8.s64 = ctx.r6.s64 - ctx.r7.s64;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// ld r11,0(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + 0);
	// divd r11,r11,r9
	r11.s64 = r11.s64 / ctx.r9.s64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stw r5,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r5.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// stw r8,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r8.u32);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
	// divw r10,r11,r4
	ctx.r10.s32 = r11.s32 / ctx.r4.s32;
	// mulli r10,r10,7
	ctx.r10.s64 = ctx.r10.s64 * 7;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
loc_83001D8C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83001B10) {
	__imp__sub_83001B10(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001D98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x83003670
	sub_83003670(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x83001dc4
	if (!cr0.eq) goto loc_83001DC4;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83001de0
	goto loc_83001DE0;
loc_83001DC4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x83001b10
	sub_83001B10(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// bne 0x83001de0
	if (!cr0.eq) goto loc_83001DE0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_83001DE0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83001D98) {
	__imp__sub_83001D98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001DF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82cc0e68
	sub_82CC0E68(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83001e18
	if (!cr0.eq) goto loc_83001E18;
	// bl 0x82cc0758
	sub_82CC0758(ctx, base);
	// b 0x83001e1c
	goto loc_83001E1C;
loc_83001E18:
	// li r3,0
	ctx.r3.s64 = 0;
loc_83001E1C:
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x83001e30
	if (cr6.eq) goto loc_83001E30;
	// bl 0x82240508
	sub_82240508(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x83001e34
	goto loc_83001E34;
loc_83001E30:
	// li r3,0
	ctx.r3.s64 = 0;
loc_83001E34:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83001DF8) {
	__imp__sub_83001DF8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83001E48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	r11.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bne cr6,0x83001ea8
	if (!cr6.eq) goto loc_83001EA8;
loc_83001E7C:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x8300219c
	goto loc_8300219C;
loc_83001EA8:
	// li r5,36
	ctx.r5.s64 = 36;
	// li r4,255
	ctx.r4.s64 = 255;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82ca3190
	sub_82CA3190(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x83001e7c
	if (cr6.eq) goto loc_83001E7C;
	// ld r11,0(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// bge cr6,0x83001ee4
	if (!cr6.lt) goto loc_83001EE4;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,22
	ctx.r10.s64 = 22;
	// li r3,22
	ctx.r3.s64 = 22;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x8300219c
	goto loc_8300219C;
loc_83001EE4:
	// lis r10,-27840
	ctx.r10.s64 = -1824522240;
	// li r9,7
	ctx.r9.s64 = 7;
	// ori r10,r10,28671
	ctx.r10.u64 = ctx.r10.u64 | 28671;
	// rldimi r10,r9,32,0
	ctx.r10.u64 = (rotl64(ctx.r9.u64, 32) & 0xFFFFFFFF00000000) | (ctx.r10.u64 & 0xFFFFFFFF);
	// cmpd cr6,r11,r10
	cr6.compare<int64_t>(r11.s64, ctx.r10.s64, xer);
	// bgt cr6,0x83001e7c
	if (cr6.gt) goto loc_83001E7C;
	// bl 0x82cbae38
	sub_82CBAE38(ctx, base);
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x82cbaf58
	sub_82CBAF58(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83001f28
	if (cr0.eq) goto loc_83001F28;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83001F28:
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82cbafc0
	sub_82CBAFC0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83001f50
	if (cr0.eq) goto loc_83001F50;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83001F50:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82cbb028
	sub_82CBB028(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83001f78
	if (cr0.eq) goto loc_83001F78;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83001F78:
	// lis r10,3
	ctx.r10.s64 = 196608;
	// ld r11,0(r30)
	r11.u64 = PPC_LOAD_U64(r30.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// ori r10,r10,62592
	ctx.r10.u64 = ctx.r10.u64 | 62592;
	// cmpd cr6,r11,r10
	cr6.compare<int64_t>(r11.s64, ctx.r10.s64, xer);
	// ble cr6,0x83001ff8
	if (!cr6.gt) goto loc_83001FF8;
	// lwa r10,80(r1)
	ctx.r10.s64 = int32_t(PPC_LOAD_U32(ctx.r1.u32 + 80));
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// bl 0x83001b10
	sub_83001B10(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x8300219c
	if (!cr0.eq) goto loc_8300219C;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x83002198
	if (cr6.eq) goto loc_83002198;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cbaed8
	sub_82CBAED8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002198
	if (cr0.eq) goto loc_83002198;
	// ld r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// lwa r11,88(r1)
	r11.s64 = int32_t(PPC_LOAD_U32(ctx.r1.u32 + 88));
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// bl 0x83001b10
	sub_83001B10(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x8300219c
	if (!cr0.eq) goto loc_8300219C;
	// li r11,1
	r11.s64 = 1;
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// b 0x83002198
	goto loc_83002198;
loc_83001FF8:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x83001b10
	sub_83001B10(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x8300219c
	if (!cr0.eq) goto loc_8300219C;
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x83002048
	if (cr6.eq) goto loc_83002048;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cbaed8
	sub_82CBAED8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002048
	if (cr0.eq) goto loc_83002048;
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// li r9,1
	ctx.r9.s64 = 1;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwa r8,0(r31)
	ctx.r8.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 0));
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r9,32(r31)
	PPC_STORE_U32(r31.u32 + 32, ctx.r9.u32);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// subf r11,r11,r8
	r11.s64 = ctx.r8.s64 - r11.s64;
	// b 0x83002054
	goto loc_83002054;
loc_83002048:
	// lwa r11,0(r31)
	r11.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 0));
	// lwa r10,80(r1)
	ctx.r10.s64 = int32_t(PPC_LOAD_U32(ctx.r1.u32 + 80));
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
loc_83002054:
	// li r9,60
	ctx.r9.s64 = 60;
	// divd r10,r11,r9
	ctx.r10.s64 = r11.s64 / ctx.r9.s64;
	// mulli r10,r10,60
	ctx.r10.s64 = ctx.r10.s64 * 60;
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// extsw. r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// bge 0x8300207c
	if (!cr0.lt) goto loc_8300207C;
	// addi r10,r10,60
	ctx.r10.s64 = ctx.r10.s64 + 60;
	// addi r11,r11,-60
	r11.s64 = r11.s64 + -60;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
loc_8300207C:
	// lwa r8,4(r31)
	ctx.r8.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 4));
	// divd r10,r11,r9
	ctx.r10.s64 = r11.s64 / ctx.r9.s64;
	// add r11,r10,r8
	r11.u64 = ctx.r10.u64 + ctx.r8.u64;
	// divd r10,r11,r9
	ctx.r10.s64 = r11.s64 / ctx.r9.s64;
	// mulli r10,r10,60
	ctx.r10.s64 = ctx.r10.s64 * 60;
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// extsw. r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// bge 0x830020ac
	if (!cr0.lt) goto loc_830020AC;
	// addi r10,r10,60
	ctx.r10.s64 = ctx.r10.s64 + 60;
	// addi r11,r11,-60
	r11.s64 = r11.s64 + -60;
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
loc_830020AC:
	// lwa r10,8(r31)
	ctx.r10.s64 = int32_t(PPC_LOAD_U32(r31.u32 + 8));
	// divd r11,r11,r9
	r11.s64 = r11.s64 / ctx.r9.s64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// li r8,24
	ctx.r8.s64 = 24;
	// divd r10,r11,r8
	ctx.r10.s64 = r11.s64 / ctx.r8.s64;
	// mulli r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 * 24;
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// extsw. r10,r10
	ctx.r10.s64 = ctx.r10.s32;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bge 0x830020e0
	if (!cr0.lt) goto loc_830020E0;
	// addi r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 24;
	// addi r11,r11,-24
	r11.s64 = r11.s64 + -24;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
loc_830020E0:
	// divd r11,r11,r8
	r11.s64 = r11.s64 / ctx.r8.s64;
	// cmpdi cr6,r11,0
	cr6.compare<int64_t>(r11.s64, 0, xer);
	// ble cr6,0x83002128
	if (!cr6.gt) goto loc_83002128;
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// li r8,7
	ctx.r8.s64 = 7;
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// add r7,r11,r10
	ctx.r7.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// divw r8,r7,r8
	ctx.r8.s32 = ctx.r7.s32 / ctx.r8.s32;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r9,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r9.u32);
	// mulli r10,r8,7
	ctx.r10.s64 = ctx.r8.s64 * 7;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// subf r11,r10,r7
	r11.s64 = ctx.r7.s64 - ctx.r10.s64;
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
	// b 0x83002198
	goto loc_83002198;
loc_83002128:
	// bge cr6,0x83002198
	if (!cr6.lt) goto loc_83002198;
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// extsw r11,r11
	r11.s64 = r11.s32;
	// li r8,7
	ctx.r8.s64 = 7;
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// addi r9,r9,7
	ctx.r9.s64 = ctx.r9.s64 + 7;
	// add. r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// divw r8,r9,r8
	ctx.r8.s32 = ctx.r9.s32 / ctx.r8.s32;
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
	// mulli r8,r8,7
	ctx.r8.s64 = ctx.r8.s64 * 7;
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// stw r9,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r9.u32);
	// bgt 0x8300218c
	if (cr0.gt) goto loc_8300218C;
	// addi r8,r10,31
	ctx.r8.s64 = ctx.r10.s64 + 31;
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// lwz r9,20(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 20);
	// li r7,11
	ctx.r7.s64 = 11;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r8,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r8.u32);
	// addi r10,r9,-1
	ctx.r10.s64 = ctx.r9.s64 + -1;
	// stw r7,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r7.u32);
	// addi r11,r11,365
	r11.s64 = r11.s64 + 365;
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// b 0x83002194
	goto loc_83002194;
loc_8300218C:
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
loc_83002194:
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
loc_83002198:
	// li r3,0
	ctx.r3.s64 = 0;
loc_8300219C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83001E48) {
	__imp__sub_83001E48(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830021B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x83003670
	sub_83003670(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x830021e4
	if (!cr0.eq) goto loc_830021E4;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83002200
	goto loc_83002200;
loc_830021E4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x83001e48
	sub_83001E48(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// bne 0x83002200
	if (!cr0.eq) goto loc_83002200;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_83002200:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830021B8) {
	__imp__sub_830021B8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002218) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmpdi cr6,r4,0
	cr6.compare<int64_t>(ctx.r4.s64, 0, xer);
	// blt cr6,0x83002248
	if (cr6.lt) goto loc_83002248;
	// cmpdi cr6,r3,0
	cr6.compare<int64_t>(ctx.r3.s64, 0, xer);
	// blt cr6,0x83002248
	if (cr6.lt) goto loc_83002248;
	// subf r11,r4,r3
	r11.s64 = ctx.r3.s64 - ctx.r4.s64;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f1,f0
	ctx.f1.f64 = double(f0.s64);
	// b 0x8300225c
	goto loc_8300225C;
loc_83002248:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r10,22
	ctx.r10.s64 = 22;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lfd f1,3376(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + 3376);
loc_8300225C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002218) {
	__imp__sub_83002218(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002270) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr1{};
	uint32_t ea{};
	// lbz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// addi r7,r3,1
	ctx.r7.s64 = ctx.r3.s64 + 1;
	// cmpwi cr1,r4,0
	cr1.compare<int32_t>(ctx.r4.s32, 0, xer);
	// andi. r8,r7,3
	ctx.r8.u64 = ctx.r7.u64 & 3;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// beqlr cr1
	if (cr1.eq) return;
	// beq 0x830022a8
	if (cr0.eq) goto loc_830022A8;
loc_8300228C:
	// lbz r4,0(r7)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r7.u32 + 0);
	// addi r7,r7,1
	ctx.r7.s64 = ctx.r7.s64 + 1;
	// cmpwi cr1,r4,0
	cr1.compare<int32_t>(ctx.r4.s32, 0, xer);
	// andi. r8,r7,3
	ctx.r8.u64 = ctx.r7.u64 & 3;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// beqlr cr1
	if (cr1.eq) return;
	// bne 0x8300228c
	if (!cr0.eq) goto loc_8300228C;
loc_830022A8:
	// lwz r4,0(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lis r6,32639
	ctx.r6.s64 = 2139029504;
	// ori r6,r6,32639
	ctx.r6.u64 = ctx.r6.u64 | 32639;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_830022B8:
	// and r8,r4,r6
	ctx.r8.u64 = ctx.r4.u64 & ctx.r6.u64;
	// or r4,r4,r6
	ctx.r4.u64 = ctx.r4.u64 | ctx.r6.u64;
	// add r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 + ctx.r6.u64;
	// or r8,r8,r4
	ctx.r8.u64 = ctx.r8.u64 | ctx.r4.u64;
	// not. r8,r8
	ctx.r8.u64 = ~ctx.r8.u64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x830022dc
	if (!cr0.eq) goto loc_830022DC;
	// lwzu r4,4(r7)
	ea = 4 + ctx.r7.u32;
	ctx.r4.u64 = PPC_LOAD_U32(ea);
	ctx.r7.u32 = ea;
	// addi r3,r3,4
	ctx.r3.s64 = ctx.r3.s64 + 4;
	// b 0x830022b8
	goto loc_830022B8;
loc_830022DC:
	// cntlzw r4,r8
	ctx.r4.u64 = ctx.r8.u32 == 0 ? 32 : __builtin_clz(ctx.r8.u32);
	// rlwinm r4,r4,29,3,31
	ctx.r4.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 29) & 0x1FFFFFFF;
	// add r3,r3,r4
	ctx.r3.u64 = ctx.r3.u64 + ctx.r4.u64;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002270) {
	__imp__sub_83002270(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830022F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r26,r6
	r26.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x83002318
	if (cr6.eq) goto loc_83002318;
	// stw r25,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r25.u32);
loc_83002318:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// bne cr6,0x83002348
	if (!cr6.eq) goto loc_83002348;
loc_83002320:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// b 0x830025bc
	goto loc_830025BC;
loc_83002348:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x83002360
	if (cr6.eq) goto loc_83002360;
	// cmpwi cr6,r26,2
	cr6.compare<int32_t>(r26.s32, 2, xer);
	// blt cr6,0x83002320
	if (cr6.lt) goto loc_83002320;
	// cmpwi cr6,r26,36
	cr6.compare<int32_t>(r26.s32, 36, xer);
	// bgt cr6,0x83002320
	if (cr6.gt) goto loc_83002320;
loc_83002360:
	// lis r11,-31953
	r11.s64 = -2094071808;
	// lhz r31,0(r25)
	r31.u64 = PPC_LOAD_U16(r25.u32 + 0);
	// li r27,0
	r27.s64 = 0;
	// addi r30,r11,-3224
	r30.s64 = r11.s64 + -3224;
	// addi r29,r25,2
	r29.s64 = r25.s64 + 2;
	// b 0x83002380
	goto loc_83002380;
loc_83002378:
	// lhz r31,0(r29)
	r31.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// addi r29,r29,2
	r29.s64 = r29.s64 + 2;
loc_83002380:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb12e0
	sub_82CB12E0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83002378
	if (!cr0.eq) goto loc_83002378;
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// bne cr6,0x830023ac
	if (!cr6.eq) goto loc_830023AC;
	// ori r24,r24,2
	r24.u64 = r24.u64 | 2;
	// b 0x830023b4
	goto loc_830023B4;
loc_830023AC:
	// cmplwi cr6,r11,43
	cr6.compare<uint32_t>(r11.u32, 43, xer);
	// bne cr6,0x830023bc
	if (!cr6.eq) goto loc_830023BC;
loc_830023B4:
	// lhz r31,0(r29)
	r31.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// addi r29,r29,2
	r29.s64 = r29.s64 + 2;
loc_830023BC:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// blt cr6,0x830025b0
	if (cr6.lt) goto loc_830025B0;
	// cmpwi cr6,r26,1
	cr6.compare<int32_t>(r26.s32, 1, xer);
	// beq cr6,0x830025b0
	if (cr6.eq) goto loc_830025B0;
	// cmpwi cr6,r26,36
	cr6.compare<int32_t>(r26.s32, 36, xer);
	// bgt cr6,0x830025b0
	if (cr6.gt) goto loc_830025B0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x83002414
	if (!cr6.eq) goto loc_83002414;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb1120
	sub_82CB1120(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830023f4
	if (cr0.eq) goto loc_830023F4;
	// li r26,10
	r26.s64 = 10;
	// b 0x8300244c
	goto loc_8300244C;
loc_830023F4:
	// lhz r11,0(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// cmplwi cr6,r11,120
	cr6.compare<uint32_t>(r11.u32, 120, xer);
	// beq cr6,0x83002410
	if (cr6.eq) goto loc_83002410;
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// beq cr6,0x83002410
	if (cr6.eq) goto loc_83002410;
	// li r26,8
	r26.s64 = 8;
	// b 0x8300244c
	goto loc_8300244C;
loc_83002410:
	// li r26,16
	r26.s64 = 16;
loc_83002414:
	// cmpwi cr6,r26,16
	cr6.compare<int32_t>(r26.s32, 16, xer);
	// bne cr6,0x8300244c
	if (!cr6.eq) goto loc_8300244C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb1120
	sub_82CB1120(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x8300244c
	if (!cr0.eq) goto loc_8300244C;
	// lhz r11,0(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// cmplwi cr6,r11,120
	cr6.compare<uint32_t>(r11.u32, 120, xer);
	// beq cr6,0x83002440
	if (cr6.eq) goto loc_83002440;
	// cmplwi cr6,r11,88
	cr6.compare<uint32_t>(r11.u32, 88, xer);
	// bne cr6,0x8300244c
	if (!cr6.eq) goto loc_8300244C;
loc_83002440:
	// addi r11,r29,2
	r11.s64 = r29.s64 + 2;
	// lhz r31,2(r29)
	r31.u64 = PPC_LOAD_U16(r29.u32 + 2);
	// addi r29,r11,2
	r29.s64 = r11.s64 + 2;
loc_8300244C:
	// extsw r30,r26
	r30.s64 = r26.s32;
	// li r11,-1
	r11.s64 = -1;
	// tdllei r30,0
	// divdu r28,r11,r30
	r28.u64 = r11.u64 / r30.u64;
loc_8300245C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb1120
	sub_82CB1120(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x830024a8
	if (!cr6.eq) goto loc_830024A8;
	// clrlwi r11,r31,16
	r11.u64 = r31.u32 & 0xFFFF;
	// cmplwi cr6,r11,65
	cr6.compare<uint32_t>(r11.u32, 65, xer);
	// blt cr6,0x83002480
	if (cr6.lt) goto loc_83002480;
	// cmplwi cr6,r11,90
	cr6.compare<uint32_t>(r11.u32, 90, xer);
	// ble cr6,0x83002490
	if (!cr6.gt) goto loc_83002490;
loc_83002480:
	// cmplwi cr6,r11,97
	cr6.compare<uint32_t>(r11.u32, 97, xer);
	// blt cr6,0x830024ec
	if (cr6.lt) goto loc_830024EC;
	// cmplwi cr6,r11,122
	cr6.compare<uint32_t>(r11.u32, 122, xer);
	// bgt cr6,0x830024ec
	if (cr6.gt) goto loc_830024EC;
loc_83002490:
	// cmplwi cr6,r11,97
	cr6.compare<uint32_t>(r11.u32, 97, xer);
	// blt cr6,0x830024a4
	if (cr6.lt) goto loc_830024A4;
	// cmplwi cr6,r11,122
	cr6.compare<uint32_t>(r11.u32, 122, xer);
	// bgt cr6,0x830024a4
	if (cr6.gt) goto loc_830024A4;
	// addi r11,r11,-32
	r11.s64 = r11.s64 + -32;
loc_830024A4:
	// addi r3,r11,-55
	ctx.r3.s64 = r11.s64 + -55;
loc_830024A8:
	// cmplw cr6,r3,r26
	cr6.compare<uint32_t>(ctx.r3.u32, r26.u32, xer);
	// bge cr6,0x830024ec
	if (!cr6.lt) goto loc_830024EC;
	// ori r24,r24,8
	r24.u64 = r24.u64 | 8;
	// cmpld cr6,r27,r28
	cr6.compare<uint64_t>(r27.u64, r28.u64, xer);
	// blt cr6,0x8300250c
	if (cr6.lt) goto loc_8300250C;
	// bne cr6,0x830024e0
	if (!cr6.eq) goto loc_830024E0;
	// li r11,-1
	r11.s64 = -1;
	// clrldi r10,r3,32
	ctx.r10.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// divdu r9,r11,r30
	ctx.r9.u64 = r11.u64 / r30.u64;
	// tdllei r30,0
	// mulld r9,r9,r30
	ctx.r9.s64 = ctx.r9.s64 * r30.s64;
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// cmpld cr6,r10,r11
	cr6.compare<uint64_t>(ctx.r10.u64, r11.u64, xer);
	// ble cr6,0x8300250c
	if (!cr6.gt) goto loc_8300250C;
loc_830024E0:
	// ori r24,r24,4
	r24.u64 = r24.u64 | 4;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x83002518
	if (!cr6.eq) goto loc_83002518;
loc_830024EC:
	// rlwinm. r11,r24,0,28,28
	r11.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r29,r29,-2
	r29.s64 = r29.s64 + -2;
	// bne 0x83002524
	if (!cr0.eq) goto loc_83002524;
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x83002504
	if (cr6.eq) goto loc_83002504;
	// mr r29,r25
	r29.u64 = r25.u64;
loc_83002504:
	// li r27,0
	r27.s64 = 0;
	// b 0x83002590
	goto loc_83002590;
loc_8300250C:
	// mulld r10,r30,r27
	ctx.r10.s64 = r30.s64 * r27.s64;
	// clrldi r11,r3,32
	r11.u64 = ctx.r3.u64 & 0xFFFFFFFF;
	// add r27,r10,r11
	r27.u64 = ctx.r10.u64 + r11.u64;
loc_83002518:
	// lhz r31,0(r29)
	r31.u64 = PPC_LOAD_U16(r29.u32 + 0);
	// addi r29,r29,2
	r29.s64 = r29.s64 + 2;
	// b 0x8300245c
	goto loc_8300245C;
loc_83002524:
	// li r10,-1
	ctx.r10.s64 = -1;
	// li r9,1
	ctx.r9.s64 = 1;
	// rlwinm. r11,r24,0,29,29
	r11.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// clrldi r31,r10,1
	r31.u64 = ctx.r10.u64 & 0x7FFFFFFFFFFFFFFF;
	// rldicr r30,r9,63,63
	r30.u64 = rotl64(ctx.r9.u64, 63) & 0xFFFFFFFFFFFFFFFF;
	// bne 0x83002564
	if (!cr0.eq) goto loc_83002564;
	// clrlwi. r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83002590
	if (!cr0.eq) goto loc_83002590;
	// rlwinm. r11,r24,0,30,30
	r11.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83002554
	if (cr0.eq) goto loc_83002554;
	// cmpld cr6,r27,r30
	cr6.compare<uint64_t>(r27.u64, r30.u64, xer);
	// bgt cr6,0x83002564
	if (cr6.gt) goto loc_83002564;
loc_83002554:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x83002590
	if (!cr6.eq) goto loc_83002590;
	// cmpld cr6,r27,r31
	cr6.compare<uint64_t>(r27.u64, r31.u64, xer);
	// ble cr6,0x83002590
	if (!cr6.gt) goto loc_83002590;
loc_83002564:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,34
	r11.s64 = 34;
	// clrlwi. r10,r24,31
	ctx.r10.u64 = r24.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// beq 0x83002580
	if (cr0.eq) goto loc_83002580;
	// li r27,-1
	r27.s64 = -1;
	// b 0x83002590
	goto loc_83002590;
loc_83002580:
	// rlwinm. r11,r24,0,30,30
	r11.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r27,r30
	r27.u64 = r30.u64;
	// bne 0x83002590
	if (!cr0.eq) goto loc_83002590;
	// mr r27,r31
	r27.u64 = r31.u64;
loc_83002590:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x8300259c
	if (cr6.eq) goto loc_8300259C;
	// stw r29,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r29.u32);
loc_8300259C:
	// rlwinm. r11,r24,0,30,30
	r11.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x830025a8
	if (cr0.eq) goto loc_830025A8;
	// neg r27,r27
	r27.s64 = -r27.s64;
loc_830025A8:
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// b 0x830025c0
	goto loc_830025C0;
loc_830025B0:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// beq cr6,0x830025bc
	if (cr6.eq) goto loc_830025BC;
	// stw r25,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r25.u32);
loc_830025BC:
	// li r3,0
	ctx.r3.s64 = 0;
loc_830025C0:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c24
	return;
}

PPC_WEAK_FUNC(sub_830022F0) {
	__imp__sub_830022F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830025C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r10,-31953
	ctx.r10.s64 = -2094071808;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r3,r10,-3224
	ctx.r3.s64 = ctx.r10.s64 + -3224;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// b 0x830022f0
	sub_830022F0(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_830025C8) {
	__imp__sub_830025C8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830025E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r10,-31953
	ctx.r10.s64 = -2094071808;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r3,r10,-3224
	ctx.r3.s64 = ctx.r10.s64 + -3224;
	// li r7,1
	ctx.r7.s64 = 1;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// b 0x830022f0
	sub_830022F0(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_830025E8) {
	__imp__sub_830025E8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002610) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	uint32_t ea{};
	// lbz r5,0(r4)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// addi r9,r3,-1
	ctx.r9.s64 = ctx.r3.s64 + -1;
	// cmpwi r5,0
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x83002630
	if (cr0.eq) goto loc_83002630;
loc_83002620:
	// lbzu r6,1(r4)
	ea = 1 + ctx.r4.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r4.u32 = ea;
	// stbu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	PPC_STORE_U8(ea, ctx.r5.u8);
	ctx.r9.u32 = ea;
	// mr. r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// bne 0x83002620
	if (!cr0.eq) goto loc_83002620;
loc_83002630:
	// stbu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	PPC_STORE_U8(ea, ctx.r5.u8);
	ctx.r9.u32 = ea;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002610) {
	__imp__sub_83002610(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002638) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr1{};
	uint32_t ea{};
	// lbz r5,0(r4)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// lbz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmpwi cr1,r5,0
	cr1.compare<int32_t>(ctx.r5.s32, 0, xer);
	// cmpwi r6,0
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// beqlr cr1
	if (cr1.eq) return;
	// beq 0x83002660
	if (cr0.eq) goto loc_83002660;
loc_83002654:
	// lbzu r6,1(r9)
	ea = 1 + ctx.r9.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r9.u32 = ea;
	// cmpwi r6,0
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// bne 0x83002654
	if (!cr0.eq) goto loc_83002654;
loc_83002660:
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
loc_83002664:
	// lbzu r6,1(r4)
	ea = 1 + ctx.r4.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r4.u32 = ea;
	// stbu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	PPC_STORE_U8(ea, ctx.r5.u8);
	ctx.r9.u32 = ea;
	// mr. r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// bne 0x83002664
	if (!cr0.eq) goto loc_83002664;
	// stbu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	PPC_STORE_U8(ea, ctx.r5.u8);
	ctx.r9.u32 = ea;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002638) {
	__imp__sub_83002638(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002680) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r0{};
	uint32_t ea{};
	// cmplwi r5,8
	cr0.compare<uint32_t>(ctx.r5.u32, 8, xer);
	// blt 0x830026d8
	if (cr0.lt) goto loc_830026D8;
	// li r0,7
	r0.s64 = 7;
	// rlwinm r7,r5,29,3,31
	ctx.r7.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 29) & 0x1FFFFFFF;
	// and r0,r5,r0
	r0.u64 = ctx.r5.u64 & r0.u64;
	// mtctr r7
	ctr.u64 = ctx.r7.u64;
	// ld r6,0(r4)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r4.u32 + 0);
	// ld r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r3.u32 + 0);
	// b 0x830026ac
	goto loc_830026AC;
loc_830026A4:
	// ldu r6,8(r4)
	ea = 8 + ctx.r4.u32;
	ctx.r6.u64 = PPC_LOAD_U64(ea);
	ctx.r4.u32 = ea;
	// ldu r5,8(r3)
	ea = 8 + ctx.r3.u32;
	ctx.r5.u64 = PPC_LOAD_U64(ea);
	ctx.r3.u32 = ea;
loc_830026AC:
	// cmpd r5,r6
	cr0.compare<int64_t>(ctx.r5.s64, ctx.r6.s64, xer);
	// bdnzt eq,0x830026a4
	--ctr.u64;
	if (ctr.u32 != 0 && cr0.eq) goto loc_830026A4;
	// beq 0x830026cc
	if (cr0.eq) goto loc_830026CC;
	// li r3,-1
	ctx.r3.s64 = -1;
	// cmpld r5,r6
	cr0.compare<uint64_t>(ctx.r5.u64, ctx.r6.u64, xer);
	// bltlr 
	if (cr0.lt) return;
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_830026CC:
	// mr r5,r0
	ctx.r5.u64 = r0.u64;
	// addi r3,r3,8
	ctx.r3.s64 = ctx.r3.s64 + 8;
	// addi r4,r4,8
	ctx.r4.s64 = ctx.r4.s64 + 8;
loc_830026D8:
	// cmpwi r5,0
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// mtctr r5
	ctr.u64 = ctx.r5.u64;
	// beq 0x83002708
	if (cr0.eq) goto loc_83002708;
	// lbz r6,0(r4)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// lbz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// b 0x830026f8
	goto loc_830026F8;
loc_830026F0:
	// lbzu r6,1(r4)
	ea = 1 + ctx.r4.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r4.u32 = ea;
	// lbzu r5,1(r3)
	ea = 1 + ctx.r3.u32;
	ctx.r5.u64 = PPC_LOAD_U8(ea);
	ctx.r3.u32 = ea;
loc_830026F8:
	// cmpw r5,r6
	cr0.compare<int32_t>(ctx.r5.s32, ctx.r6.s32, xer);
	// bdnzt eq,0x830026f0
	--ctr.u64;
	if (ctr.u32 != 0 && cr0.eq) goto loc_830026F0;
	// subf r3,r6,r5
	ctx.r3.s64 = ctx.r5.s64 - ctx.r6.s64;
	// blr 
	return;
loc_83002708:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002680) {
	__imp__sub_83002680(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002710) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x83002754
	if (!cr6.eq) goto loc_83002754;
loc_83002724:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// lis r3,32767
	ctx.r3.s64 = 2147418112;
	// ori r3,r3,65535
	ctx.r3.u64 = ctx.r3.u64 | 65535;
	// b 0x830027c4
	goto loc_830027C4;
loc_83002754:
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x83002724
	if (cr6.eq) goto loc_83002724;
loc_8300275C:
	// lhz r11,0(r3)
	r11.u64 = PPC_LOAD_U16(ctx.r3.u32 + 0);
	// cmplwi cr6,r11,65
	cr6.compare<uint32_t>(r11.u32, 65, xer);
	// blt cr6,0x83002774
	if (cr6.lt) goto loc_83002774;
	// cmplwi cr6,r11,90
	cr6.compare<uint32_t>(r11.u32, 90, xer);
	// addi r10,r11,32
	ctx.r10.s64 = r11.s64 + 32;
	// ble cr6,0x83002778
	if (!cr6.gt) goto loc_83002778;
loc_83002774:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_83002778:
	// lhz r11,0(r4)
	r11.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// clrlwi r9,r10,16
	ctx.r9.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,65
	cr6.compare<uint32_t>(r11.u32, 65, xer);
	// blt cr6,0x83002794
	if (cr6.lt) goto loc_83002794;
	// cmplwi cr6,r11,90
	cr6.compare<uint32_t>(r11.u32, 90, xer);
	// addi r10,r11,32
	ctx.r10.s64 = r11.s64 + 32;
	// ble cr6,0x83002798
	if (!cr6.gt) goto loc_83002798;
loc_83002794:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_83002798:
	// clrlwi. r11,r9,16
	r11.u64 = ctx.r9.u32 & 0xFFFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// addi r3,r3,2
	ctx.r3.s64 = ctx.r3.s64 + 2;
	// addi r4,r4,2
	ctx.r4.s64 = ctx.r4.s64 + 2;
	// beq 0x830027b8
	if (cr0.eq) goto loc_830027B8;
	// clrlwi r8,r10,16
	ctx.r8.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// beq cr6,0x8300275c
	if (cr6.eq) goto loc_8300275C;
loc_830027B8:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// clrlwi r10,r9,16
	ctx.r10.u64 = ctx.r9.u32 & 0xFFFF;
	// subf r3,r11,r10
	ctx.r3.s64 = ctx.r10.s64 - r11.s64;
loc_830027C4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002710) {
	__imp__sub_83002710(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830027D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -48, f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r28
	r31.u64 = r28.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x83002800
	if (cr6.eq) goto loc_83002800;
	// stw r28,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r28.u32);
loc_83002800:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x83002838
	if (!cr6.eq) goto loc_83002838;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f1,3376(r11)
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = PPC_LOAD_U64(r11.u32 + 3376);
	// b 0x8300292c
	goto loc_8300292C;
loc_83002838:
	// lis r11,-31953
	r11.s64 = -2094071808;
	// lhz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// addi r30,r11,-3224
	r30.s64 = r11.s64 + -3224;
	// b 0x83002850
	goto loc_83002850;
loc_83002848:
	// addi r31,r31,2
	r31.s64 = r31.s64 + 2;
	// lhz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 0);
loc_83002850:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x82cb12e0
	sub_82CB12E0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83002848
	if (!cr0.eq) goto loc_83002848;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8217ab30
	sub_8217AB30(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// bl 0x830036f0
	sub_830036F0(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x830028a0
	if (cr6.eq) goto loc_830028A0;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// rlwinm r11,r11,1,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
loc_830028A0:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// andi. r10,r11,576
	ctx.r10.u64 = r11.u64 & 576;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x830028c8
	if (cr0.eq) goto loc_830028C8;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// lfd f31,3376(r11)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(r11.u32 + 3376);
	// beq cr6,0x83002928
	if (cr6.eq) goto loc_83002928;
	// stw r28,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r28.u32);
	// b 0x83002928
	goto loc_83002928;
loc_830028C8:
	// andi. r10,r11,129
	ctx.r10.u64 = r11.u64 & 129;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x830028f8
	if (cr0.eq) goto loc_830028F8;
	// lhz r11,0(r31)
	r11.u64 = PPC_LOAD_U16(r31.u32 + 0);
	// cmplwi cr6,r11,45
	cr6.compare<uint32_t>(r11.u32, 45, xer);
	// lis r11,-32255
	r11.s64 = -2113863680;
	// bne cr6,0x830028f0
	if (!cr6.eq) goto loc_830028F0;
	// lfd f0,4048(r11)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(r11.u32 + 4048);
	// fneg f31,f0
	f31.u64 = f0.u64 ^ 0x8000000000000000;
	// b 0x83002914
	goto loc_83002914;
loc_830028F0:
	// lfd f31,4048(r11)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(r11.u32 + 4048);
	// b 0x83002914
	goto loc_83002914;
loc_830028F8:
	// rlwinm. r11,r11,0,23,23
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83002924
	if (cr0.eq) goto loc_83002924;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lfd f0,16(r3)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r3.u32 + 16);
	// lfd f31,3376(r11)
	f31.u64 = PPC_LOAD_U64(r11.u32 + 3376);
	// fcmpu cr6,f0,f31
	cr6.compare(f0.f64, f31.f64);
	// bne cr6,0x83002924
	if (!cr6.eq) goto loc_83002924;
loc_83002914:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,34
	r11.s64 = 34;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// b 0x83002928
	goto loc_83002928;
loc_83002924:
	// lfd f31,16(r3)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r3.u32 + 16);
loc_83002928:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
loc_8300292C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f31,-48(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830027D8) {
	__imp__sub_830027D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002938) {
	PPC_FUNC_PROLOGUE();
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x830027d8
	sub_830027D8(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83002938) {
	__imp__sub_83002938(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002940) {
	PPC_FUNC_PROLOGUE();
	// b 0x82cc0728
	sub_82CC0728(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83002940) {
	__imp__sub_83002940(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002950) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-96
	r31.s64 = ctx.r1.s64 + -96;
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82cac610
	sub_82CAC610(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r3,88(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 88);
	// lwz r11,84(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 84);
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// bl 0x82cc0728
	sub_82CC0728(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// bl 0x82ca97a8
	sub_82CA97A8(ctx, base);
	// addi r1,r31,96
	ctx.r1.s64 = r31.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002950) {
	__imp__sub_83002950(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830029A4) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// bl 0x82cac8c8
	sub_82CAC8C8(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830029A4) {
	__imp__sub_830029A4(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830029D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82cac428
	sub_82CAC428(ctx, base);
	// bl 0x82cac418
	sub_82CAC418(ctx, base);
	// bl 0x82cac3d0
	sub_82CAC3D0(ctx, base);
	// mr. r11,r3
	r11.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83002a28
	if (!cr0.eq) goto loc_83002A28;
	// bl 0x82cac418
	sub_82CAC418(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82cac480
	sub_82CAC480(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x83002a1c
	if (!cr0.eq) goto loc_83002A1C;
	// bl 0x82cc0758
	sub_82CC0758(ctx, base);
	// bl 0x82cc0728
	sub_82CC0728(ctx, base);
loc_83002A1C:
	// bl 0x8221ee38
	sub_8221EE38(ctx, base);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// b 0x83002a48
	goto loc_83002A48;
loc_83002A28:
	// lwz r10,84(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,84(r11)
	PPC_STORE_U32(r11.u32 + 84, ctx.r10.u32);
	// lwz r10,88(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// stw r10,88(r11)
	PPC_STORE_U32(r11.u32 + 88, ctx.r10.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// bl 0x82cac650
	sub_82CAC650(ctx, base);
loc_83002A48:
	// bl 0x83002950
	sub_83002950(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830029D8) {
	__imp__sub_830029D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002A68) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// li r28,0
	r28.s64 = 0;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x83002ac0
	if (!cr6.eq) goto loc_83002AC0;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// b 0x83002b48
	goto loc_83002B48;
loc_83002AC0:
	// bl 0x82cac428
	sub_82CAC428(ctx, base);
	// li r4,196
	ctx.r4.s64 = 196;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82caae18
	sub_82CAAE18(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x83002b30
	if (cr0.eq) goto loc_83002B30;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cac508
	sub_82CAC508(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// stw r29,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r29.u32);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// stw r27,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r27.u32);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// bne cr6,0x83002b00
	if (!cr6.eq) goto loc_83002B00;
	// addi r30,r1,80
	r30.s64 = ctx.r1.s64 + 80;
loc_83002B00:
	// lis r11,-32000
	r11.s64 = -2097152000;
	// mr r8,r30
	ctx.r8.u64 = r30.u64;
	// mr r7,r24
	ctx.r7.u64 = r24.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// addi r5,r11,10712
	ctx.r5.s64 = r11.s64 + 10712;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82cbd280
	sub_82CBD280(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x83002b4c
	if (!cr0.eq) goto loc_83002B4C;
	// bl 0x82cc0758
	sub_82CC0758(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
loc_83002B30:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82ca5dc0
	sub_82CA5DC0(ctx, base);
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x83002b48
	if (cr6.eq) goto loc_83002B48;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82240508
	sub_82240508(ctx, base);
loc_83002B48:
	// li r3,0
	ctx.r3.s64 = 0;
loc_83002B4C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c28
	return;
}

PPC_WEAK_FUNC(sub_83002A68) {
	__imp__sub_83002A68(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002B58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// clrlwi r11,r3,16
	r11.u64 = ctx.r3.u32 & 0xFFFF;
	// cmplwi cr6,r11,65535
	cr6.compare<uint32_t>(r11.u32, 65535, xer);
	// beqlr cr6
	if (cr6.eq) return;
	// cmplwi cr6,r11,97
	cr6.compare<uint32_t>(r11.u32, 97, xer);
	// blt cr6,0x83002b78
	if (cr6.lt) goto loc_83002B78;
	// cmplwi cr6,r11,122
	cr6.compare<uint32_t>(r11.u32, 122, xer);
	// bgt cr6,0x83002b78
	if (cr6.gt) goto loc_83002B78;
	// addi r11,r11,-32
	r11.s64 = r11.s64 + -32;
loc_83002B78:
	// clrlwi r3,r11,16
	ctx.r3.u64 = r11.u32 & 0xFFFF;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002B58) {
	__imp__sub_83002B58(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002B80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-480(r1)
	ea = -480 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x83002bd0
	if (!cr6.eq) goto loc_83002BD0;
loc_83002B9C:
	// bl 0x82cab7a8
	sub_82CAB7A8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// b 0x83002e00
	goto loc_83002E00;
loc_83002BD0:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x83002b9c
	if (cr6.eq) goto loc_83002B9C;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r4,r11,-10568
	ctx.r4.s64 = r11.s64 + -10568;
	// bl 0x830038d8
	sub_830038D8(ctx, base);
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq 0x83002c0c
	if (cr0.eq) goto loc_83002C0C;
loc_83002BF0:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r31,2
	r31.s64 = 2;
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// bl 0x82cab7a8
	sub_82CAB7A8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// stw r31,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r31.u32);
	// b 0x83002e00
	goto loc_83002E00;
loc_83002C0C:
	// lbz r11,1(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 1);
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r11,58
	cr6.compare<uint32_t>(r11.u32, 58, xer);
	// bne cr6,0x83002c40
	if (!cr6.eq) goto loc_83002C40;
	// lbz r11,0(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 0);
	// extsb. r3,r11
	ctx.r3.s64 = r11.s8;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002c34
	if (cr0.eq) goto loc_83002C34;
	// lbz r11,2(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 2);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x83002bf0
	if (cr6.eq) goto loc_83002BF0;
loc_83002C34:
	// bl 0x82ca4288
	sub_82CA4288(ctx, base);
	// addi r27,r3,-96
	r27.s64 = ctx.r3.s64 + -96;
	// b 0x83002c44
	goto loc_83002C44;
loc_83002C40:
	// mr r27,r30
	r27.u64 = r30.u64;
loc_83002C44:
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82cc0c10
	sub_82CC0C10(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r29,-1
	cr6.compare<int32_t>(r29.s32, -1, xer);
	// beq cr6,0x83002bf0
	if (cr6.eq) goto loc_83002BF0;
	// lwz r11,136(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83002c7c
	if (!cr6.eq) goto loc_83002C7C;
	// lwz r11,132(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83002c7c
	if (!cr6.eq) goto loc_83002C7C;
	// std r30,32(r31)
	PPC_STORE_U64(r31.u32 + 32, r30.u64);
	// b 0x83002cc8
	goto loc_83002CC8;
loc_83002C7C:
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,132
	ctx.r3.s64 = ctx.r1.s64 + 132;
	// bl 0x82cc1650
	sub_82CC1650(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002df0
	if (cr0.eq) goto loc_83002DF0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82cc1290
	sub_82CC1290(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002df0
	if (cr0.eq) goto loc_83002DF0;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lhz r8,92(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 92);
	// lhz r7,90(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// lhz r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// lhz r5,86(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// lhz r4,82(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 82);
	// lhz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// bl 0x82cb5e10
	sub_82CB5E10(ctx, base);
	// std r3,32(r31)
	PPC_STORE_U64(r31.u32 + 32, ctx.r3.u64);
loc_83002CC8:
	// lwz r11,128(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83002cec
	if (!cr6.eq) goto loc_83002CEC;
	// lwz r11,124(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83002cec
	if (!cr6.eq) goto loc_83002CEC;
	// ld r11,32(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 32);
	// std r11,24(r31)
	PPC_STORE_U64(r31.u32 + 24, r11.u64);
	// b 0x83002d38
	goto loc_83002D38;
loc_83002CEC:
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,124
	ctx.r3.s64 = ctx.r1.s64 + 124;
	// bl 0x82cc1650
	sub_82CC1650(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002df0
	if (cr0.eq) goto loc_83002DF0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82cc1290
	sub_82CC1290(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002df0
	if (cr0.eq) goto loc_83002DF0;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lhz r8,92(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 92);
	// lhz r7,90(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// lhz r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// lhz r5,86(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// lhz r4,82(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 82);
	// lhz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// bl 0x82cb5e10
	sub_82CB5E10(ctx, base);
	// std r3,24(r31)
	PPC_STORE_U64(r31.u32 + 24, ctx.r3.u64);
loc_83002D38:
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83002d5c
	if (!cr6.eq) goto loc_83002D5C;
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83002d5c
	if (!cr6.eq) goto loc_83002D5C;
	// ld r11,32(r31)
	r11.u64 = PPC_LOAD_U64(r31.u32 + 32);
	// std r11,40(r31)
	PPC_STORE_U64(r31.u32 + 40, r11.u64);
	// b 0x83002da8
	goto loc_83002DA8;
loc_83002D5C:
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r1,116
	ctx.r3.s64 = ctx.r1.s64 + 116;
	// bl 0x82cc1650
	sub_82CC1650(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002df0
	if (cr0.eq) goto loc_83002DF0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82cc1290
	sub_82CC1290(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83002df0
	if (cr0.eq) goto loc_83002DF0;
	// li r9,-1
	ctx.r9.s64 = -1;
	// lhz r8,92(r1)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r1.u32 + 92);
	// lhz r7,90(r1)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// lhz r6,88(r1)
	ctx.r6.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// lhz r5,86(r1)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r1.u32 + 86);
	// lhz r4,82(r1)
	ctx.r4.u64 = PPC_LOAD_U16(ctx.r1.u32 + 82);
	// lhz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// bl 0x82cb5e10
	sub_82CB5E10(ctx, base);
	// std r3,40(r31)
	PPC_STORE_U64(r31.u32 + 40, ctx.r3.u64);
loc_83002DA8:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82cbbf60
	sub_82CBBF60(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r3,112(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// bl 0x830037a8
	sub_830037A8(ctx, base);
	// lwz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// addi r11,r27,-1
	r11.s64 = r27.s64 + -1;
	// sth r3,6(r31)
	PPC_STORE_U16(r31.u32 + 6, ctx.r3.u16);
	// li r9,1
	ctx.r9.s64 = 1;
	// sth r30,4(r31)
	PPC_STORE_U16(r31.u32 + 4, r30.u16);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// sth r9,8(r31)
	PPC_STORE_U16(r31.u32 + 8, ctx.r9.u16);
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// sth r30,12(r31)
	PPC_STORE_U16(r31.u32 + 12, r30.u16);
	// sth r30,10(r31)
	PPC_STORE_U16(r31.u32 + 10, r30.u16);
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
	// b 0x83002e04
	goto loc_83002E04;
loc_83002DF0:
	// bl 0x82cc0758
	sub_82CC0758(ctx, base);
	// bl 0x82240508
	sub_82240508(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82cbbf60
	sub_82CBBF60(ctx, base);
loc_83002E00:
	// li r3,-1
	ctx.r3.s64 = -1;
loc_83002E04:
	// addi r1,r1,480
	ctx.r1.s64 = ctx.r1.s64 + 480;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_83002B80) {
	__imp__sub_83002B80(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002E18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x83002e68
	if (!cr6.eq) goto loc_83002E68;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// b 0x83002f24
	goto loc_83002F24;
loc_83002E68:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r30,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r30.u32);
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8870
	sub_82CA8870(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca4e68
	sub_82CA4E68(ctx, base);
	// cmpwi cr6,r29,-1
	cr6.compare<int32_t>(r29.s32, -1, xer);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// rlwinm r11,r11,0,28,25
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFCF;
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
	// beq cr6,0x83002ec8
	if (cr6.eq) goto loc_83002EC8;
	// cmpwi cr6,r29,-2
	cr6.compare<int32_t>(r29.s32, -2, xer);
	// beq cr6,0x83002ec8
	if (cr6.eq) goto loc_83002EC8;
	// srawi r11,r29,5
	xer.ca = (r29.s32 < 0) & ((r29.u32 & 0x1F) != 0);
	r11.s64 = r29.s32 >> 5;
	// lis r10,-31921
	ctx.r10.s64 = -2091974656;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r10,29632
	ctx.r10.s64 = ctx.r10.s64 + 29632;
	// rlwinm r11,r29,6,21,25
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 6) & 0x7C0;
	// lwzx r10,r9,r10
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// b 0x83002ed0
	goto loc_83002ED0;
loc_83002EC8:
	// lis r11,-31953
	r11.s64 = -2094071808;
	// addi r11,r11,-2648
	r11.s64 = r11.s64 + -2648;
loc_83002ED0:
	// lbz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// rlwinm r10,r10,0,31,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// stb r10,4(r11)
	PPC_STORE_U8(r11.u32 + 4, ctx.r10.u8);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// rlwinm. r10,r11,0,24,24
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x83002ef4
	if (cr0.eq) goto loc_83002EF4;
	// rlwinm r11,r11,0,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
loc_83002EF4:
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82cb0068
	sub_82CB0068(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x83002f18
	if (!cr6.eq) goto loc_83002F18;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 12);
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
loc_83002F18:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,128
	r12.s64 = r31.s64 + 128;
	// bl 0x83002f2c
	sub_83002F2C(ctx, base);
loc_83002F24:
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_83002E18) {
	__imp__sub_83002E18(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002F2C) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-128
	r31.s64 = r12.s64 + -128;
	// mflr r12
	// stw r12,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// lwz r12,-16(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002F2C) {
	__imp__sub_83002F2C(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83002F60) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// mr r10,r4
	ctx.r10.u64 = ctx.r4.u64;
	// addi r9,r1,-32
	ctx.r9.s64 = ctx.r1.s64 + -32;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r11,32
	r11.s64 = 32;
	// mtctr r11
	ctr.u64 = r11.u64;
loc_83002F74:
	// stb r8,0(r9)
	PPC_STORE_U8(ctx.r9.u32 + 0, ctx.r8.u8);
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// bdnz 0x83002f74
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_83002F74;
	// li r7,1
	ctx.r7.s64 = 1;
	// b 0x83002fa8
	goto loc_83002FA8;
loc_83002F88:
	// rlwinm r9,r11,29,3,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r8,r1,-32
	ctx.r8.s64 = ctx.r1.s64 + -32;
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// slw r6,r7,r11
	ctx.r6.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r11.u8 & 0x3F));
	// lbzx r5,r9,r8
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r8.u32);
	// or r6,r6,r5
	ctx.r6.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stbx r6,r9,r8
	PPC_STORE_U8(ctx.r9.u32 + ctx.r8.u32, ctx.r6.u8);
loc_83002FA8:
	// lbz r11,0(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x83002f88
	if (!cr0.eq) goto loc_83002F88;
	// lbz r11,0(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x8300300c
	if (cr0.eq) goto loc_8300300C;
	// rlwinm r10,r11,29,3,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// addi r9,r1,-32
	ctx.r9.s64 = ctx.r1.s64 + -32;
	// clrlwi r8,r11,29
	ctx.r8.u64 = r11.u32 & 0x7;
	// li r11,0
	r11.s64 = 0;
	// slw r8,r7,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r8.u8 & 0x3F));
	// lbzx r10,r10,r9
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// and. r10,r8,r10
	ctx.r10.u64 = ctx.r8.u64 & ctx.r10.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x83003004
	if (cr0.eq) goto loc_83003004;
loc_83002FE0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r1,-32
	ctx.r10.s64 = ctx.r1.s64 + -32;
	// lbzx r9,r11,r3
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + ctx.r3.u32);
	// rlwinm r8,r9,29,3,31
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 29) & 0x1FFFFFFF;
	// clrlwi r9,r9,29
	ctx.r9.u64 = ctx.r9.u32 & 0x7;
	// slw r9,r7,r9
	ctx.r9.u64 = ctx.r9.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r9.u8 & 0x3F));
	// lbzx r10,r8,r10
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + ctx.r10.u32);
	// and. r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 & ctx.r10.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x83002fe0
	if (!cr0.eq) goto loc_83002FE0;
loc_83003004:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_8300300C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83002F60) {
	__imp__sub_83002F60(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003018) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-320(r1)
	ea = -320 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bne cr6,0x83003064
	if (!cr6.eq) goto loc_83003064;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x83003170
	goto loc_83003170;
loc_83003064:
	// bl 0x82cbae38
	sub_82CBAE38(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82cbb028
	sub_82CBB028(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x83003090
	if (cr0.eq) goto loc_83003090;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_83003090:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r10,60
	ctx.r10.s64 = 60;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// divw r11,r11,r10
	r11.s32 = r11.s32 / ctx.r10.s32;
	// sth r11,10(r28)
	PPC_STORE_U16(r28.u32 + 10, r11.u16);
	// bl 0x821882a8
	sub_821882A8(ctx, base);
	// lis r11,9155
	r11.s64 = 599982080;
	// lis r29,-31946
	r29.s64 = -2093613056;
	// ld r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// ori r9,r11,17920
	ctx.r9.u64 = r11.u64 | 17920;
	// lis r31,-31952
	r31.s64 = -2094006272;
	// divdu r30,r10,r9
	r30.u64 = ctx.r10.u64 / ctx.r9.u64;
	// ld r11,-26152(r29)
	r11.u64 = PPC_LOAD_U64(r29.u32 + -26152);
	// cmpd cr6,r30,r11
	cr6.compare<int64_t>(r30.s64, r11.s64, xer);
	// beq cr6,0x83003120
	if (cr6.eq) goto loc_83003120;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82cc1808
	sub_82CC1808(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x8300310c
	if (cr6.eq) goto loc_8300310C;
	// cmplwi cr6,r3,2
	cr6.compare<uint32_t>(ctx.r3.u32, 2, xer);
	// bne cr6,0x83003104
	if (!cr6.eq) goto loc_83003104;
	// lhz r11,250(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 250);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x83003104
	if (cr0.eq) goto loc_83003104;
	// lwz r11,264(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 264);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x83003104
	if (cr6.eq) goto loc_83003104;
	// li r11,1
	r11.s64 = 1;
	// b 0x83003110
	goto loc_83003110;
loc_83003104:
	// li r11,0
	r11.s64 = 0;
	// b 0x83003110
	goto loc_83003110;
loc_8300310C:
	// li r11,-1
	r11.s64 = -1;
loc_83003110:
	// ld r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// stw r11,-2368(r31)
	PPC_STORE_U32(r31.u32 + -2368, r11.u32);
	// std r30,-26152(r29)
	PPC_STORE_U64(r29.u32 + -26152, r30.u64);
	// b 0x83003124
	goto loc_83003124;
loc_83003120:
	// lwz r11,-2368(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -2368);
loc_83003124:
	// lis r12,-414
	r12.s64 = -27131904;
	// sth r11,12(r28)
	PPC_STORE_U16(r28.u32 + 12, r11.u16);
	// li r9,10000
	ctx.r9.s64 = 10000;
	// ori r12,r12,20001
	r12.u64 = r12.u64 | 20001;
	// divdu r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 / ctx.r9.u64;
	// li r8,1000
	ctx.r8.s64 = 1000;
	// rldicr r12,r12,32,31
	r12.u64 = rotl64(r12.u64, 32) & 0xFFFFFFFF00000000;
	// divdu r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 / ctx.r8.u64;
	// oris r12,r12,10945
	r12.u64 = r12.u64 | 717291520;
	// mulli r8,r8,1000
	ctx.r8.s64 = ctx.r8.s64 * 1000;
	// lis r7,152
	ctx.r7.s64 = 9961472;
	// ori r12,r12,32768
	r12.u64 = r12.u64 | 32768;
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// add r10,r10,r12
	ctx.r10.u64 = ctx.r10.u64 + r12.u64;
	// ori r8,r7,38528
	ctx.r8.u64 = ctx.r7.u64 | 38528;
	// sth r9,8(r28)
	PPC_STORE_U16(r28.u32 + 8, ctx.r9.u16);
	// li r3,0
	ctx.r3.s64 = 0;
	// divdu r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 / ctx.r8.u64;
	// std r10,0(r28)
	PPC_STORE_U64(r28.u32 + 0, ctx.r10.u64);
loc_83003170:
	// addi r1,r1,320
	ctx.r1.s64 = ctx.r1.s64 + 320;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83003018) {
	__imp__sub_83003018(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003178) {
	PPC_FUNC_PROLOGUE();
	// b 0x83003018
	sub_83003018(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83003178) {
	__imp__sub_83003178(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003180) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-31953
	r11.s64 = -2094071808;
	// lwz r11,-3840(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -3840);
	// cmplw cr6,r3,r11
	cr6.compare<uint32_t>(ctx.r3.u32, r11.u32, xer);
	// beqlr cr6
	if (cr6.eq) return;
	// b 0x83003980
	sub_83003980(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83003180) {
	__imp__sub_83003180(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003194) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83003194) {
	__imp__sub_83003194(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830031A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr7{};
	uint32_t ea{};
	// lbz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// lbz r6,0(r4)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
loc_830031AC:
	// cmpwi cr7,r6,0
	cr7.compare<int32_t>(ctx.r6.s32, 0, xer);
	// subf. r3,r6,r5
	ctx.r3.s64 = ctx.r5.s64 - ctx.r6.s64;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr7,0x830031c8
	if (cr7.eq) goto loc_830031C8;
	// bne 0x830031c8
	if (!cr0.eq) goto loc_830031C8;
	// lbzu r5,1(r9)
	ea = 1 + ctx.r9.u32;
	ctx.r5.u64 = PPC_LOAD_U8(ea);
	ctx.r9.u32 = ea;
	// lbzu r6,1(r4)
	ea = 1 + ctx.r4.u32;
	ctx.r6.u64 = PPC_LOAD_U8(ea);
	ctx.r4.u32 = ea;
	// b 0x830031ac
	goto loc_830031AC;
loc_830031C8:
	// beqlr 
	if (cr0.eq) return;
	// li r3,-1
	ctx.r3.s64 = -1;
	// bltlr 
	if (cr0.lt) return;
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830031A0) {
	__imp__sub_830031A0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830031E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x83003224
	if (!cr6.eq) goto loc_83003224;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x83003340
	goto loc_83003340;
loc_83003224:
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x83003258
	if (!cr6.eq) goto loc_83003258;
loc_8300322C:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r31,22
	r31.s64 = 22;
loc_83003234:
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r31.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x83003340
	goto loc_83003340;
loc_83003258:
	// cntlzw r11,r7
	r11.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// li r31,0
	r31.s64 = 0;
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// stb r31,0(r4)
	PPC_STORE_U8(ctx.r4.u32 + 0, r31.u8);
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplw cr6,r5,r11
	cr6.compare<uint32_t>(ctx.r5.u32, r11.u32, xer);
	// bgt cr6,0x83003284
	if (cr6.gt) goto loc_83003284;
loc_83003278:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r31,34
	r31.s64 = 34;
	// b 0x83003234
	goto loc_83003234;
loc_83003284:
	// cmplwi cr6,r6,2
	cr6.compare<uint32_t>(ctx.r6.u32, 2, xer);
	// blt cr6,0x8300322c
	if (cr6.lt) goto loc_8300322C;
	// cmplwi cr6,r6,36
	cr6.compare<uint32_t>(ctx.r6.u32, 36, xer);
	// bgt cr6,0x8300322c
	if (cr6.gt) goto loc_8300322C;
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x830032b8
	if (cr6.eq) goto loc_830032B8;
	// li r10,45
	ctx.r10.s64 = 45;
	// addi r11,r4,1
	r11.s64 = ctx.r4.s64 + 1;
	// stb r10,0(r4)
	PPC_STORE_U8(ctx.r4.u32 + 0, ctx.r10.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// neg r3,r3
	ctx.r3.s64 = -ctx.r3.s64;
loc_830032B8:
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
loc_830032BC:
	// divwu r10,r3,r6
	ctx.r10.u32 = ctx.r3.u32 / ctx.r6.u32;
	// twllei r6,0
	// mullw r10,r10,r6
	ctx.r10.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r6.s32);
	// subf r10,r10,r3
	ctx.r10.s64 = ctx.r3.s64 - ctx.r10.s64;
	// divwu r3,r3,r6
	ctx.r3.u32 = ctx.r3.u32 / ctx.r6.u32;
	// twllei r6,0
	// cmplwi cr6,r10,9
	cr6.compare<uint32_t>(ctx.r10.u32, 9, xer);
	// ble cr6,0x830032e4
	if (!cr6.gt) goto loc_830032E4;
	// addi r10,r10,87
	ctx.r10.s64 = ctx.r10.s64 + 87;
	// b 0x830032e8
	goto loc_830032E8;
loc_830032E4:
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
loc_830032E8:
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x83003304
	if (cr6.eq) goto loc_83003304;
	// cmplw cr6,r9,r5
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r5.u32, xer);
	// blt cr6,0x830032bc
	if (cr6.lt) goto loc_830032BC;
loc_83003304:
	// cmplw cr6,r9,r5
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r5.u32, xer);
	// blt cr6,0x83003314
	if (cr6.lt) goto loc_83003314;
	// stb r31,0(r4)
	PPC_STORE_U8(ctx.r4.u32 + 0, r31.u8);
	// b 0x83003278
	goto loc_83003278;
loc_83003314:
	// stb r31,0(r11)
	PPC_STORE_U8(r11.u32 + 0, r31.u8);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
loc_8300331C:
	// lbz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r8.u32 + 0);
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stb r9,0(r8)
	PPC_STORE_U8(ctx.r8.u32 + 0, ctx.r9.u8);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
	// cmplw cr6,r8,r11
	cr6.compare<uint32_t>(ctx.r8.u32, r11.u32, xer);
	// blt cr6,0x8300331c
	if (cr6.lt) goto loc_8300331C;
	// li r3,0
	ctx.r3.s64 = 0;
loc_83003340:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830031E0) {
	__imp__sub_830031E0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003358) {
	PPC_FUNC_PROLOGUE();
	// li r7,0
	ctx.r7.s64 = 0;
	// b 0x830031e0
	sub_830031E0(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83003358) {
	__imp__sub_83003358(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003368) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// addi r31,r1,-128
	r31.s64 = ctx.r1.s64 + -128;
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r28,0
	r28.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r28,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r28.u32);
	// bl 0x82caff48
	sub_82CAFF48(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lis r11,-31921
	r11.s64 = -2091974656;
	// lis r10,-31921
	ctx.r10.s64 = -2091974656;
	// addi r30,r11,29904
	r30.s64 = r11.s64 + 29904;
	// addi r10,r10,29908
	ctx.r10.s64 = ctx.r10.s64 + 29908;
loc_8300339C:
	// stw r28,80(r31)
	PPC_STORE_U32(r31.u32 + 80, r28.u32);
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// cmpw cr6,r28,r11
	cr6.compare<int32_t>(r28.s32, r11.s32, xer);
	// bge cr6,0x8300342c
	if (!cr6.lt) goto loc_8300342C;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r29,r28,2,0,29
	r29.u64 = rotl64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r29,r11
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + r11.u32);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x83003420
	if (cr6.eq) goto loc_83003420;
	// rotlwi r4,r9,0
	ctx.r4.u64 = rotl32(ctx.r9.u32, 0);
	// lwz r11,12(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	// andi. r11,r11,131
	r11.u64 = r11.u64 & 131;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83003420
	if (cr0.eq) goto loc_83003420;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82ca88e0
	sub_82CA88E0(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// lwzx r3,r29,r11
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + r11.u32);
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// andi. r11,r11,131
	r11.u64 = r11.u64 & 131;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83003414
	if (cr0.eq) goto loc_83003414;
	// lwz r11,28(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 28);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x83003414
	if (cr6.eq) goto loc_83003414;
	// bl 0x82ca4920
	sub_82CA4920(ctx, base);
	// lwz r11,84(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r11.u32);
loc_83003414:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,128
	r12.s64 = r31.s64 + 128;
	// bl 0x83003494
	sub_83003494(ctx, base);
loc_83003420:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// b 0x8300339c
	goto loc_8300339C;
loc_8300342C:
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,128
	r12.s64 = r31.s64 + 128;
	// bl 0x83003444
	sub_83003444(ctx, base);
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// addi r1,r31,128
	ctx.r1.s64 = r31.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83003368) {
	__imp__sub_83003368(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003444) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82cafde8
	sub_82CAFDE8(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83003444) {
	__imp__sub_83003444(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003468) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-128
	r31.s64 = r12.s64 + -128;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r28,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r28.u64);
	// mflr r12
	// stw r12,-32(r1)
	PPC_STORE_U32(ctx.r1.u32 + -32, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31921
	r11.s64 = -2091974656;
	// lwz r28,80(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// addi r30,r11,29904
	r30.s64 = r11.s64 + 29904;
	// b 0x830034b0
	goto loc_830034B0;
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-128
	r31.s64 = r12.s64 + -128;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r28,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r28.u64);
	// mflr r12
	// stw r12,-32(r1)
	PPC_STORE_U32(ctx.r1.u32 + -32, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_830034B0:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r10,r28,2,0,29
	ctx.r10.u64 = rotl64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x82ca8970
	sub_82CA8970(ctx, base);
	// lis r10,-31921
	ctx.r10.s64 = -2091974656;
	// lwz r28,80(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lis r11,-31921
	r11.s64 = -2091974656;
	// addi r30,r10,29904
	r30.s64 = ctx.r10.s64 + 29904;
	// addi r10,r11,29908
	ctx.r10.s64 = r11.s64 + 29908;
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r28,-24(r1)
	r28.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// lwz r12,-32(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -32);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83003468) {
	__imp__sub_83003468(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003494) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-128
	r31.s64 = r12.s64 + -128;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r28,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r28.u64);
	// mflr r12
	// stw r12,-32(r1)
	PPC_STORE_U32(ctx.r1.u32 + -32, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + 0);
	// rlwinm r10,r28,2,0,29
	ctx.r10.u64 = rotl64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x82ca8970
	sub_82CA8970(ctx, base);
	// lis r10,-31921
	ctx.r10.s64 = -2091974656;
	// lwz r28,80(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// lis r11,-31921
	r11.s64 = -2091974656;
	// addi r30,r10,29904
	r30.s64 = ctx.r10.s64 + 29904;
	// addi r10,r11,29908
	ctx.r10.s64 = r11.s64 + 29908;
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r28,-24(r1)
	r28.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// lwz r12,-32(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -32);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83003494) {
	__imp__sub_83003494(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830034F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x8300354c
	if (!cr6.eq) goto loc_8300354C;
loc_83003514:
	// bl 0x82cab7a8
	sub_82CAB7A8(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,22
	ctx.r3.s64 = 22;
	// b 0x830035ac
	goto loc_830035AC;
loc_8300354C:
	// rlwinm. r11,r31,0,31,28
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF9;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83003514
	if (!cr0.eq) goto loc_83003514;
	// bl 0x82cbd368
	sub_82CBD368(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x83003574
	if (!cr6.eq) goto loc_83003574;
	// bl 0x82cc0758
	sub_82CC0758(ctx, base);
	// bl 0x82240508
	sub_82240508(ctx, base);
loc_83003568:
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// b 0x830035ac
	goto loc_830035AC;
loc_83003574:
	// rlwinm. r11,r3,0,27,27
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x830035a8
	if (!cr0.eq) goto loc_830035A8;
	// clrlwi. r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x830035a8
	if (cr0.eq) goto loc_830035A8;
	// rlwinm. r11,r31,0,30,30
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x830035a8
	if (cr0.eq) goto loc_830035A8;
	// bl 0x82cab7a8
	sub_82CAB7A8(ctx, base);
	// li r11,5
	r11.s64 = 5;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,13
	r11.s64 = 13;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// b 0x83003568
	goto loc_83003568;
loc_830035A8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_830035AC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830034F8) {
	__imp__sub_830034F8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830035C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x83003644
	if (cr6.eq) goto loc_83003644;
	// mr r11,r29
	r11.u64 = r29.u64;
loc_830035DC:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x830035dc
	if (!cr6.eq) goto loc_830035DC;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r11,r11,0
	r11.u64 = rotl32(r11.u32, 0);
	// addi r30,r11,1
	r30.s64 = r11.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca3c68
	sub_82CA3C68(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x83003644
	if (cr0.eq) goto loc_83003644;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82170cc8
	sub_82170CC8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x8300363c
	if (cr0.eq) goto loc_8300363C;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab678
	sub_82CAB678(ctx, base);
loc_8300363C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// b 0x83003648
	goto loc_83003648;
loc_83003644:
	// li r3,0
	ctx.r3.s64 = 0;
loc_83003648:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_830035C0) {
	__imp__sub_830035C0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003650) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31952
	r11.s64 = -2094006272;
	// addi r3,r11,-2168
	ctx.r3.s64 = r11.s64 + -2168;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83003650) {
	__imp__sub_83003650(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003660) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-31952
	r11.s64 = -2094006272;
	// addi r3,r11,-2344
	ctx.r3.s64 = r11.s64 + -2344;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83003660) {
	__imp__sub_83003660(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003670) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82cac520
	sub_82CAC520(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// bne 0x830036a4
	if (!cr0.eq) goto loc_830036A4;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,12
	ctx.r10.s64 = 12;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x830036dc
	goto loc_830036DC;
loc_830036A4:
	// lwz r11,68(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 68);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x830036d8
	if (!cr6.eq) goto loc_830036D8;
	// li r3,36
	ctx.r3.s64 = 36;
	// bl 0x82ca3c68
	sub_82CA3C68(ctx, base);
	// stw r3,68(r31)
	PPC_STORE_U32(r31.u32 + 68, ctx.r3.u32);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// cmplwi r3,0
	cr0.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne 0x830036d8
	if (!cr0.eq) goto loc_830036D8;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r10,12
	ctx.r10.s64 = 12;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
loc_830036D8:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
loc_830036DC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83003670) {
	__imp__sub_83003670(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830036F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r10,r8
	ctx.r10.u64 = ctx.r8.u64;
	// li r27,0
	r27.s64 = 0;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r30,r27
	r30.u64 = r27.u64;
	// bl 0x83003a40
	sub_83003A40(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// rlwinm. r11,r31,0,29,29
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8300374c
	if (cr0.eq) goto loc_8300374C;
	// li r30,512
	r30.s64 = 512;
	// stw r27,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r27.u32);
	// stw r27,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r27.u32);
	// b 0x83003780
	goto loc_83003780;
loc_8300374C:
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82cb9098
	sub_82CB9098(ctx, base);
	// rlwinm. r11,r31,0,30,30
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83003768
	if (!cr0.eq) goto loc_83003768;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x8300376c
	if (!cr6.eq) goto loc_8300376C;
loc_83003768:
	// li r30,128
	r30.s64 = 128;
loc_8300376C:
	// clrlwi. r11,r31,31
	r11.u64 = r31.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8300377c
	if (!cr0.eq) goto loc_8300377C;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// bne cr6,0x83003780
	if (!cr6.eq) goto loc_83003780;
loc_8300377C:
	// ori r30,r30,256
	r30.u64 = r30.u64 | 256;
loc_83003780:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// ld r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// subf r11,r28,r11
	r11.s64 = r11.s64 - r28.s64;
	// stw r30,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r30.u32);
	// srawi r11,r11,1
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1) != 0);
	r11.s64 = r11.s32 >> 1;
	// std r10,16(r29)
	PPC_STORE_U64(r29.u32 + 16, ctx.r10.u64);
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_830036F0) {
	__imp__sub_830036F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830037A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// clrlwi r8,r3,24
	ctx.r8.u64 = ctx.r3.u32 & 0xFF;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// cmplwi cr6,r9,58
	cr6.compare<uint32_t>(ctx.r9.u32, 58, xer);
	// bne cr6,0x830037d8
	if (!cr6.eq) goto loc_830037D8;
	// addi r10,r11,2
	ctx.r10.s64 = r11.s64 + 2;
loc_830037D8:
	// lbz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r9,r9
	ctx.r9.s64 = ctx.r9.s8;
	// cmpwi cr6,r9,92
	cr6.compare<int32_t>(ctx.r9.s32, 92, xer);
	// beq cr6,0x830037f0
	if (cr6.eq) goto loc_830037F0;
	// cmpwi cr6,r9,47
	cr6.compare<int32_t>(ctx.r9.s32, 47, xer);
	// bne cr6,0x830037fc
	if (!cr6.eq) goto loc_830037FC;
loc_830037F0:
	// lbz r10,1(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 1);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x83003818
	if (cr6.eq) goto loc_83003818;
loc_830037FC:
	// rlwinm. r10,r8,0,27,27
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x83003818
	if (!cr0.eq) goto loc_83003818;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x83003818
	if (cr6.eq) goto loc_83003818;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r10,r10,32768
	ctx.r10.u64 = ctx.r10.u64 | 32768;
	// b 0x8300381c
	goto loc_8300381C;
loc_83003818:
	// li r10,16448
	ctx.r10.s64 = 16448;
loc_8300381C:
	// not r9,r8
	ctx.r9.u64 = ~ctx.r8.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// rlwinm r9,r9,7,24,24
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 7) & 0x80;
	// li r4,46
	ctx.r4.s64 = 46;
	// or r11,r9,r10
	r11.u64 = ctx.r9.u64 | ctx.r10.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// ori r30,r11,256
	r30.u64 = r11.u64 | 256;
	// bl 0x82caaf10
	sub_82CAAF10(ctx, base);
	// mr. r31,r3
	r31.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x830038ac
	if (cr0.eq) goto loc_830038AC;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-9716
	ctx.r4.s64 = r11.s64 + -9716;
	// bl 0x82caaf80
	sub_82CAAF80(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830038a4
	if (cr0.eq) goto loc_830038A4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-9724
	ctx.r4.s64 = r11.s64 + -9724;
	// bl 0x82caaf80
	sub_82CAAF80(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830038a4
	if (cr0.eq) goto loc_830038A4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-9732
	ctx.r4.s64 = r11.s64 + -9732;
	// bl 0x82caaf80
	sub_82CAAF80(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830038a4
	if (cr0.eq) goto loc_830038A4;
	// lis r11,-32251
	r11.s64 = -2113601536;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-9740
	ctx.r4.s64 = r11.s64 + -9740;
	// bl 0x82caaf80
	sub_82CAAF80(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x830038ac
	if (!cr0.eq) goto loc_830038AC;
loc_830038A4:
	// clrlwi r11,r30,16
	r11.u64 = r30.u32 & 0xFFFF;
	// ori r30,r11,64
	r30.u64 = r11.u64 | 64;
loc_830038AC:
	// rlwinm r11,r30,29,26,28
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 29) & 0x38;
	// or r11,r11,r30
	r11.u64 = r11.u64 | r30.u64;
	// rlwinm r10,r11,26,29,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x7;
	// or r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 | r11.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830037A8) {
	__imp__sub_830037A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830038D8) {
	PPC_FUNC_PROLOGUE();
	// b 0x82ca8bc8
	sub_82CA8BC8(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_830038D8) {
	__imp__sub_830038D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830038E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-31953
	r30.s64 = -2094071808;
	// lis r11,-17600
	r11.s64 = -1153433600;
	// li r10,0
	ctx.r10.s64 = 0;
	// ori r31,r11,58958
	r31.u64 = r11.u64 | 58958;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lwz r11,-3840(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + -3840);
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// beq cr6,0x8300391c
	if (cr6.eq) goto loc_8300391C;
	// lis r10,-31953
	ctx.r10.s64 = -2094071808;
	// not r11,r11
	r11.u64 = ~r11.u64;
	// stw r11,-3836(r10)
	PPC_STORE_U32(ctx.r10.u32 + -3836, r11.u32);
	// b 0x83003978
	goto loc_83003978;
loc_8300391C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x821882a8
	sub_821882A8(ctx, base);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// xor r29,r10,r11
	r29.u64 = ctx.r10.u64 ^ r11.u64;
	// bl 0x8221ee38
	sub_8221EE38(ctx, base);
	// xor r29,r3,r29
	r29.u64 = ctx.r3.u64 ^ r29.u64;
	// bl 0x82266070
	sub_82266070(ctx, base);
	// xor r29,r3,r29
	r29.u64 = ctx.r3.u64 ^ r29.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x8221eb58
	sub_8221EB58(ctx, base);
	// lwz r11,92(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// xor r11,r10,r11
	r11.u64 = ctx.r10.u64 ^ r11.u64;
	// xor r11,r11,r29
	r11.u64 = r11.u64 ^ r29.u64;
	// cmplw cr6,r11,r31
	cr6.compare<uint32_t>(r11.u32, r31.u32, xer);
	// bne cr6,0x83003968
	if (!cr6.eq) goto loc_83003968;
	// lis r11,-17600
	r11.s64 = -1153433600;
	// ori r11,r11,58959
	r11.u64 = r11.u64 | 58959;
loc_83003968:
	// lis r9,-31953
	ctx.r9.s64 = -2094071808;
	// stw r11,-3840(r30)
	PPC_STORE_U32(r30.u32 + -3840, r11.u32);
	// not r10,r11
	ctx.r10.u64 = ~r11.u64;
	// stw r10,-3836(r9)
	PPC_STORE_U32(ctx.r9.u32 + -3836, ctx.r10.u32);
loc_83003978:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_830038E0) {
	__imp__sub_830038E0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003980) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// std r3,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r3.u64);
	// lis r11,-31946
	r11.s64 = -2093613056;
	// addi r3,r11,-26048
	ctx.r3.s64 = r11.s64 + -26048;
	// bl 0x832b262c
	__imp__RtlCaptureContext(ctx, base);
	// lwz r11,88(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lis r10,-31946
	ctx.r10.s64 = -2093613056;
	// addi r10,r10,-26136
	ctx.r10.s64 = ctx.r10.s64 + -26136;
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r11.u32);
	// lis r11,-31946
	r11.s64 = -2093613056;
	// lis r10,-16384
	ctx.r10.s64 = -1073741824;
	// ori r10,r10,1033
	ctx.r10.u64 = ctx.r10.u64 | 1033;
	// stw r10,-26136(r11)
	PPC_STORE_U32(r11.u32 + -26136, ctx.r10.u32);
	// lis r11,-31946
	r11.s64 = -2093613056;
	// addi r11,r11,-26136
	r11.s64 = r11.s64 + -26136;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lis r11,-31953
	r11.s64 = -2094071808;
	// lwz r11,-3840(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -3840);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// lis r11,-31953
	r11.s64 = -2094071808;
	// lwz r11,-3836(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -3836);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// lis r11,-31946
	r11.s64 = -2093613056;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,-26056(r11)
	PPC_STORE_U32(r11.u32 + -26056, ctx.r10.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82cb6a90
	sub_82CB6A90(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cbbe08
	sub_82CBBE08(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r3,r11,-9708
	ctx.r3.s64 = r11.s64 + -9708;
	// bl 0x82cbbed0
	sub_82CBBED0(ctx, base);
	// lis r11,-31946
	r11.s64 = -2093613056;
	// lwz r11,-26056(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + -26056);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x83003a24
	if (!cr6.eq) goto loc_83003A24;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x82cb6a90
	sub_82CB6A90(ctx, base);
loc_83003A24:
	// li r3,242
	ctx.r3.s64 = 242;
	// bl 0x832b25cc
	__imp__KeBugCheck(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83003980) {
	__imp__sub_83003980(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83003A40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bbc
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r21,0
	r21.s64 = 0;
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// mr r24,r8
	r24.u64 = ctx.r8.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r18,r21
	r18.u64 = r21.u64;
	// mr r6,r21
	ctx.r6.u64 = r21.u64;
	// mr r30,r21
	r30.u64 = r21.u64;
	// mr r26,r21
	r26.u64 = r21.u64;
	// mr r28,r21
	r28.u64 = r21.u64;
	// mr r29,r21
	r29.u64 = r21.u64;
	// mr r31,r21
	r31.u64 = r21.u64;
	// li r27,1
	r27.s64 = 1;
	// mr r11,r21
	r11.u64 = r21.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x83003abc
	if (!cr6.eq) goto loc_83003ABC;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x830043c4
	goto loc_830043C4;
loc_83003ABC:
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
loc_83003AC0:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// cmplwi cr6,r10,32
	cr6.compare<uint32_t>(ctx.r10.u32, 32, xer);
	// beq cr6,0x83003ae4
	if (cr6.eq) goto loc_83003AE4;
	// cmplwi cr6,r10,9
	cr6.compare<uint32_t>(ctx.r10.u32, 9, xer);
	// beq cr6,0x83003ae4
	if (cr6.eq) goto loc_83003AE4;
	// cmplwi cr6,r10,10
	cr6.compare<uint32_t>(ctx.r10.u32, 10, xer);
	// beq cr6,0x83003ae4
	if (cr6.eq) goto loc_83003AE4;
	// cmplwi cr6,r10,13
	cr6.compare<uint32_t>(ctx.r10.u32, 13, xer);
	// bne cr6,0x83003aec
	if (!cr6.eq) goto loc_83003AEC;
loc_83003AE4:
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// b 0x83003ac0
	goto loc_83003AC0;
loc_83003AEC:
	// lis r10,-31953
	ctx.r10.s64 = -2094071808;
	// lis r7,0
	ctx.r7.s64 = 0;
	// ori r20,r7,32768
	r20.u64 = ctx.r7.u64 | 32768;
	// lwz r7,-4912(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4912);
loc_83003AFC:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// bgt cr6,0x83003e84
	if (cr6.gt) goto loc_83003E84;
	// lis r12,-32251
	r12.s64 = -2113601536;
	// addi r12,r12,-9584
	r12.s64 = r12.s64 + -9584;
	// lbzx r0,r12,r11
	r0.u64 = PPC_LOAD_U8(r12.u32 + r11.u32);
	// rlwinm r0,r0,2,0,29
	r0.u64 = rotl64(r0.u32 | (r0.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r12,-32000
	r12.s64 = -2097152000;
	// addi r12,r12,15156
	r12.s64 = r12.s64 + 15156;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_83003B34;
	case 1:
		goto loc_83003BA8;
	case 2:
		goto loc_83003C28;
	case 3:
		goto loc_83003CA8;
	case 4:
		goto loc_83003D1C;
	case 5:
		goto loc_83003D94;
	case 6:
		goto loc_83003DB4;
	case 7:
		goto loc_83003E38;
	case 8:
		goto loc_83003DFC;
	case 9:
		goto loc_83003E90;
	case 10:
		goto loc_83003E84;
	case 11:
		goto loc_83003E50;
	default:
		__builtin_unreachable();
	}
loc_83003B34:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x83003b54
	if (cr6.lt) goto loc_83003B54;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x83003b54
	if (cr6.gt) goto loc_83003B54;
loc_83003B48:
	// li r11,3
	r11.s64 = 3;
loc_83003B4C:
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003B54:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x83003b70
	if (!cr6.eq) goto loc_83003B70;
loc_83003B68:
	// li r11,5
	r11.s64 = 5;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003B70:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x83003b9c
	if (cr6.eq) goto loc_83003B9C;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x83003b90
	if (cr6.eq) goto loc_83003B90;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bne cr6,0x83003e30
	if (!cr6.eq) goto loc_83003E30;
loc_83003B88:
	// li r11,1
	r11.s64 = 1;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003B90:
	// li r11,2
	r11.s64 = 2;
	// mr r18,r20
	r18.u64 = r20.u64;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003B9C:
	// li r11,2
	r11.s64 = 2;
	// mr r18,r21
	r18.u64 = r21.u64;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003BA8:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r30,1
	r30.s64 = 1;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x83003bc0
	if (cr6.lt) goto loc_83003BC0;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// ble cr6,0x83003b48
	if (!cr6.gt) goto loc_83003B48;
loc_83003BC0:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// bne cr6,0x83003bdc
	if (!cr6.eq) goto loc_83003BDC;
loc_83003BD4:
	// li r11,4
	r11.s64 = 4;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003BDC:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x83003c1c
	if (cr6.eq) goto loc_83003C1C;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x83003c1c
	if (cr6.eq) goto loc_83003C1C;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// beq cr6,0x83003b88
	if (cr6.eq) goto loc_83003B88;
loc_83003BF4:
	// cmpwi cr6,r11,67
	cr6.compare<int32_t>(r11.s32, 67, xer);
	// ble cr6,0x83003e30
	if (!cr6.gt) goto loc_83003E30;
	// cmpwi cr6,r11,69
	cr6.compare<int32_t>(r11.s32, 69, xer);
	// ble cr6,0x83003c14
	if (!cr6.gt) goto loc_83003C14;
	// cmpwi cr6,r11,99
	cr6.compare<int32_t>(r11.s32, 99, xer);
	// ble cr6,0x83003e30
	if (!cr6.gt) goto loc_83003E30;
	// cmpwi cr6,r11,101
	cr6.compare<int32_t>(r11.s32, 101, xer);
	// bgt cr6,0x83003e30
	if (cr6.gt) goto loc_83003E30;
loc_83003C14:
	// li r11,6
	r11.s64 = 6;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003C1C:
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// li r11,11
	r11.s64 = 11;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003C28:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x83003c3c
	if (cr6.lt) goto loc_83003C3C;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// ble cr6,0x83003b48
	if (!cr6.gt) goto loc_83003B48;
loc_83003C3C:
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// lbz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x83003b68
	if (cr6.eq) goto loc_83003B68;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// beq cr6,0x83003b88
	if (cr6.eq) goto loc_83003B88;
loc_83003C58:
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
loc_83003C5C:
	// stw r8,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r8.u32);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x83004360
	if (cr6.eq) goto loc_83004360;
	// cmplwi cr6,r6,24
	cr6.compare<uint32_t>(ctx.r6.u32, 24, xer);
	// ble cr6,0x83003c94
	if (!cr6.gt) goto loc_83003C94;
	// lbz r11,151(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 151);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// blt cr6,0x83003c88
	if (cr6.lt) goto loc_83003C88;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stb r11,151(r1)
	PPC_STORE_U8(ctx.r1.u32 + 151, r11.u8);
loc_83003C88:
	// li r6,24
	ctx.r6.s64 = 24;
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_83003C94:
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x8300434c
	if (cr6.eq) goto loc_8300434C;
	// lbz r10,-1(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + -1);
	// addi r11,r3,-1
	r11.s64 = ctx.r3.s64 + -1;
	// b 0x83003f10
	goto loc_83003F10;
loc_83003CA8:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r30,1
	r30.s64 = 1;
	// b 0x83003ce8
	goto loc_83003CE8;
loc_83003CB4:
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x83003cf0
	if (cr6.gt) goto loc_83003CF0;
	// cmplwi cr6,r6,25
	cr6.compare<uint32_t>(ctx.r6.u32, 25, xer);
	// bge cr6,0x83003cd8
	if (!cr6.lt) goto loc_83003CD8;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// b 0x83003cdc
	goto loc_83003CDC;
loc_83003CD8:
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
loc_83003CDC:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_83003CE8:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bge cr6,0x83003cb4
	if (!cr6.lt) goto loc_83003CB4;
loc_83003CF0:
	// lwz r22,0(r7)
	r22.u64 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// lbz r10,0(r22)
	ctx.r10.u64 = PPC_LOAD_U8(r22.u32 + 0);
	// extsb r10,r10
	ctx.r10.s64 = ctx.r10.s8;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x83003bd4
	if (cr6.eq) goto loc_83003BD4;
loc_83003D08:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x83003c1c
	if (cr6.eq) goto loc_83003C1C;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x83003c1c
	if (cr6.eq) goto loc_83003C1C;
	// b 0x83003bf4
	goto loc_83003BF4;
loc_83003D1C:
	// li r30,1
	r30.s64 = 1;
	// li r26,1
	r26.s64 = 1;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x83003d4c
	if (!cr6.eq) goto loc_83003D4C;
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bne cr6,0x83003d4c
	if (!cr6.eq) goto loc_83003D4C;
loc_83003D38:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// cmplwi cr6,r10,48
	cr6.compare<uint32_t>(ctx.r10.u32, 48, xer);
	// beq cr6,0x83003d38
	if (cr6.eq) goto loc_83003D38;
loc_83003D4C:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// b 0x83003d84
	goto loc_83003D84;
loc_83003D54:
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x83003d8c
	if (cr6.gt) goto loc_83003D8C;
	// cmplwi cr6,r6,25
	cr6.compare<uint32_t>(ctx.r6.u32, 25, xer);
	// bge cr6,0x83003d78
	if (!cr6.lt) goto loc_83003D78;
	// addi r11,r11,-48
	r11.s64 = r11.s64 + -48;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// stb r11,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, r11.u8);
	// addi r31,r31,-1
	r31.s64 = r31.s64 + -1;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
loc_83003D78:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_83003D84:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bge cr6,0x83003d54
	if (!cr6.lt) goto loc_83003D54;
loc_83003D8C:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// b 0x83003d08
	goto loc_83003D08;
loc_83003D94:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r26,1
	r26.s64 = 1;
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// blt cr6,0x83003c58
	if (cr6.lt) goto loc_83003C58;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x83003c58
	if (cr6.gt) goto loc_83003C58;
	// li r11,4
	r11.s64 = 4;
	// b 0x83003b4c
	goto loc_83003B4C;
loc_83003DB4:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// addi r5,r8,-4
	ctx.r5.s64 = ctx.r8.s64 + -4;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x83003dd4
	if (cr6.lt) goto loc_83003DD4;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x83003dd4
	if (cr6.gt) goto loc_83003DD4;
loc_83003DCC:
	// li r11,9
	r11.s64 = 9;
	// b 0x83003b4c
	goto loc_83003B4C;
loc_83003DD4:
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x83003df4
	if (cr6.eq) goto loc_83003DF4;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x83003e70
	if (cr6.eq) goto loc_83003E70;
loc_83003DE4:
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// bne cr6,0x83003c58
	if (!cr6.eq) goto loc_83003C58;
	// li r11,8
	r11.s64 = 8;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003DF4:
	// li r11,7
	r11.s64 = 7;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003DFC:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r28,1
	r28.s64 = 1;
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bne cr6,0x83003e1c
	if (!cr6.eq) goto loc_83003E1C;
loc_83003E0C:
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// cmplwi cr6,r10,48
	cr6.compare<uint32_t>(ctx.r10.u32, 48, xer);
	// beq cr6,0x83003e0c
	if (cr6.eq) goto loc_83003E0C;
loc_83003E1C:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x83003e30
	if (cr6.lt) goto loc_83003E30;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// ble cr6,0x83003dcc
	if (!cr6.gt) goto loc_83003DCC;
loc_83003E30:
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// b 0x83003c5c
	goto loc_83003C5C;
loc_83003E38:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// cmplwi cr6,r11,49
	cr6.compare<uint32_t>(r11.u32, 49, xer);
	// blt cr6,0x83003de4
	if (cr6.lt) goto loc_83003DE4;
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// ble cr6,0x83003dcc
	if (!cr6.gt) goto loc_83003DCC;
	// b 0x83003de4
	goto loc_83003DE4;
loc_83003E50:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x83003e7c
	if (cr6.eq) goto loc_83003E7C;
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// addi r5,r8,-2
	ctx.r5.s64 = ctx.r8.s64 + -2;
	// cmpwi cr6,r11,43
	cr6.compare<int32_t>(r11.s32, 43, xer);
	// beq cr6,0x83003df4
	if (cr6.eq) goto loc_83003DF4;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// bne cr6,0x83003c58
	if (!cr6.eq) goto loc_83003C58;
loc_83003E70:
	// li r11,7
	r11.s64 = 7;
	// li r27,-1
	r27.s64 = -1;
	// b 0x83003afc
	goto loc_83003AFC;
loc_83003E7C:
	// li r11,10
	r11.s64 = 10;
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
loc_83003E84:
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x83003afc
	if (!cr6.eq) goto loc_83003AFC;
	// b 0x83003c5c
	goto loc_83003C5C;
loc_83003E90:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// li r28,1
	r28.s64 = 1;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// b 0x83003ec8
	goto loc_83003EC8;
loc_83003EA0:
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x83003ed8
	if (cr6.gt) goto loc_83003ED8;
	// mulli r9,r9,10
	ctx.r9.s64 = ctx.r9.s64 * 10;
	// add r11,r9,r11
	r11.u64 = ctx.r9.u64 + r11.u64;
	// addi r9,r11,-48
	ctx.r9.s64 = r11.s64 + -48;
	// cmpwi cr6,r9,5200
	cr6.compare<int32_t>(ctx.r9.s32, 5200, xer);
	// bgt cr6,0x83003ed4
	if (cr6.gt) goto loc_83003ED4;
	// lhz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_83003EC8:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bge cr6,0x83003ea0
	if (!cr6.lt) goto loc_83003EA0;
	// b 0x83003ed8
	goto loc_83003ED8;
loc_83003ED4:
	// li r9,5201
	ctx.r9.s64 = 5201;
loc_83003ED8:
	// clrlwi r11,r10,16
	r11.u64 = ctx.r10.u32 & 0xFFFF;
	// mr r29,r9
	r29.u64 = ctx.r9.u64;
	// b 0x83003ef4
	goto loc_83003EF4;
loc_83003EE4:
	// cmplwi cr6,r11,57
	cr6.compare<uint32_t>(r11.u32, 57, xer);
	// bgt cr6,0x83003e30
	if (cr6.gt) goto loc_83003E30;
	// lhz r11,0(r8)
	r11.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r8,r8,2
	ctx.r8.s64 = ctx.r8.s64 + 2;
loc_83003EF4:
	// cmplwi cr6,r11,48
	cr6.compare<uint32_t>(r11.u32, 48, xer);
	// bge cr6,0x83003ee4
	if (!cr6.lt) goto loc_83003EE4;
	// b 0x83003e30
	goto loc_83003E30;
loc_83003F00:
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r6,r6,-1
	ctx.r6.s64 = ctx.r6.s64 + -1;
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
loc_83003F10:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x83003f00
	if (cr6.eq) goto loc_83003F00;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82cb9e88
	sub_82CB9E88(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bge cr6,0x83003f34
	if (!cr6.lt) goto loc_83003F34;
	// neg r29,r29
	r29.s64 = -r29.s64;
loc_83003F34:
	// add r11,r31,r29
	r11.u64 = r31.u64 + r29.u64;
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x83003f44
	if (!cr6.eq) goto loc_83003F44;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
loc_83003F44:
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// bne cr6,0x83003f50
	if (!cr6.eq) goto loc_83003F50;
	// subf r11,r24,r11
	r11.s64 = r11.s64 - r24.s64;
loc_83003F50:
	// cmpwi cr6,r11,5200
	cr6.compare<int32_t>(r11.s32, 5200, xer);
	// bgt cr6,0x83004378
	if (cr6.gt) goto loc_83004378;
	// cmpwi cr6,r11,-5200
	cr6.compare<int32_t>(r11.s32, -5200, xer);
	// blt cr6,0x83004390
	if (cr6.lt) goto loc_83004390;
	// lis r10,-31953
	ctx.r10.s64 = -2094071808;
	// mr r24,r11
	r24.u64 = r11.u64;
	// addi r10,r10,-1512
	ctx.r10.s64 = ctx.r10.s64 + -1512;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// addi r25,r10,-96
	r25.s64 = ctx.r10.s64 + -96;
	// beq cr6,0x83004338
	if (cr6.eq) goto loc_83004338;
	// bge cr6,0x83003f8c
	if (!cr6.lt) goto loc_83003F8C;
	// lis r10,-31953
	ctx.r10.s64 = -2094071808;
	// neg r24,r11
	r24.s64 = -r11.s64;
	// addi r11,r10,-1160
	r11.s64 = ctx.r10.s64 + -1160;
	// addi r25,r11,-96
	r25.s64 = r11.s64 + -96;
loc_83003F8C:
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// bne cr6,0x83003f98
	if (!cr6.eq) goto loc_83003F98;
	// sth r21,106(r1)
	PPC_STORE_U16(ctx.r1.u32 + 106, r21.u16);
loc_83003F98:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x83004338
	if (cr6.eq) goto loc_83004338;
	// lis r11,0
	r11.s64 = 0;
	// lis r10,32767
	ctx.r10.s64 = 2147418112;
	// ori r26,r11,65535
	r26.u64 = r11.u64 | 65535;
	// lis r22,-32768
	r22.s64 = -2147483648;
	// li r23,-32768
	r23.s64 = -32768;
	// ori r17,r10,32768
	r17.u64 = ctx.r10.u64 | 32768;
loc_83003FB8:
	// clrlwi. r11,r24,29
	r11.u64 = r24.u32 & 0x7;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r25,r25,84
	r25.s64 = r25.s64 + 84;
	// srawi r24,r24,3
	xer.ca = (r24.s32 < 0) & ((r24.u32 & 0x7) != 0);
	r24.s64 = r24.s32 >> 3;
	// beq 0x83004330
	if (cr0.eq) goto loc_83004330;
	// mulli r11,r11,12
	r11.s64 = r11.s64 * 12;
	// add r4,r11,r25
	ctx.r4.u64 = r11.u64 + r25.u64;
	// lhz r11,10(r4)
	r11.u64 = PPC_LOAD_U16(ctx.r4.u32 + 10);
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// blt cr6,0x83003ff8
	if (cr6.lt) goto loc_83003FF8;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// li r5,12
	ctx.r5.s64 = 12;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// lwz r11,118(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 118);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,118(r1)
	PPC_STORE_U32(ctx.r1.u32 + 118, r11.u32);
loc_83003FF8:
	// lhz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 96);
	// mr r28,r21
	r28.u64 = r21.u64;
	// stw r21,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r21.u32);
	// stw r21,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r21.u32);
	// clrlwi r11,r10,17
	r11.u64 = ctx.r10.u32 & 0x7FFF;
	// stw r21,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r21.u32);
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// lhz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r4.u32 + 0);
	// clrlwi r10,r8,17
	ctx.r10.u64 = ctx.r8.u32 & 0x7FFF;
	// xor r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 ^ ctx.r8.u64;
	// add r7,r11,r10
	ctx.r7.u64 = r11.u64 + ctx.r10.u64;
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// cmplwi cr6,r11,32767
	cr6.compare<uint32_t>(r11.u32, 32767, xer);
	// rlwinm r27,r8,0,16,16
	r27.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x8000;
	// clrlwi r29,r7,16
	r29.u64 = ctx.r7.u32 & 0xFFFF;
	// bge cr6,0x83004318
	if (!cr6.lt) goto loc_83004318;
	// cmplwi cr6,r10,32767
	cr6.compare<uint32_t>(ctx.r10.u32, 32767, xer);
	// bge cr6,0x83004318
	if (!cr6.lt) goto loc_83004318;
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// cmplwi cr6,r11,49149
	cr6.compare<uint32_t>(r11.u32, 49149, xer);
	// bgt cr6,0x83004318
	if (cr6.gt) goto loc_83004318;
	// cmplwi cr6,r11,16319
	cr6.compare<uint32_t>(r11.u32, 16319, xer);
	// bgt cr6,0x8300405c
	if (cr6.gt) goto loc_8300405C;
loc_83004054:
	// stw r21,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r21.u32);
	// b 0x83004328
	goto loc_83004328;
loc_8300405C:
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x83004098
	if (!cr6.eq) goto loc_83004098;
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi. r9,r9,1
	ctx.r9.u64 = ctx.r9.u32 & 0x7FFFFFFF;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
	// bne 0x83004098
	if (!cr0.eq) goto loc_83004098;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83004098
	if (!cr6.eq) goto loc_83004098;
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83004098
	if (!cr6.eq) goto loc_83004098;
	// sth r21,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r21.u16);
	// b 0x83004330
	goto loc_83004330;
loc_83004098:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x830040d0
	if (!cr6.eq) goto loc_830040D0;
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// lwz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi. r10,r10,1
	ctx.r10.u64 = ctx.r10.u32 & 0x7FFFFFFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// clrlwi r29,r11,16
	r29.u64 = r11.u32 & 0xFFFF;
	// bne 0x830040d0
	if (!cr0.eq) goto loc_830040D0;
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x830040d0
	if (!cr6.eq) goto loc_830040D0;
	// lwz r11,8(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x83004054
	if (cr6.eq) goto loc_83004054;
loc_830040D0:
	// mr r30,r21
	r30.u64 = r21.u64;
	// addi r8,r1,86
	ctx.r8.s64 = ctx.r1.s64 + 86;
	// li r3,5
	ctx.r3.s64 = 5;
loc_830040DC:
	// rlwinm r11,r30,1,0,30
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x8300414c
	if (!cr6.gt) goto loc_8300414C;
	// addi r10,r1,106
	ctx.r10.s64 = ctx.r1.s64 + 106;
	// addi r5,r4,2
	ctx.r5.s64 = ctx.r4.s64 + 2;
	// subf r6,r11,r10
	ctx.r6.s64 = ctx.r10.s64 - r11.s64;
loc_830040F8:
	// lhz r10,0(r6)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r6.u32 + 0);
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// lhz r9,0(r5)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r5.u32 + 0);
	// lwz r11,2(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 2);
	// mullw r9,r10,r9
	ctx.r9.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// add r10,r11,r9
	ctx.r10.u64 = r11.u64 + ctx.r9.u64;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x83004120
	if (cr6.lt) goto loc_83004120;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bge cr6,0x83004124
	if (!cr6.lt) goto loc_83004124;
loc_83004120:
	// li r7,1
	ctx.r7.s64 = 1;
loc_83004124:
	// stw r10,2(r8)
	PPC_STORE_U32(ctx.r8.u32 + 2, ctx.r10.u32);
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x8300413c
	if (cr6.eq) goto loc_8300413C;
	// lhz r11,0(r8)
	r11.u64 = PPC_LOAD_U16(ctx.r8.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// sth r11,0(r8)
	PPC_STORE_U16(ctx.r8.u32 + 0, r11.u16);
loc_8300413C:
	// addic. r31,r31,-1
	xer.ca = r31.u32 > 0;
	r31.s64 = r31.s64 + -1;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// addi r6,r6,-2
	ctx.r6.s64 = ctx.r6.s64 + -2;
	// addi r5,r5,2
	ctx.r5.s64 = ctx.r5.s64 + 2;
	// bgt 0x830040f8
	if (cr0.gt) goto loc_830040F8;
loc_8300414C:
	// addic. r3,r3,-1
	xer.ca = ctx.r3.u32 > 0;
	ctx.r3.s64 = ctx.r3.s64 + -1;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// addi r8,r8,-2
	ctx.r8.s64 = ctx.r8.s64 + -2;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// bgt 0x830040dc
	if (cr0.gt) goto loc_830040DC;
	// clrlwi r11,r29,16
	r11.u64 = r29.u32 & 0xFFFF;
	// addis r11,r11,1
	r11.s64 = r11.s64 + 65536;
	// addi r11,r11,-16382
	r11.s64 = r11.s64 + -16382;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// extsh. r10,r11
	ctx.r10.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// ble 0x830041c4
	if (!cr0.gt) goto loc_830041C4;
loc_83004178:
	// lwz r8,80(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// rlwinm. r9,r8,0,0,0
	ctx.r9.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x830041c4
	if (!cr0.eq) goto loc_830041C4;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r7,r10,1,31,31
	ctx.r7.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// rlwinm r6,r9,1,31,31
	ctx.r6.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x1;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r8,1,0,30
	ctx.r8.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// or r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 | ctx.r7.u64;
	// or r8,r8,r6
	ctx.r8.u64 = ctx.r8.u64 | ctx.r6.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// extsh. r5,r11
	ctx.r5.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// stw r8,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r8.u32);
	// bgt 0x83004178
	if (cr0.gt) goto loc_83004178;
loc_830041C4:
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bgt 0x83004264
	if (cr0.gt) goto loc_83004264;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bge 0x83004264
	if (!cr0.lt) goto loc_83004264;
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_830041E8:
	// lhz r9,90(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// clrlwi. r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x830041f8
	if (cr0.eq) goto loc_830041F8;
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
loc_830041F8:
	// clrlwi. r9,r6,31
	ctx.r9.u64 = ctx.r6.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// bne 0x83004208
	if (!cr0.eq) goto loc_83004208;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
loc_83004208:
	// clrlwi. r9,r7,31
	ctx.r9.u64 = ctx.r7.u32 & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// mr r9,r22
	ctx.r9.u64 = r22.u64;
	// bne 0x83004218
	if (!cr0.eq) goto loc_83004218;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
loc_83004218:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// rlwinm r10,r10,31,1,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// or r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r7,r7,31,1,31
	ctx.r7.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 31) & 0x7FFFFFFF;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// rlwinm r6,r6,31,1,31
	ctx.r6.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 31) & 0x7FFFFFFF;
	// extsh. r9,r11
	ctx.r9.s64 = r11.s16;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// or r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 | ctx.r8.u64;
	// blt 0x830041e8
	if (cr0.lt) goto loc_830041E8;
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// stw r6,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r6.u32);
	// beq cr6,0x83004264
	if (cr6.eq) goto loc_83004264;
	// lhz r10,90(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// sth r10,90(r1)
	PPC_STORE_U16(ctx.r1.u32 + 90, ctx.r10.u16);
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_83004264:
	// lhz r9,90(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 90);
	// cmplwi cr6,r9,32768
	cr6.compare<uint32_t>(ctx.r9.u32, 32768, xer);
	// bgt cr6,0x83004284
	if (cr6.gt) goto loc_83004284;
	// lis r9,1
	ctx.r9.s64 = 65536;
	// clrlwi r10,r10,15
	ctx.r10.u64 = ctx.r10.u32 & 0x1FFFF;
	// ori r9,r9,32768
	ctx.r9.u64 = ctx.r9.u64 | 32768;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x830042e4
	if (!cr6.eq) goto loc_830042E4;
loc_83004284:
	// lwz r10,86(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 86);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// bne cr6,0x830042dc
	if (!cr6.eq) goto loc_830042DC;
	// lwz r10,82(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 82);
	// stw r21,86(r1)
	PPC_STORE_U32(ctx.r1.u32 + 86, r21.u32);
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// bne cr6,0x830042d0
	if (!cr6.eq) goto loc_830042D0;
	// lhz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// stw r21,82(r1)
	PPC_STORE_U32(ctx.r1.u32 + 82, r21.u32);
	// cmplwi cr6,r10,65535
	cr6.compare<uint32_t>(ctx.r10.u32, 65535, xer);
	// bne cr6,0x830042c4
	if (!cr6.eq) goto loc_830042C4;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// sth r20,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r20.u16);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// b 0x830042e4
	goto loc_830042E4;
loc_830042C4:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, ctx.r10.u16);
	// b 0x830042e4
	goto loc_830042E4;
loc_830042D0:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,82(r1)
	PPC_STORE_U32(ctx.r1.u32 + 82, ctx.r10.u32);
	// b 0x830042e4
	goto loc_830042E4;
loc_830042DC:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r10,86(r1)
	PPC_STORE_U32(ctx.r1.u32 + 86, ctx.r10.u32);
loc_830042E4:
	// clrlwi r11,r11,16
	r11.u64 = r11.u32 & 0xFFFF;
	// cmplwi cr6,r11,32767
	cr6.compare<uint32_t>(r11.u32, 32767, xer);
	// bge cr6,0x83004318
	if (!cr6.lt) goto loc_83004318;
	// lhz r9,88(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 88);
	// clrlwi r10,r27,16
	ctx.r10.u64 = r27.u32 & 0xFFFF;
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// sth r11,96(r1)
	PPC_STORE_U16(ctx.r1.u32 + 96, r11.u16);
	// sth r9,106(r1)
	PPC_STORE_U16(ctx.r1.u32 + 106, ctx.r9.u16);
	// stw r8,102(r1)
	PPC_STORE_U32(ctx.r1.u32 + 102, ctx.r8.u32);
	// stw r7,98(r1)
	PPC_STORE_U32(ctx.r1.u32 + 98, ctx.r7.u32);
	// b 0x83004330
	goto loc_83004330;
loc_83004318:
	// stw r23,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r23.u32);
	// clrlwi. r11,r27,16
	r11.u64 = r27.u32 & 0xFFFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83004328
	if (!cr0.eq) goto loc_83004328;
	// stw r17,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r17.u32);
loc_83004328:
	// stw r21,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r21.u32);
	// stw r21,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r21.u32);
loc_83004330:
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bne cr6,0x83003fb8
	if (!cr6.eq) goto loc_83003FB8;
loc_83004338:
	// lhz r11,106(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 106);
	// lwz r8,102(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 102);
	// lwz r9,98(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 98);
	// lhz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 96);
	// b 0x830043a4
	goto loc_830043A4;
loc_8300434C:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// b 0x830043a4
	goto loc_830043A4;
loc_83004360:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// li r21,4
	r21.s64 = 4;
	// b 0x830043a4
	goto loc_830043A4;
loc_83004378:
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// mr r11,r21
	r11.u64 = r21.u64;
	// li r10,32767
	ctx.r10.s64 = 32767;
	// lis r9,-32768
	ctx.r9.s64 = -2147483648;
	// li r21,2
	r21.s64 = 2;
	// b 0x830043a4
	goto loc_830043A4;
loc_83004390:
	// mr r11,r21
	r11.u64 = r21.u64;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r21
	ctx.r8.u64 = r21.u64;
	// li r21,1
	r21.s64 = 1;
loc_830043A4:
	// sth r11,10(r19)
	PPC_STORE_U16(r19.u32 + 10, r11.u16);
	// clrlwi r10,r10,16
	ctx.r10.u64 = ctx.r10.u32 & 0xFFFF;
	// clrlwi r11,r18,16
	r11.u64 = r18.u32 & 0xFFFF;
	// stw r8,6(r19)
	PPC_STORE_U32(r19.u32 + 6, ctx.r8.u32);
	// stw r9,2(r19)
	PPC_STORE_U32(r19.u32 + 2, ctx.r9.u32);
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// sth r11,0(r19)
	PPC_STORE_U16(r19.u32 + 0, r11.u16);
loc_830043C4:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x82ca2c0c
	return;
}

PPC_WEAK_FUNC(sub_83003A40) {
	__imp__sub_83003A40(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830043D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-31953
	r11.s64 = -2094071808;
	// lis r10,-31921
	ctx.r10.s64 = -2091974656;
	// addi r28,r11,-2648
	r28.s64 = r11.s64 + -2648;
	// addi r29,r10,29632
	r29.s64 = ctx.r10.s64 + 29632;
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm. r9,r9,0,25,25
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x830044d0
	if (!cr0.eq) goto loc_830044D0;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x83004440
	if (cr6.eq) goto loc_83004440;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x83004440
	if (cr6.eq) goto loc_83004440;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r30,r11,2,0,29
	r30.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// lwzx r11,r30,r29
	r11.u64 = PPC_LOAD_U32(r30.u32 + r29.u32);
	// rlwinm r10,r3,6,21,25
	ctx.r10.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// b 0x83004444
	goto loc_83004444;
loc_83004440:
	// mr r11,r28
	r11.u64 = r28.u64;
loc_83004444:
	// lbz r11,40(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 40);
	// rlwinm. r11,r11,0,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x830044d0
	if (cr0.eq) goto loc_830044D0;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// blt 0x83004474
	if (cr0.lt) goto loc_83004474;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// b 0x8300447c
	goto loc_8300447C;
loc_83004474:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb5958
	sub_82CB5958(ctx, base);
loc_8300447C:
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x8300448c
	if (!cr6.eq) goto loc_8300448C;
loc_83004484:
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x83004634
	goto loc_83004634;
loc_8300448C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// stb r3,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r3.u8);
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// blt 0x830044b4
	if (cr0.lt) goto loc_830044B4;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// b 0x830044bc
	goto loc_830044BC;
loc_830044B4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb5958
	sub_82CB5958(ctx, base);
loc_830044BC:
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x83004484
	if (cr6.eq) goto loc_83004484;
	// stb r3,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, ctx.r3.u8);
loc_830044C8:
	// lhz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// b 0x83004634
	goto loc_83004634;
loc_830044D0:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm. r11,r11,0,25,25
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83004604
	if (!cr0.eq) goto loc_83004604;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x83004524
	if (cr6.eq) goto loc_83004524;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x83004524
	if (cr6.eq) goto loc_83004524;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r30,r11,2,0,29
	r30.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// lwzx r10,r30,r29
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + r29.u32);
	// rlwinm r11,r3,6,21,25
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// b 0x83004528
	goto loc_83004528;
loc_83004524:
	// mr r11,r28
	r11.u64 = r28.u64;
loc_83004528:
	// lbz r11,4(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// rlwinm. r11,r11,0,0,24
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFF80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x83004604
	if (cr0.eq) goto loc_83004604;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// li r30,1
	r30.s64 = 1;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// blt 0x8300455c
	if (cr0.lt) goto loc_8300455C;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// b 0x83004564
	goto loc_83004564;
loc_8300455C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb5958
	sub_82CB5958(ctx, base);
loc_83004564:
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x83004484
	if (cr6.eq) goto loc_83004484;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// clrlwi r3,r3,24
	ctx.r3.u64 = ctx.r3.u32 & 0xFF;
	// stb r11,84(r1)
	PPC_STORE_U8(ctx.r1.u32 + 84, r11.u8);
	// bl 0x8223f970
	sub_8223F970(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x830045d4
	if (cr0.eq) goto loc_830045D4;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// blt 0x830045a8
	if (cr0.lt) goto loc_830045A8;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lbz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// b 0x830045b0
	goto loc_830045B0;
loc_830045A8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb5958
	sub_82CB5958(ctx, base);
loc_830045B0:
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x830045cc
	if (!cr6.eq) goto loc_830045CC;
	// lbz r11,84(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 84);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// extsb r3,r11
	ctx.r3.s64 = r11.s8;
	// bl 0x82cba2f8
	sub_82CBA2F8(ctx, base);
	// b 0x83004484
	goto loc_83004484;
loc_830045CC:
	// li r30,2
	r30.s64 = 2;
	// stb r3,85(r1)
	PPC_STORE_U8(ctx.r1.u32 + 85, ctx.r3.u8);
loc_830045D4:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82cb81c8
	sub_82CB81C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// bne cr6,0x830044c8
	if (!cr6.eq) goto loc_830044C8;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r10,42
	ctx.r10.s64 = 42;
	// li r3,-1
	ctx.r3.s64 = -1;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x83004634
	goto loc_83004634;
loc_83004604:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// addic. r11,r11,-2
	xer.ca = r11.u32 > 1;
	r11.s64 = r11.s64 + -2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// blt 0x83004628
	if (cr0.lt) goto loc_83004628;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r11,2
	ctx.r10.s64 = r11.s64 + 2;
	// lhz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// b 0x83004634
	goto loc_83004634;
loc_83004628:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x83004740
	sub_83004740(ctx, base);
	// clrlwi r3,r3,16
	ctx.r3.u64 = ctx.r3.u32 & 0xFFFF;
loc_83004634:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830043D0) {
	__imp__sub_830043D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004648) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// addi r31,r1,-112
	r31.s64 = ctx.r1.s64 + -112;
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stw r30,132(r31)
	PPC_STORE_U32(r31.u32 + 132, r30.u32);
	// cntlzw r11,r30
	r11.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x830046a8
	if (!cr6.eq) goto loc_830046A8;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x830046d0
	goto loc_830046D0;
loc_830046A8:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8870
	sub_82CA8870(ctx, base);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x830043d0
	sub_830043D0(ctx, base);
	// sth r3,80(r31)
	PPC_STORE_U16(r31.u32 + 80, ctx.r3.u16);
	// mr r8,r8
	ctx.r8.u64 = ctx.r8.u64;
	// addi r12,r31,112
	r12.s64 = r31.s64 + 112;
	// bl 0x83004708
	sub_83004708(ctx, base);
	// lhz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U16(r31.u32 + 80);
loc_830046D0:
	// addi r1,r31,112
	ctx.r1.s64 = r31.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004648) {
	__imp__sub_83004648(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830046E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-112
	r31.s64 = r12.s64 + -112;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r30,132(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 132);
	// b 0x83004720
	goto loc_83004720;
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-112
	r31.s64 = r12.s64 + -112;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
loc_83004720:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830046E8) {
	__imp__sub_830046E8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004708) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// addi r31,r12,-112
	r31.s64 = r12.s64 + -112;
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// mflr r12
	// stw r12,-24(r1)
	PPC_STORE_U32(ctx.r1.u32 + -24, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca8930
	sub_82CA8930(ctx, base);
	// lwz r1,0(r1)
	ctx.r1.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// lwz r12,-24(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004708) {
	__imp__sub_83004708(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004740) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x83004780
	if (!cr6.eq) goto loc_83004780;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// li r11,22
	r11.s64 = 22;
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cab630
	sub_82CAB630(ctx, base);
	// b 0x830048f8
	goto loc_830048F8;
loc_83004780:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// andi. r10,r11,131
	ctx.r10.u64 = r11.u64 & 131;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x830048f8
	if (cr0.eq) goto loc_830048F8;
	// rlwinm. r10,r11,0,25,25
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x830048f8
	if (!cr0.eq) goto loc_830048F8;
	// rlwinm. r10,r11,0,30,30
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x830047a8
	if (cr0.eq) goto loc_830047A8;
	// ori r11,r11,32
	r11.u64 = r11.u64 | 32;
	// b 0x830048f4
	goto loc_830048F4;
loc_830047A8:
	// ori r11,r11,1
	r11.u64 = r11.u64 | 1;
	// andi. r10,r11,268
	ctx.r10.u64 = r11.u64 & 268;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x830047c8
	if (!cr0.eq) goto loc_830047C8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82cb6d00
	sub_82CB6D00(ctx, base);
	// b 0x830047d0
	goto loc_830047D0;
loc_830047C8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_830047D0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + 8);
	// lwz r29,24(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x82cb67a8
	sub_82CB67A8(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// beq 0x830048d4
	if (cr0.eq) goto loc_830048D4;
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// beq cr6,0x830048d4
	if (cr6.eq) goto loc_830048D4;
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x830048d4
	if (cr6.eq) goto loc_830048D4;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// andi. r11,r11,130
	r11.u64 = r11.u64 & 130;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x8300488c
	if (!cr0.eq) goto loc_8300488C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x83004868
	if (cr6.eq) goto loc_83004868;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// cmpwi cr6,r3,-2
	cr6.compare<int32_t>(ctx.r3.s32, -2, xer);
	// beq cr6,0x83004868
	if (cr6.eq) goto loc_83004868;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// srawi r11,r3,5
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1F) != 0);
	r11.s64 = ctx.r3.s32 >> 5;
	// lis r10,-31921
	ctx.r10.s64 = -2091974656;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r29,r11,2,0,29
	r29.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r30,r10,29632
	r30.s64 = ctx.r10.s64 + 29632;
	// bl 0x82caf6c8
	sub_82CAF6C8(ctx, base);
	// lwzx r11,r29,r30
	r11.u64 = PPC_LOAD_U32(r29.u32 + r30.u32);
	// rlwinm r10,r3,6,21,25
	ctx.r10.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0x7C0;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// b 0x83004870
	goto loc_83004870;
loc_83004868:
	// lis r11,-31953
	r11.s64 = -2094071808;
	// addi r11,r11,-2648
	r11.s64 = r11.s64 + -2648;
loc_83004870:
	// lbz r11,4(r11)
	r11.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// andi. r11,r11,130
	r11.u64 = r11.u64 & 130;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmplwi cr6,r11,130
	cr6.compare<uint32_t>(r11.u32, 130, xer);
	// bne cr6,0x8300488c
	if (!cr6.eq) goto loc_8300488C;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// ori r11,r11,8192
	r11.u64 = r11.u64 | 8192;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_8300488C:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 24);
	// cmpwi cr6,r11,512
	cr6.compare<int32_t>(r11.s32, 512, xer);
	// bne cr6,0x830048b4
	if (!cr6.eq) goto loc_830048B4;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// rlwinm. r10,r11,0,28,28
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x830048b4
	if (cr0.eq) goto loc_830048B4;
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x830048b4
	if (!cr0.eq) goto loc_830048B4;
	// li r11,4096
	r11.s64 = 4096;
	// stw r11,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r11.u32);
loc_830048B4:
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 4);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// addi r10,r10,-2
	ctx.r10.s64 = ctx.r10.s64 + -2;
	// addi r9,r11,2
	ctx.r9.s64 = r11.s64 + 2;
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// lhz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U16(r11.u32 + 0);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// b 0x83004900
	goto loc_83004900;
loc_830048D4:
	// subfic r11,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	r11.s64 = 0 - ctx.r3.s64;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 12);
	// li r9,0
	ctx.r9.s64 = 0;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// rlwinm r11,r11,0,27,27
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// or r11,r11,r10
	r11.u64 = r11.u64 | ctx.r10.u64;
loc_830048F4:
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
loc_830048F8:
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,65535
	ctx.r3.u64 = ctx.r3.u64 | 65535;
loc_83004900:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_83004740) {
	__imp__sub_83004740(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004908) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// oris r11,r3,544
	r11.u64 = ctx.r3.u64 | 35651584;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// stfs f1,140(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r1.u32 + 140, temp.u32);
	// lwz r9,140(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// li r11,2
	r11.s64 = 2;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// stw r8,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r8.u32);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,2316(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 2316);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x83004960
	if (cr6.eq) goto loc_83004960;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// li r3,67
	ctx.r3.s64 = 67;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_83004960:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004908) {
	__imp__sub_83004908(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004970) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// stfs f1,180(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r1.u32 + 180, temp.u32);
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mftb r11
	r11.u64 = read_timestamp_counter();
	// lwz r10,180(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 180);
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// addi r7,r1,192
	ctx.r7.s64 = ctx.r1.s64 + 192;
	// sradi r8,r11,32
	xer.ca = (r11.s64 < 0) & ((r11.u64 & 0xFFFFFFFF) != 0);
	ctx.r8.s64 = r11.s64 >> 32;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// stw r7,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r7.u32);
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// stw r8,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r8.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r10,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r10.u32);
	// subf r7,r6,r5
	ctx.r7.s64 = ctx.r5.s64 - ctx.r6.s64;
loc_830049D4:
	// lbzx r10,r7,r11
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r7.u32 + r11.u32);
	// mr. r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x83004a28
	if (cr0.eq) goto loc_83004A28;
	// cmplwi cr6,r8,37
	cr6.compare<uint32_t>(ctx.r8.u32, 37, xer);
	// beq cr6,0x83004a00
	if (cr6.eq) goto loc_83004A00;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// stb r10,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r10.u8);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r9,31
	cr6.compare<int32_t>(ctx.r9.s32, 31, xer);
	// blt cr6,0x830049d4
	if (cr6.lt) goto loc_830049D4;
	// b 0x83004a28
	goto loc_83004A28;
loc_83004A00:
	// li r4,31
	ctx.r4.s64 = 31;
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x832b2bec
	__imp___vsnprintf(ctx, base);
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// add r11,r3,r11
	r11.u64 = ctx.r3.u64 + r11.u64;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x83004a28
	if (!cr6.lt) goto loc_83004A28;
	// addi r11,r1,143
	r11.s64 = ctx.r1.s64 + 143;
loc_83004A28:
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// li r8,0
	ctx.r8.s64 = 0;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// stb r8,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r8.u8);
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// subf r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	// lwz r11,2316(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 2316);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r8,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r8.u32);
	// rlwinm r10,r10,30,2,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 30) & 0x3FFFFFFF;
	// rlwinm r9,r10,24,0,7
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFF000000;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// ori r10,r9,101
	ctx.r10.u64 = ctx.r9.u64 | 101;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x83004a80
	if (cr6.eq) goto loc_83004A80;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r3,67
	ctx.r3.s64 = 67;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_83004A80:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004970) {
	__imp__sub_83004970(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004A90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// addi r31,r1,-176
	r31.s64 = ctx.r1.s64 + -176;
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// stw r3,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r3.u32);
	// lis r27,-32256
	r27.s64 = -2113929216;
	// addi r11,r30,3
	r11.s64 = r30.s64 + 3;
	// stw r30,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r30.u32);
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// rlwinm r11,r11,30,2,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// li r9,3
	ctx.r9.s64 = 3;
	// stw r28,104(r31)
	PPC_STORE_U32(r31.u32 + 104, r28.u32);
	// addi r29,r11,3
	r29.s64 = r11.s64 + 3;
	// stw r11,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r11.u32);
	// addi r11,r31,80
	r11.s64 = r31.s64 + 80;
	// stw r9,100(r31)
	PPC_STORE_U32(r31.u32 + 100, ctx.r9.u32);
	// rlwinm r10,r29,24,0,7
	ctx.r10.u64 = rotl64(r29.u32 | (r29.u64 << 32), 24) & 0xFF000000;
	// stw r11,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r11.u32);
	// li r8,0
	ctx.r8.s64 = 0;
	// lwz r11,2316(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 2316);
	// ori r10,r10,98
	ctx.r10.u64 = ctx.r10.u64 | 98;
	// stw r8,112(r31)
	PPC_STORE_U32(r31.u32 + 112, ctx.r8.u32);
	// stw r10,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r10.u32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x83004b14
	if (cr6.eq) goto loc_83004B14;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// addi r4,r31,96
	ctx.r4.s64 = r31.s64 + 96;
	// li r3,94
	ctx.r3.s64 = 94;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x83004b18
	goto loc_83004B18;
loc_83004B14:
	// li r3,0
	ctx.r3.s64 = 0;
loc_83004B18:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// ble cr6,0x83004b28
	if (!cr6.gt) goto loc_83004B28;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x83004ba4
	goto loc_83004BA4;
loc_83004B28:
	// blt cr6,0x83004ba0
	if (cr6.lt) goto loc_83004BA0;
	// rlwinm r11,r29,2,0,29
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// neg r11,r11
	r11.s64 = -r11.s64;
	// rlwinm r12,r11,0,0,27
	r12.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF0;
	// bl 0x82ca9e84
	sub_82CA9E84(ctx, base);
	// lwz r11,0(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 0);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r10,84(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 84);
	// lwz r9,88(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 88);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r8,80(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 80);
	// stwux r11,r1,r12
	ea = ctx.r1.u32 + r12.u32;
	PPC_STORE_U32(ea, r11.u32);
	ctx.r1.u32 = ea;
	// addi r30,r1,80
	r30.s64 = ctx.r1.s64 + 80;
	// addi r3,r30,12
	ctx.r3.s64 = r30.s64 + 12;
	// stw r8,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r8.u32);
	// stw r10,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r10.u32);
	// stw r9,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r9.u32);
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// lwz r11,2316(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + 2316);
	// stw r30,96(r31)
	PPC_STORE_U32(r31.u32 + 96, r30.u32);
	// stw r29,100(r31)
	PPC_STORE_U32(r31.u32 + 100, r29.u32);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x83004ba0
	if (cr6.eq) goto loc_83004BA0;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// addi r4,r31,96
	ctx.r4.s64 = r31.s64 + 96;
	// li r3,67
	ctx.r3.s64 = 67;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// b 0x83004ba4
	goto loc_83004BA4;
loc_83004BA0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_83004BA4:
	// addi r1,r31,176
	ctx.r1.s64 = r31.s64 + 176;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_83004A90) {
	__imp__sub_83004A90(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004BB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r11,2316(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 2316);
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x83004bd8
	if (cr6.eq) goto loc_83004BD8;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + 24);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,68
	ctx.r3.s64 = 68;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctr 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	return;
loc_83004BD8:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004BB0) {
	__imp__sub_83004BB0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004BE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x832b318c
	__imp__NtCancelTimer(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x83004c08
	if (!cr0.lt) goto loc_83004C08;
	// bl 0x82cc1c38
	sub_82CC1C38(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83004c0c
	goto loc_83004C0C;
loc_83004C08:
	// li r3,1
	ctx.r3.s64 = 1;
loc_83004C0C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004BE0) {
	__imp__sub_83004BE0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004C20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// mr r9,r5
	ctx.r9.u64 = ctx.r5.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// clrlwi r8,r8,24
	ctx.r8.u64 = ctx.r8.u32 & 0xFF;
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// bl 0x832b319c
	__imp__NtSetTimerEx(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x83004c5c
	if (!cr0.lt) goto loc_83004C5C;
	// bl 0x82cc1c38
	sub_82CC1C38(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83004c7c
	goto loc_83004C7C;
loc_83004C5C:
	// lis r11,16384
	r11.s64 = 1073741824;
	// ori r11,r11,37
	r11.u64 = r11.u64 | 37;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// li r3,50
	ctx.r3.s64 = 50;
	// beq cr6,0x83004c74
	if (cr6.eq) goto loc_83004C74;
	// li r3,0
	ctx.r3.s64 = 0;
loc_83004C74:
	// bl 0x82cc0750
	sub_82CC0750(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
loc_83004C7C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004C20) {
	__imp__sub_83004C20(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004C90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x83004cc0
	if (cr6.eq) goto loc_83004CC0;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82cc1df0
	sub_82CC1DF0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// b 0x83004cc4
	goto loc_83004CC4;
loc_83004CC0:
	// li r4,0
	ctx.r4.s64 = 0;
loc_83004CC4:
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rlwinm r5,r11,27,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// bl 0x832b31ac
	__imp__NtCreateTimer(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x83004cfc
	if (cr0.lt) goto loc_83004CFC;
	// lis r11,16384
	r11.s64 = 1073741824;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// li r3,183
	ctx.r3.s64 = 183;
	// beq cr6,0x83004cf0
	if (cr6.eq) goto loc_83004CF0;
	// li r3,0
	ctx.r3.s64 = 0;
loc_83004CF0:
	// bl 0x82cc0750
	sub_82CC0750(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x83004d04
	goto loc_83004D04;
loc_83004CFC:
	// bl 0x82cc1c38
	sub_82CC1C38(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_83004D04:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004C90) {
	__imp__sub_83004C90(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004D18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// bl 0x832b21fc
	__imp__RtlInitAnsiString(ctx, base);
	// li r11,-3
	r11.s64 = -3;
	// li r10,64
	ctx.r10.s64 = 64;
	// addi r9,r1,88
	ctx.r9.s64 = ctx.r1.s64 + 88;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r11.u32);
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// lis r8,128
	ctx.r8.s64 = 8388608;
	// stw r9,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r9.u32);
	// lis r4,16
	ctx.r4.s64 = 1048576;
	// ori r8,r8,33
	ctx.r8.u64 = ctx.r8.u64 | 33;
	// li r7,3
	ctx.r7.s64 = 3;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// ori r4,r4,1
	ctx.r4.u64 = ctx.r4.u64 | 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x832b27ac
	__imp__NtOpenFile(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x83004da0
	if (!cr0.lt) goto loc_83004DA0;
	// bl 0x82cc1c38
	sub_82CC1C38(ctx, base);
	// bl 0x82cc0758
	sub_82CC0758(ctx, base);
	// cmplwi cr6,r3,2
	cr6.compare<uint32_t>(ctx.r3.u32, 2, xer);
	// bne cr6,0x83004d98
	if (!cr6.eq) goto loc_83004D98;
	// li r3,3
	ctx.r3.s64 = 3;
	// bl 0x82cc0750
	sub_82CC0750(ctx, base);
loc_83004D98:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83004e20
	goto loc_83004E20;
loc_83004DA0:
	// li r7,3
	ctx.r7.s64 = 3;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r6,24
	ctx.r6.s64 = 24;
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// bl 0x832b279c
	__imp__NtQueryVolumeInformationFile(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x832b268c
	__imp__NtClose(ctx, base);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bge cr6,0x83004dd8
	if (!cr6.lt) goto loc_83004DD8;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82cc1c38
	sub_82CC1C38(ctx, base);
	// b 0x83004d98
	goto loc_83004D98;
loc_83004DD8:
	// lwz r10,144(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// lwz r11,148(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	// ld r9,136(r1)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r1.u32 + 136);
	// mullw r11,r10,r11
	r11.s64 = int64_t(ctx.r10.s32) * int64_t(r11.s32);
	// ld r10,128(r1)
	ctx.r10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// clrldi r8,r11,32
	ctx.r8.u64 = r11.u64 & 0xFFFFFFFF;
	// mulld r11,r9,r8
	r11.s64 = ctx.r9.s64 * ctx.r8.s64;
	// mulld r10,r10,r8
	ctx.r10.s64 = ctx.r10.s64 * ctx.r8.s64;
	// beq cr6,0x83004e04
	if (cr6.eq) goto loc_83004E04;
	// std r11,0(r31)
	PPC_STORE_U64(r31.u32 + 0, r11.u64);
loc_83004E04:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x83004e10
	if (cr6.eq) goto loc_83004E10;
	// std r10,0(r29)
	PPC_STORE_U64(r29.u32 + 0, ctx.r10.u64);
loc_83004E10:
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x83004e1c
	if (cr6.eq) goto loc_83004E1C;
	// std r11,0(r28)
	PPC_STORE_U64(r28.u32 + 0, r11.u64);
loc_83004E1C:
	// li r3,1
	ctx.r3.s64 = 1;
loc_83004E20:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83004D18) {
	__imp__sub_83004D18(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004E28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r4,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r4.u32);
	// stw r5,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r5.u32);
	// stw r6,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r6.u32);
	// stw r7,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r7.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004E28) {
	__imp__sub_83004E28(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004E48) {
	PPC_FUNC_PROLOGUE();
	// b 0x832b2bbc
	__imp__XeCryptShaInit(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83004E48) {
	__imp__sub_83004E48(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004E50) {
	PPC_FUNC_PROLOGUE();
	// b 0x832b2bcc
	__imp__XeCryptShaUpdate(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83004E50) {
	__imp__sub_83004E50(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004E58) {
	PPC_FUNC_PROLOGUE();
	// li r5,20
	ctx.r5.s64 = 20;
	// b 0x832b2bdc
	__imp__XeCryptShaFinal(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83004E58) {
	__imp__sub_83004E58(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004E60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x832b295c
	__imp__XexGetModuleHandle(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x83004e88
	if (!cr0.lt) goto loc_83004E88;
	// bl 0x82cc1c38
	sub_82CC1C38(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x83004e8c
	goto loc_83004E8C;
loc_83004E88:
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
loc_83004E8C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004E60) {
	__imp__sub_83004E60(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004EA0) {
	PPC_FUNC_PROLOGUE();
	// b 0x832b28dc
	__imp__vswprintf(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83004EA0) {
	__imp__sub_83004EA0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004EA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x83004ed8
	if (cr6.eq) goto loc_83004ED8;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82cc1df0
	sub_82CC1DF0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// b 0x83004edc
	goto loc_83004EDC;
loc_83004ED8:
	// li r4,0
	ctx.r4.s64 = 0;
loc_83004EDC:
	// clrlwi r5,r31,24
	ctx.r5.u64 = r31.u32 & 0xFF;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x832b31bc
	__imp__NtCreateMutant(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x83004f10
	if (cr0.lt) goto loc_83004F10;
	// lis r11,16384
	r11.s64 = 1073741824;
	// cmpw cr6,r3,r11
	cr6.compare<int32_t>(ctx.r3.s32, r11.s32, xer);
	// li r3,183
	ctx.r3.s64 = 183;
	// beq cr6,0x83004f04
	if (cr6.eq) goto loc_83004F04;
	// li r3,0
	ctx.r3.s64 = 0;
loc_83004F04:
	// bl 0x82cc0750
	sub_82CC0750(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// b 0x83004f18
	goto loc_83004F18;
loc_83004F10:
	// bl 0x82cc1c38
	sub_82CC1C38(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_83004F18:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004EA8) {
	__imp__sub_83004EA8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004F30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x832b31cc
	__imp__NtReleaseMutant(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x83004f54
	if (cr0.lt) goto loc_83004F54;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x83004f5c
	goto loc_83004F5C;
loc_83004F54:
	// bl 0x82cc1c38
	sub_82CC1C38(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_83004F5C:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004F30) {
	__imp__sub_83004F30(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83004F70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x832b21fc
	__imp__RtlInitAnsiString(ctx, base);
	// li r11,64
	r11.s64 = 64;
	// addi r10,r1,88
	ctx.r10.s64 = ctx.r1.s64 + 88;
	// li r30,-3
	r30.s64 = -3;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// li r8,16416
	ctx.r8.s64 = 16416;
	// stw r30,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r30.u32);
	// li r7,7
	ctx.r7.s64 = 7;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// lis r4,17
	ctx.r4.s64 = 1114112;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x832b27ac
	__imp__NtOpenFile(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// blt 0x83005020
	if (cr0.lt) goto loc_83005020;
	// li r11,0
	r11.s64 = 0;
	// stw r30,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r30.u32);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// stb r11,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, r11.u8);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// bl 0x832b21fc
	__imp__RtlInitAnsiString(ctx, base);
	// li r7,10
	ctx.r7.s64 = 10;
	// li r6,16
	ctx.r6.s64 = 16;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// bl 0x832b29fc
	__imp__NtSetInformationFile(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x832b268c
	__imp__NtClose(ctx, base);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// blt cr6,0x8300501c
	if (cr6.lt) goto loc_8300501C;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x83005028
	goto loc_83005028;
loc_8300501C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_83005020:
	// bl 0x82cc1c18
	sub_82CC1C18(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_83005028:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83004F70) {
	__imp__sub_83004F70(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83005040) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// li r7,-1
	ctx.r7.s64 = -1;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r3,1
	ctx.r3.s64 = 1;
	// bl 0x830050d0
	sub_830050D0(ctx, base);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x830050b0
	if (!cr0.eq) goto loc_830050B0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x830050a4
	if (cr6.eq) goto loc_830050A4;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x8300509c
	if (cr6.eq) goto loc_8300509C;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca6320
	sub_82CA6320(ctx, base);
	// b 0x830050b4
	goto loc_830050B4;
loc_8300509C:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x830050b4
	goto loc_830050B4;
loc_830050A4:
	// subfic r11,r31,0
	xer.ca = r31.u32 <= 0;
	r11.s64 = 0 - r31.s64;
	// subfe r3,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r3.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// b 0x830050b4
	goto loc_830050B4;
loc_830050B0:
	// addi r3,r3,-2
	ctx.r3.s64 = ctx.r3.s64 + -2;
loc_830050B4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83005040) {
	__imp__sub_83005040(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830050D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// not r10,r11
	ctx.r10.u64 = ~r11.u64;
	// clrlwi r29,r11,31
	r29.u64 = r11.u32 & 0x1;
	// rlwinm r30,r10,20,31,31
	r30.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0x1;
	// rlwinm r28,r11,0,29,29
	r28.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x83005290
	if (cr6.eq) goto loc_83005290;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x83005290
	if (cr6.eq) goto loc_83005290;
	// cmpwi cr6,r5,-1
	cr6.compare<int32_t>(ctx.r5.s32, -1, xer);
	// blt cr6,0x83005290
	if (cr6.lt) goto loc_83005290;
	// cmpwi cr6,r7,-1
	cr6.compare<int32_t>(ctx.r7.s32, -1, xer);
	// blt cr6,0x83005290
	if (cr6.lt) goto loc_83005290;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq cr6,0x83005274
	if (cr6.eq) goto loc_83005274;
	// lis r11,-31952
	r11.s64 = -2094006272;
	// addi r31,r11,-2160
	r31.s64 = r11.s64 + -2160;
loc_83005124:
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x8300526c
	if (cr6.eq) goto loc_8300526C;
	// lbz r10,0(r4)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// extsb. r11,r10
	r11.s64 = ctx.r10.s8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83005144
	if (!cr0.eq) goto loc_83005144;
	// lbz r9,0(r6)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x83005248
	if (cr6.eq) goto loc_83005248;
loc_83005144:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x8300525c
	if (cr6.eq) goto loc_8300525C;
	// lbz r11,0(r6)
	r11.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x83005264
	if (cr0.eq) goto loc_83005264;
	// rlwinm r9,r10,2,22,29
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0x3FC;
	// rlwinm r27,r11,2,22,29
	r27.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x3FC;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// lwzx r8,r9,r31
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + r31.u32);
	// lwzx r9,r27,r31
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + r31.u32);
	// beq cr6,0x830051d4
	if (cr6.eq) goto loc_830051D4;
	// rlwinm. r27,r8,0,15,15
	r27.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// beq 0x830051b8
	if (cr0.eq) goto loc_830051B8;
	// rlwinm. r11,r9,0,15,15
	r11.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x830051a4
	if (cr0.eq) goto loc_830051A4;
	// cmplw cr6,r8,r9
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r9.u32, xer);
	// bge cr6,0x83005198
	if (!cr6.lt) goto loc_83005198;
	// li r3,7
	ctx.r3.s64 = 7;
	// b 0x8300522c
	goto loc_8300522C;
loc_83005198:
	// ble cr6,0x8300522c
	if (!cr6.gt) goto loc_8300522C;
	// li r3,11
	ctx.r3.s64 = 11;
	// b 0x8300522c
	goto loc_8300522C;
loc_830051A4:
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x830051b0
	if (!cr6.eq) goto loc_830051B0;
	// li r3,4
	ctx.r3.s64 = 4;
loc_830051B0:
	// ori r3,r3,1
	ctx.r3.u64 = ctx.r3.u64 | 1;
	// b 0x83005234
	goto loc_83005234;
loc_830051B8:
	// rlwinm. r27,r9,0,15,15
	r27.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x10000;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// beq 0x830051d4
	if (cr0.eq) goto loc_830051D4;
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x830051cc
	if (!cr6.eq) goto loc_830051CC;
	// li r3,8
	ctx.r3.s64 = 8;
loc_830051CC:
	// ori r3,r3,2
	ctx.r3.u64 = ctx.r3.u64 | 2;
	// b 0x830051ec
	goto loc_830051EC;
loc_830051D4:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x830051f8
	if (cr6.eq) goto loc_830051F8;
	// rlwinm. r27,r8,0,14,14
	r27.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// bne 0x83005234
	if (!cr0.eq) goto loc_83005234;
	// rlwinm. r27,r9,0,14,14
	r27.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x20000;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// beq 0x830051f8
	if (cr0.eq) goto loc_830051F8;
loc_830051EC:
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// b 0x8300523c
	goto loc_8300523C;
loc_830051F8:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x83005220
	if (cr6.eq) goto loc_83005220;
	// rlwinm. r27,r8,0,11,11
	r27.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x100000;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// beq 0x83005210
	if (cr0.eq) goto loc_83005210;
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// oris r8,r10,8
	ctx.r8.u64 = ctx.r10.u64 | 524288;
loc_83005210:
	// rlwinm. r10,r9,0,11,11
	ctx.r10.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x100000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x83005220
	if (cr0.eq) goto loc_83005220;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// oris r9,r11,8
	ctx.r9.u64 = r11.u64 | 524288;
loc_83005220:
	// cmplw cr6,r8,r9
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r9.u32, xer);
	// blt cr6,0x8300525c
	if (cr6.lt) goto loc_8300525C;
	// bgt cr6,0x83005264
	if (cr6.gt) goto loc_83005264;
loc_8300522C:
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// addi r6,r6,1
	ctx.r6.s64 = ctx.r6.s64 + 1;
loc_83005234:
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// addi r4,r4,1
	ctx.r4.s64 = ctx.r4.s64 + 1;
loc_8300523C:
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// bne cr6,0x83005124
	if (!cr6.eq) goto loc_83005124;
	// b 0x83005274
	goto loc_83005274;
loc_83005248:
	// lis r11,-31952
	r11.s64 = -2094006272;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,-1136
	r11.s64 = r11.s64 + -1136;
	// lwzx r3,r10,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// b 0x8300529c
	goto loc_8300529C;
loc_8300525C:
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x8300529c
	goto loc_8300529C;
loc_83005264:
	// li r3,3
	ctx.r3.s64 = 3;
	// b 0x8300529c
	goto loc_8300529C;
loc_8300526C:
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// bne cr6,0x8300527c
	if (!cr6.eq) goto loc_8300527C;
loc_83005274:
	// cmpwi cr6,r7,0
	cr6.compare<int32_t>(ctx.r7.s32, 0, xer);
	// beq cr6,0x83005248
	if (cr6.eq) goto loc_83005248;
loc_8300527C:
	// subfic r11,r5,0
	xer.ca = ctx.r5.u32 <= 0;
	r11.s64 = 0 - ctx.r5.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// addi r3,r11,3
	ctx.r3.s64 = r11.s64 + 3;
	// b 0x8300529c
	goto loc_8300529C;
loc_83005290:
	// li r3,87
	ctx.r3.s64 = 87;
	// bl 0x82cc0750
	sub_82CC0750(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_8300529C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_830050D0) {
	__imp__sub_830050D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830052A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r7
	r31.u64 = ctx.r7.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// bl 0x82ca3190
	sub_82CA3190(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// rlwinm. r10,r30,0,29,29
	ctx.r10.u64 = rotl64(r30.u32 | (r30.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// beq 0x830052f0
	if (cr0.eq) goto loc_830052F0;
	// lis r10,32
	ctx.r10.s64 = 2097152;
	// ori r10,r10,1
	ctx.r10.u64 = ctx.r10.u64 | 1;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
loc_830052F0:
	// rlwinm. r10,r30,0,22,22
	ctx.r10.u64 = rotl64(r30.u32 | (r30.u64 << 32), 0) & 0x200;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x83005304
	if (cr0.eq) goto loc_83005304;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// oris r10,r10,64
	ctx.r10.u64 = ctx.r10.u64 | 4194304;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
loc_83005304:
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 28);
	// rlwinm r9,r29,0,6,29
	ctx.r9.u64 = rotl64(r29.u32 | (r29.u64 << 32), 0) & 0x3FFFFFC;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// lis r8,-1
	ctx.r8.s64 = -65536;
	// rlwinm r11,r10,0,4,4
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x8000000;
	// ori r10,r28,3
	ctx.r10.u64 = r28.u64 | 3;
	// stw r8,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r8.u32);
	// or r11,r9,r11
	r11.u64 = ctx.r9.u64 | r11.u64;
	// stw r10,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r10.u32);
	// oris r11,r11,4096
	r11.u64 = r11.u64 | 268435456;
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830052A8) {
	__imp__sub_830052A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83005340) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r8
	r31.u64 = ctx.r8.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// bl 0x82ca3190
	sub_82CA3190(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r27,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r27.u32);
	// rlwinm. r9,r30,0,29,29
	ctx.r9.u64 = rotl64(r30.u32 | (r30.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// beq 0x83005398
	if (cr0.eq) goto loc_83005398;
	// lis r11,32
	r11.s64 = 2097152;
	// ori r11,r11,2
	r11.u64 = r11.u64 | 2;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_83005398:
	// rlwinm. r11,r30,0,22,22
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 0) & 0x200;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x830053ac
	if (cr0.eq) goto loc_830053AC;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// oris r11,r11,64
	r11.u64 = r11.u64 | 4194304;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_830053AC:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// rlwinm r10,r29,29,0,2
	ctx.r10.u64 = rotl64(r29.u32 | (r29.u64 << 32), 29) & 0xE0000000;
	// lis r9,-1
	ctx.r9.s64 = -65536;
	// stw r28,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r28.u32);
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// stw r9,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r9.u32);
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_83005340) {
	__imp__sub_83005340(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830053D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82ca3190
	sub_82CA3190(ctx, base);
	// rlwinm r11,r28,4,0,27
	r11.u64 = rotl64(r28.u32 | (r28.u64 << 32), 4) & 0xFFFFFFF0;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r9,8
	ctx.r9.s64 = 8;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// rlwinm. r11,r30,0,29,29
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// beq 0x83005428
	if (cr0.eq) goto loc_83005428;
	// lis r11,32
	r11.s64 = 2097152;
	// ori r11,r11,8
	r11.u64 = r11.u64 | 8;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_83005428:
	// rlwinm. r11,r30,0,22,22
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 0) & 0x200;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x8300543c
	if (cr0.eq) goto loc_8300543C;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// oris r11,r11,64
	r11.u64 = r11.u64 | 4194304;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
loc_8300543C:
	// lis r11,-1
	r11.s64 = -65536;
	// stw r29,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r29.u32);
	// stw r11,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830053D0) {
	__imp__sub_830053D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83005450) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r8
	r31.u64 = ctx.r8.u64;
	// lwz r30,268(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 268);
	// mr r8,r6
	ctx.r8.u64 = ctx.r6.u64;
	// lwz r29,260(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 260);
	// mr r6,r4
	ctx.r6.u64 = ctx.r4.u64;
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// li r4,20
	ctx.r4.s64 = 20;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r31,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r31.u32);
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
	// stw r4,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r4.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r30,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r30.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r29,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r29.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x821fb838
	sub_821FB838(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_83005450) {
	__imp__sub_83005450(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830054B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
	// lwz r29,284(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 284);
	// lwz r28,276(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 276);
	// li r5,18
	ctx.r5.s64 = 18;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// mr r30,r8
	r30.u64 = ctx.r8.u64;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// li r11,0
	r11.s64 = 0;
	// stw r5,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r5.u32);
	// mr r8,r6
	ctx.r8.u64 = ctx.r6.u64;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r30.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// stw r29,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r29.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r28,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, r28.u32);
	// li r9,2
	ctx.r9.s64 = 2;
	// stw r11,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r11.u32);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r5,6
	ctx.r5.s64 = 6;
	// bl 0x821fb838
	sub_821FB838(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830054B8) {
	__imp__sub_830054B8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83005528) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	// cntlzw r11,r6
	r11.u64 = ctx.r6.u32 == 0 ? 32 : __builtin_clz(ctx.r6.u32);
	// clrlwi r10,r3,29
	ctx.r10.u64 = ctx.r3.u32 & 0x7;
	// rlwinm r9,r4,2,27,28
	ctx.r9.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0x18;
	// subfic r11,r11,31
	xer.ca = r11.u32 <= 31;
	r11.s64 = 31 - r11.s64;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// addi r9,r5,31
	ctx.r9.s64 = ctx.r5.s64 + 31;
	// slw r6,r10,r11
	ctx.r6.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r11.u8 & 0x3F));
	// rlwinm r10,r9,27,5,31
	ctx.r10.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x7FFFFFF;
	// rlwinm r9,r4,27,5,31
	ctx.r9.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 27) & 0x7FFFFFF;
	// rlwinm r8,r3,27,5,31
	ctx.r8.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 27) & 0x7FFFFFF;
	// mullw r7,r10,r9
	ctx.r7.s64 = int64_t(ctx.r10.s32) * int64_t(ctx.r9.s32);
	// rlwinm r9,r6,0,0,27
	ctx.r9.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFFF0;
	// rlwinm r10,r4,3,28,28
	ctx.r10.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0x8;
	// add r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 + ctx.r8.u64;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r7,r11,7
	ctx.r7.s64 = r11.s64 + 7;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// slw r10,r8,r7
	ctx.r10.u64 = ctx.r7.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r7.u8 & 0x3F));
	// addi r8,r11,3
	ctx.r8.s64 = r11.s64 + 3;
	// rlwinm r7,r4,0,28,28
	ctx.r7.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x8;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// slw r9,r7,r8
	ctx.r9.u64 = ctx.r8.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r8.u8 & 0x3F));
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// clrlwi r9,r6,28
	ctx.r9.u64 = ctx.r6.u32 & 0xF;
	// rlwinm r8,r4,4,23,23
	ctx.r8.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 4) & 0x100;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r4,1,0,27
	ctx.r9.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0xFFFFFFF0;
	// rlwinm r6,r10,0,0,22
	ctx.r6.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFE00;
	// add r5,r9,r3
	ctx.r5.u64 = ctx.r9.u64 + ctx.r3.u64;
	// add r9,r8,r6
	ctx.r9.u64 = ctx.r8.u64 + ctx.r6.u64;
	// rlwinm r7,r10,0,23,25
	ctx.r7.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x1C0;
	// rlwinm r9,r9,1,0,30
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r8,r5,3,24,25
	ctx.r8.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 3) & 0xC0;
	// add r7,r9,r7
	ctx.r7.u64 = ctx.r9.u64 + ctx.r7.u64;
	// clrlwi r9,r10,26
	ctx.r9.u64 = ctx.r10.u32 & 0x3F;
	// rlwinm r10,r7,2,0,29
	ctx.r10.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r8
	ctx.r10.u64 = ctx.r10.u64 + ctx.r8.u64;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// srw r3,r10,r11
	ctx.r3.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 >> (r11.u8 & 0x3F));
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83005528) {
	__imp__sub_83005528(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830055C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r31{};
	PPCVRegister v59{};
	PPCVRegister v60{};
	PPCVRegister v61{};
	PPCVRegister v62{};
	PPCVRegister v63{};
	PPCRegister temp{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// clrlwi. r9,r11,30
	ctx.r9.u64 = r11.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// b 0x830055fc
	goto loc_830055FC;
loc_830055DC:
	// cmplwi cr6,r5,1
	cr6.compare<uint32_t>(ctx.r5.u32, 1, xer);
	// blt cr6,0x83005604
	if (cr6.lt) goto loc_83005604;
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// clrlwi. r8,r11,30
	ctx.r8.u64 = r11.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
loc_830055FC:
	// stw r10,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, ctx.r10.u32);
	// bne 0x830055dc
	if (!cr0.eq) goto loc_830055DC;
loc_83005604:
	// clrlwi. r9,r11,29
	ctx.r9.u64 = r11.u32 & 0x7;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x83005634
	if (cr0.eq) goto loc_83005634;
loc_8300560C:
	// cmplwi cr6,r5,4
	cr6.compare<uint32_t>(ctx.r5.u32, 4, xer);
	// blt cr6,0x83005634
	if (cr6.lt) goto loc_83005634;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r5,r5,-4
	ctx.r5.s64 = ctx.r5.s64 + -4;
	// clrlwi. r8,r11,29
	ctx.r8.u64 = r11.u32 & 0x7;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// stw r10,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, ctx.r10.u32);
	// bne 0x8300560c
	if (!cr0.eq) goto loc_8300560C;
loc_83005634:
	// clrlwi. r9,r11,28
	ctx.r9.u64 = r11.u32 & 0xF;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x83005664
	if (cr0.eq) goto loc_83005664;
loc_8300563C:
	// cmplwi cr6,r5,8
	cr6.compare<uint32_t>(ctx.r5.u32, 8, xer);
	// blt cr6,0x83005664
	if (cr6.lt) goto loc_83005664;
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// addi r5,r5,-8
	ctx.r5.s64 = ctx.r5.s64 + -8;
	// clrlwi. r8,r11,28
	ctx.r8.u64 = r11.u32 & 0xF;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r10,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, ctx.r10.u32);
	// bne 0x8300563c
	if (!cr0.eq) goto loc_8300563C;
loc_83005664:
	// addi r8,r10,15
	ctx.r8.s64 = ctx.r10.s64 + 15;
	// li r9,16
	ctx.r9.s64 = 16;
	// b 0x83005698
	goto loc_83005698;
loc_83005670:
	// cmplwi cr6,r5,16
	cr6.compare<uint32_t>(ctx.r5.u32, 16, xer);
	// blt cr6,0x83005740
	if (cr6.lt) goto loc_83005740;
	// lvx128 v63,r0,r11
	simd::store_shuffled(v63, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// addi r8,r8,16
	ctx.r8.s64 = ctx.r8.s64 + 16;
	// stvlx128 v63,r0,r10
{
	uint32_t addr = 
ctx.r10.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v63), 15 - i));
}
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// stvrx128 v63,r10,r9
{
	uint32_t addr = 
ctx.r10.u32 + ctx.r9.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < tmp_off; i++)
		PPC_STORE_U8(addr - i - 1, simd::extract_u8(simd::to_vec128i(v63), i));
}
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// addi r5,r5,-16
	ctx.r5.s64 = ctx.r5.s64 + -16;
	// stw r10,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, ctx.r10.u32);
loc_83005698:
	// clrlwi r7,r8,25
	ctx.r7.u64 = ctx.r8.u32 & 0x7F;
	// cmplwi cr6,r7,16
	cr6.compare<uint32_t>(ctx.r7.u32, 16, xer);
	// bge cr6,0x83005670
	if (!cr6.lt) goto loc_83005670;
	// b 0x83005740
	goto loc_83005740;
loc_830056A8:
	// li r8,15
	ctx.r8.s64 = 15;
	// dcbzl r8,r10
	memset(base + ((ctx.r8.u32 + ctx.r10.u32) & ~127), 0, 128);
	// lwz r10,-16(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	// addi r8,r11,32
	ctx.r8.s64 = r11.s64 + 32;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r7,r10,32
	ctx.r7.s64 = ctx.r10.s64 + 32;
loc_830056C0:
	// lvrx128 v62,r9,r11
	temp.u32 = ctx.r9.u32 + r11.u32;
	simd::store_i8(v62.u8, simd::load_unaligned_vector_right(base, temp.u32));
	// addi r4,r8,-16
	ctx.r4.s64 = ctx.r8.s64 + -16;
	// lvlx128 v63,r0,r11
	temp.u32 = r0.u32 + r11.u32;
	simd::store_shuffled(v63,
		simde_mm_shuffle_epi8(
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(base + ((temp).u32 & ~0xF))),
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(&VectorMaskL[((temp).u32 & 0xF) * 16]))
		));
	// addi r3,r8,16
	ctx.r3.s64 = ctx.r8.s64 + 16;
	// vor128 v63,v63,v62
	simd::store_i8(v63.u8, simd::or_i8(simd::load_i8(v63.u8), simd::load_i8(v62.u8)));
	// lvrx128 v61,r9,r8
	temp.u32 = ctx.r9.u32 + ctx.r8.u32;
	simd::store_i8(v61.u8, simd::load_unaligned_vector_right(base, temp.u32));
	// lvlx128 v62,r0,r8
	temp.u32 = r0.u32 + ctx.r8.u32;
	simd::store_shuffled(v62,
		simde_mm_shuffle_epi8(
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(base + ((temp).u32 & ~0xF))),
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(&VectorMaskL[((temp).u32 & 0xF) * 16]))
		));
	// addi r31,r7,-16
	r31.s64 = ctx.r7.s64 + -16;
	// vor128 v62,v62,v61
	simd::store_i8(v62.u8, simd::or_i8(simd::load_i8(v62.u8), simd::load_i8(v61.u8)));
	// addic. r6,r6,-1
	xer.ca = ctx.r6.u32 > 0;
	ctx.r6.s64 = ctx.r6.s64 + -1;
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// lvlx128 v60,r0,r4
	temp.u32 = r0.u32 + ctx.r4.u32;
	simd::store_shuffled(v60,
		simde_mm_shuffle_epi8(
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(base + ((temp).u32 & ~0xF))),
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(&VectorMaskL[((temp).u32 & 0xF) * 16]))
		));
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// lvrx128 v61,r9,r4
	temp.u32 = ctx.r9.u32 + ctx.r4.u32;
	simd::store_i8(v61.u8, simd::load_unaligned_vector_right(base, temp.u32));
	// addi r4,r7,16
	ctx.r4.s64 = ctx.r7.s64 + 16;
	// vor128 v61,v60,v61
	simd::store_i8(v61.u8, simd::or_i8(simd::load_i8(v60.u8), simd::load_i8(v61.u8)));
	// lvlx128 v60,r0,r3
	temp.u32 = r0.u32 + ctx.r3.u32;
	simd::store_shuffled(v60,
		simde_mm_shuffle_epi8(
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(base + ((temp).u32 & ~0xF))),
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(&VectorMaskL[((temp).u32 & 0xF) * 16]))
		));
	// lvrx128 v59,r9,r3
	temp.u32 = ctx.r9.u32 + ctx.r3.u32;
	simd::store_i8(v59.u8, simd::load_unaligned_vector_right(base, temp.u32));
	// addi r8,r8,64
	ctx.r8.s64 = ctx.r8.s64 + 64;
	// stvlx128 v63,r0,r10
{
	uint32_t addr = 
ctx.r10.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v63), 15 - i));
}
	// vor128 v60,v60,v59
	simd::store_i8(v60.u8, simd::or_i8(simd::load_i8(v60.u8), simd::load_i8(v59.u8)));
	// stvrx128 v63,r10,r9
{
	uint32_t addr = 
ctx.r10.u32 + ctx.r9.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < tmp_off; i++)
		PPC_STORE_U8(addr - i - 1, simd::extract_u8(simd::to_vec128i(v63), i));
}
	// addi r5,r5,-64
	ctx.r5.s64 = ctx.r5.s64 + -64;
	// stvlx128 v61,r0,r31
{
	uint32_t addr = 
r31.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v61), 15 - i));
}
	// addi r10,r10,64
	ctx.r10.s64 = ctx.r10.s64 + 64;
	// stvrx128 v61,r31,r9
{
	uint32_t addr = 
r31.u32 + ctx.r9.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < tmp_off; i++)
		PPC_STORE_U8(addr - i - 1, simd::extract_u8(simd::to_vec128i(v61), i));
}
	// stvlx128 v62,r0,r7
{
	uint32_t addr = 
ctx.r7.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v62), 15 - i));
}
	// stvrx128 v62,r7,r9
{
	uint32_t addr = 
ctx.r7.u32 + ctx.r9.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < tmp_off; i++)
		PPC_STORE_U8(addr - i - 1, simd::extract_u8(simd::to_vec128i(v62), i));
}
	// addi r7,r7,64
	ctx.r7.s64 = ctx.r7.s64 + 64;
	// stvlx128 v60,r0,r4
{
	uint32_t addr = 
ctx.r4.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v60), 15 - i));
}
	// stvrx128 v60,r4,r9
{
	uint32_t addr = 
ctx.r4.u32 + ctx.r9.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < tmp_off; i++)
		PPC_STORE_U8(addr - i - 1, simd::extract_u8(simd::to_vec128i(v60), i));
}
	// bne 0x830056c0
	if (!cr0.eq) goto loc_830056C0;
	// stw r10,-16(r1)
	PPC_STORE_U32(ctx.r1.u32 + -16, ctx.r10.u32);
loc_83005740:
	// cmplwi cr6,r5,143
	cr6.compare<uint32_t>(ctx.r5.u32, 143, xer);
	// bge cr6,0x830056a8
	if (!cr6.lt) goto loc_830056A8;
	// cmplwi cr6,r5,16
	cr6.compare<uint32_t>(ctx.r5.u32, 16, xer);
	// blt cr6,0x83005774
	if (cr6.lt) goto loc_83005774;
	// rlwinm r8,r5,28,4,31
	ctx.r8.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 28) & 0xFFFFFFF;
loc_83005754:
	// lvx128 v63,r0,r11
	simd::store_shuffled(v63, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// addic. r8,r8,-1
	xer.ca = ctx.r8.u32 > 0;
	ctx.r8.s64 = ctx.r8.s64 + -1;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stvlx128 v63,r0,r10
{
	uint32_t addr = 
ctx.r10.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < (16 - tmp_off); i++)
		PPC_STORE_U8(addr + i, simd::extract_u8(simd::to_vec128i(v63), 15 - i));
}
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// stvrx128 v63,r10,r9
{
	uint32_t addr = 
ctx.r10.u32 + ctx.r9.u32;
	uint32_t tmp_off = addr & 0xF;
	for (size_t i = 0; i < tmp_off; i++)
		PPC_STORE_U8(addr - i - 1, simd::extract_u8(simd::to_vec128i(v63), i));
}
	// addi r5,r5,-16
	ctx.r5.s64 = ctx.r5.s64 + -16;
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// bne 0x83005754
	if (!cr0.eq) goto loc_83005754;
loc_83005774:
	// clrlwi. r9,r11,28
	ctx.r9.u64 = r11.u32 & 0xF;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x830057a0
	if (cr0.eq) goto loc_830057A0;
loc_8300577C:
	// cmplwi cr6,r5,8
	cr6.compare<uint32_t>(ctx.r5.u32, 8, xer);
	// blt cr6,0x830057a0
	if (cr6.lt) goto loc_830057A0;
	// ld r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// addi r5,r5,-8
	ctx.r5.s64 = ctx.r5.s64 + -8;
	// clrlwi. r8,r11,28
	ctx.r8.u64 = r11.u32 & 0xF;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// std r9,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r9.u64);
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// bne 0x8300577c
	if (!cr0.eq) goto loc_8300577C;
loc_830057A0:
	// clrlwi. r9,r11,29
	ctx.r9.u64 = r11.u32 & 0x7;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x830057cc
	if (cr0.eq) goto loc_830057CC;
loc_830057A8:
	// cmplwi cr6,r5,4
	cr6.compare<uint32_t>(ctx.r5.u32, 4, xer);
	// blt cr6,0x830057cc
	if (cr6.lt) goto loc_830057CC;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// addi r5,r5,-4
	ctx.r5.s64 = ctx.r5.s64 + -4;
	// clrlwi. r8,r11,29
	ctx.r8.u64 = r11.u32 & 0x7;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bne 0x830057a8
	if (!cr0.eq) goto loc_830057A8;
loc_830057CC:
	// clrlwi. r9,r11,30
	ctx.r9.u64 = r11.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq 0x830057f8
	if (cr0.eq) goto loc_830057F8;
loc_830057D4:
	// cmplwi cr6,r5,1
	cr6.compare<uint32_t>(ctx.r5.u32, 1, xer);
	// blt cr6,0x830057f8
	if (cr6.lt) goto loc_830057F8;
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r5,r5,-1
	ctx.r5.s64 = ctx.r5.s64 + -1;
	// clrlwi. r8,r11,30
	ctx.r8.u64 = r11.u32 & 0x3;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// stb r9,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// bne 0x830057d4
	if (!cr0.eq) goto loc_830057D4;
loc_830057F8:
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830055C8) {
	__imp__sub_830055C8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83005800) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bb0
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r7
	r28.u64 = ctx.r7.u64;
	// stw r8,348(r1)
	PPC_STORE_U32(ctx.r1.u32 + 348, ctx.r8.u32);
	// mr r21,r9
	r21.u64 = ctx.r9.u64;
	// mr r18,r3
	r18.u64 = ctx.r3.u64;
	// stw r28,340(r1)
	PPC_STORE_U32(ctx.r1.u32 + 340, r28.u32);
	// mr r20,r6
	r20.u64 = ctx.r6.u64;
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// li r14,0
	r14.s64 = 0;
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// bne cr6,0x83005848
	if (!cr6.eq) goto loc_83005848;
	// stw r4,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r4.u32);
	// addi r21,r1,112
	r21.s64 = ctx.r1.s64 + 112;
	// stw r5,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r5.u32);
	// stw r14,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r14.u32);
	// stw r14,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r14.u32);
loc_83005848:
	// lwz r11,8(r21)
	r11.u64 = PPC_LOAD_U32(r21.u32 + 8);
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// lwz r10,0(r21)
	ctx.r10.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// lwz r9,12(r21)
	ctx.r9.u64 = PPC_LOAD_U32(r21.u32 + 12);
	// lwz r8,4(r21)
	ctx.r8.u64 = PPC_LOAD_U32(r21.u32 + 4);
	// subf r17,r10,r11
	r17.s64 = r11.s64 - ctx.r10.s64;
	// subf r26,r8,r9
	r26.s64 = ctx.r9.s64 - ctx.r8.s64;
	// stw r17,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r17.u32);
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r26.u32);
	// bne cr6,0x8300587c
	if (!cr6.eq) goto loc_8300587C;
	// stw r14,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r14.u32);
	// addi r20,r1,104
	r20.s64 = ctx.r1.s64 + 104;
	// stw r14,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r14.u32);
loc_8300587C:
	// addi r11,r4,31
	r11.s64 = ctx.r4.s64 + 31;
	// cmplw cr6,r28,r18
	cr6.compare<uint32_t>(r28.u32, r18.u32, xer);
	// rlwinm r27,r11,0,0,26
	r27.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFE0;
	// bne cr6,0x830058c4
	if (!cr6.eq) goto loc_830058C4;
	// addi r11,r5,31
	r11.s64 = ctx.r5.s64 + 31;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// rlwinm r11,r11,0,0,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFE0;
	// mullw r11,r11,r27
	r11.s64 = int64_t(r11.s32) * int64_t(r27.s32);
	// mullw r11,r11,r31
	r11.s64 = int64_t(r11.s32) * int64_t(r31.s32);
	// addi r11,r11,4095
	r11.s64 = r11.s64 + 4095;
	// rlwinm r30,r11,0,0,19
	r30.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFF000;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821f4d88
	sub_821F4D88(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// bl 0x830055c8
	sub_830055C8(ctx, base);
	// b 0x830058c8
	goto loc_830058C8;
loc_830058C4:
	// mr r19,r28
	r19.u64 = r28.u64;
loc_830058C8:
	// rlwinm r10,r31,30,2,31
	ctx.r10.u64 = rotl64(r31.u32 | (r31.u64 << 32), 30) & 0x3FFFFFFF;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// rlwinm r9,r31,28,4,31
	ctx.r9.u64 = rotl64(r31.u32 | (r31.u64 << 32), 28) & 0xFFFFFFF;
	// li r8,1
	ctx.r8.s64 = 1;
	// subf r9,r10,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r10.s64;
	// rlwinm r7,r31,31,1,31
	ctx.r7.u64 = rotl64(r31.u32 | (r31.u64 << 32), 31) & 0x7FFFFFFF;
	// addi r6,r9,3
	ctx.r6.s64 = ctx.r9.s64 + 3;
	// srw r9,r7,r10
	ctx.r9.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r7.u32 >> (ctx.r10.u8 & 0x3F));
	// slw r8,r8,r6
	ctx.r8.u64 = ctx.r6.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r6.u8 & 0x3F));
	// add r7,r11,r8
	ctx.r7.u64 = r11.u64 + ctx.r8.u64;
	// stw r8,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r8.u32);
	// addi r6,r8,-1
	ctx.r6.s64 = ctx.r8.s64 + -1;
	// add r5,r11,r17
	ctx.r5.u64 = r11.u64 + r17.u64;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// andc r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 & ~ctx.r6.u64;
	// add r29,r9,r10
	r29.u64 = ctx.r9.u64 + ctx.r10.u64;
	// andc r10,r5,r8
	ctx.r10.u64 = ctx.r5.u64 & ~ctx.r8.u64;
	// subf r15,r11,r7
	r15.s64 = ctx.r7.s64 - r11.s64;
	// subf r16,r11,r10
	r16.s64 = ctx.r10.s64 - r11.s64;
	// addi r30,r29,6
	r30.s64 = r29.s64 + 6;
	// cmplw cr6,r15,r17
	cr6.compare<uint32_t>(r15.u32, r17.u32, xer);
	// mr r11,r17
	r11.u64 = r17.u64;
	// bgt cr6,0x83005928
	if (cr6.gt) goto loc_83005928;
	// mr r11,r15
	r11.u64 = r15.u64;
loc_83005928:
	// slw r11,r11,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (r11.u32 << (r29.u8 & 0x3F));
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x83005bb4
	if (cr6.eq) goto loc_83005BB4;
	// rlwinm r11,r27,27,5,31
	r11.u64 = rotl64(r27.u32 | (r27.u64 << 32), 27) & 0x7FFFFFF;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
loc_83005940:
	// lwz r11,4(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 4);
	// lwz r8,0(r20)
	ctx.r8.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// clrlwi r10,r8,29
	ctx.r10.u64 = ctx.r8.u32 & 0x7;
	// lwz r7,4(r21)
	ctx.r7.u64 = PPC_LOAD_U32(r21.u32 + 4);
	// rlwinm r28,r11,2,27,28
	r28.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x18;
	// lwz r4,0(r21)
	ctx.r4.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// rlwinm r6,r11,27,5,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// lwz r3,348(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// add r31,r10,r28
	r31.u64 = ctx.r10.u64 + r28.u64;
	// lwz r5,88(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mullw r27,r6,r9
	r27.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r9.s32);
	// rlwinm r10,r8,27,5,31
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x7FFFFFF;
	// slw r9,r31,r30
	ctx.r9.u64 = r30.u8 & 0x20 ? 0 : (r31.u32 << (r30.u8 & 0x3F));
	// add r10,r10,r27
	ctx.r10.u64 = ctx.r10.u64 + r27.u64;
	// rlwinm r6,r9,26,6,31
	ctx.r6.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 26) & 0x3FFFFFF;
	// slw r10,r10,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// clrlwi r10,r10,3
	ctx.r10.u64 = ctx.r10.u32 & 0x1FFFFFFF;
	// rlwinm r9,r6,0,0,27
	ctx.r9.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFFF0;
	// rlwinm r31,r11,29,31,31
	r31.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// clrlwi r9,r6,28
	ctx.r9.u64 = ctx.r6.u32 & 0xF;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// slw r25,r31,r30
	r25.u64 = r30.u8 & 0x20 ? 0 : (r31.u32 << (r30.u8 & 0x3F));
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r26,r11,30,30,30
	r26.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0x2;
	// rlwinm r9,r8,29,3,31
	ctx.r9.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r24,r11,4,27,27
	r24.u64 = rotl64(r11.u32 | (r11.u64 << 32), 4) & 0x10;
	// add r10,r10,r25
	ctx.r10.u64 = ctx.r10.u64 + r25.u64;
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// rlwinm r23,r11,28,31,31
	r23.u64 = rotl64(r11.u32 | (r11.u64 << 32), 28) & 0x1;
	// add r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 + r24.u64;
	// rlwinm r11,r9,1,29,30
	r11.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x6;
	// srawi r9,r10,6
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3F) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 6;
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// clrlwi r6,r9,29
	ctx.r6.u64 = ctx.r9.u32 & 0x7;
	// rlwinm r9,r11,3,28,28
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0x8;
	// rlwinm r8,r11,0,0,30
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// add r11,r9,r6
	r11.u64 = ctx.r9.u64 + ctx.r6.u64;
	// rlwinm r9,r10,0,0,22
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFE00;
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r7,r14,r7
	ctx.r7.u64 = r14.u64 + ctx.r7.u64;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// slw r8,r4,r29
	ctx.r8.u64 = r29.u8 & 0x20 ? 0 : (ctx.r4.u32 << (r29.u8 & 0x3F));
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mullw r22,r7,r3
	r22.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r3.s32);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// clrlwi r9,r10,26
	ctx.r9.u64 = ctx.r10.u32 & 0x3F;
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r8,r22
	ctx.r10.u64 = ctx.r8.u64 + r22.u64;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// add r4,r10,r19
	ctx.r4.u64 = ctx.r10.u64 + r19.u64;
	// add r3,r11,r18
	ctx.r3.u64 = r11.u64 + r18.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// mr r31,r15
	r31.u64 = r15.u64;
	// cmpw cr6,r15,r16
	cr6.compare<int32_t>(r15.s32, r16.s32, xer);
	// bge cr6,0x83005aec
	if (!cr6.lt) goto loc_83005AEC;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// slw r17,r11,r29
	r17.u64 = r29.u8 & 0x20 ? 0 : (r11.u32 << (r29.u8 & 0x3F));
loc_83005A30:
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// lwz r10,0(r21)
	ctx.r10.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// add r4,r10,r31
	ctx.r4.u64 = ctx.r10.u64 + r31.u64;
	// clrlwi r9,r11,29
	ctx.r9.u64 = r11.u32 & 0x7;
	// rlwinm r10,r11,27,5,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// add r9,r9,r28
	ctx.r9.u64 = ctx.r9.u64 + r28.u64;
	// add r10,r10,r27
	ctx.r10.u64 = ctx.r10.u64 + r27.u64;
	// slw r9,r9,r30
	ctx.r9.u64 = r30.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r30.u8 & 0x3F));
	// rlwinm r7,r9,26,6,31
	ctx.r7.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 26) & 0x3FFFFFF;
	// slw r10,r10,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// clrlwi r9,r10,3
	ctx.r9.u64 = ctx.r10.u32 & 0x1FFFFFFF;
	// rlwinm r8,r7,0,0,27
	ctx.r8.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0xFFFFFFF0;
	// clrlwi r10,r7,28
	ctx.r10.u64 = ctx.r7.u32 & 0xF;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// rlwinm r9,r11,29,3,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r11,r8,1,0,30
	r11.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r9,1,29,30
	ctx.r10.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x6;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// rlwinm r8,r10,3,28,28
	ctx.r8.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0x8;
	// srawi r9,r11,6
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3F) != 0);
	ctx.r9.s64 = r11.s32 >> 6;
	// rlwinm r6,r10,0,0,30
	ctx.r6.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// clrlwi r10,r9,29
	ctx.r10.u64 = ctx.r9.u32 & 0x7;
	// rlwinm r9,r11,0,0,22
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFE00;
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// clrlwi r10,r11,26
	ctx.r10.u64 = r11.u32 & 0x3F;
	// rlwinm r7,r8,3,0,28
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// slw r8,r4,r29
	ctx.r8.u64 = r29.u8 & 0x20 ? 0 : (ctx.r4.u32 << (r29.u8 & 0x3F));
	// add r11,r7,r6
	r11.u64 = ctx.r7.u64 + ctx.r6.u64;
	// add r8,r8,r22
	ctx.r8.u64 = ctx.r8.u64 + r22.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r8,r19
	ctx.r4.u64 = ctx.r8.u64 + r19.u64;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r3,r11,r18
	ctx.r3.u64 = r11.u64 + r18.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r31,r31,r11
	r31.u64 = r31.u64 + r11.u64;
	// cmpw cr6,r31,r16
	cr6.compare<int32_t>(r31.s32, r16.s32, xer);
	// blt cr6,0x83005a30
	if (cr6.lt) goto loc_83005A30;
	// lwz r17,92(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_83005AEC:
	// cmplw cr6,r31,r17
	cr6.compare<uint32_t>(r31.u32, r17.u32, xer);
	// bge cr6,0x83005ba0
	if (!cr6.lt) goto loc_83005BA0;
	// lwz r11,0(r20)
	r11.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// subf r5,r31,r17
	ctx.r5.s64 = r17.s64 - r31.s64;
	// lwz r10,0(r21)
	ctx.r10.u64 = PPC_LOAD_U32(r21.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// add r7,r10,r31
	ctx.r7.u64 = ctx.r10.u64 + r31.u64;
	// clrlwi r9,r11,29
	ctx.r9.u64 = r11.u32 & 0x7;
	// rlwinm r10,r11,27,5,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// add r9,r9,r28
	ctx.r9.u64 = ctx.r9.u64 + r28.u64;
	// add r10,r10,r27
	ctx.r10.u64 = ctx.r10.u64 + r27.u64;
	// slw r9,r9,r30
	ctx.r9.u64 = r30.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r30.u8 & 0x3F));
	// rlwinm r6,r9,26,6,31
	ctx.r6.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 26) & 0x3FFFFFF;
	// slw r10,r10,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// clrlwi r9,r10,3
	ctx.r9.u64 = ctx.r10.u32 & 0x1FFFFFFF;
	// rlwinm r8,r6,0,0,27
	ctx.r8.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFFF0;
	// clrlwi r10,r6,28
	ctx.r10.u64 = ctx.r6.u32 & 0xF;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// rlwinm r9,r11,29,3,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r11,r8,1,0,30
	r11.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r9,r26
	ctx.r9.u64 = ctx.r9.u64 + r26.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r9,1,29,30
	ctx.r10.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x6;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// rlwinm r9,r10,3,28,28
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0x8;
	// srawi r8,r11,6
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3F) != 0);
	ctx.r8.s64 = r11.s32 >> 6;
	// rlwinm r6,r10,0,0,30
	ctx.r6.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// clrlwi r10,r8,29
	ctx.r10.u64 = ctx.r8.u32 & 0x7;
	// rlwinm r8,r11,0,0,22
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFE00;
	// add r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 + ctx.r10.u64;
	// slw r9,r7,r29
	ctx.r9.u64 = r29.u8 & 0x20 ? 0 : (ctx.r7.u32 << (r29.u8 & 0x3F));
	// rlwinm r7,r10,3,0,28
	ctx.r7.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// clrlwi r10,r11,26
	ctx.r10.u64 = r11.u32 & 0x3F;
	// add r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 + ctx.r6.u64;
	// add r11,r9,r22
	r11.u64 = ctx.r9.u64 + r22.u64;
	// rlwinm r9,r7,2,0,29
	ctx.r9.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r11,r19
	ctx.r4.u64 = r11.u64 + r19.u64;
	// add r11,r9,r8
	r11.u64 = ctx.r9.u64 + ctx.r8.u64;
	// slw r5,r5,r29
	ctx.r5.u64 = r29.u8 & 0x20 ? 0 : (ctx.r5.u32 << (r29.u8 & 0x3F));
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r3,r11,r18
	ctx.r3.u64 = r11.u64 + r18.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
loc_83005BA0:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// cmplw cr6,r14,r11
	cr6.compare<uint32_t>(r14.u32, r11.u32, xer);
	// blt cr6,0x83005940
	if (cr6.lt) goto loc_83005940;
	// lwz r28,340(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + 340);
loc_83005BB4:
	// cmplw cr6,r28,r18
	cr6.compare<uint32_t>(r28.u32, r18.u32, xer);
	// bne cr6,0x83005bc8
	if (!cr6.eq) goto loc_83005BC8;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r19
	ctx.r3.u64 = r19.u64;
	// bl 0x821f5f18
	sub_821F5F18(ctx, base);
loc_83005BC8:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x82ca2c00
	return;
}

PPC_WEAK_FUNC(sub_83005800) {
	__imp__sub_83005800(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83005BD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r14{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bb0
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r6
	r27.u64 = ctx.r6.u64;
	// stw r4,316(r1)
	PPC_STORE_U32(ctx.r1.u32 + 316, ctx.r4.u32);
	// mr r28,r9
	r28.u64 = ctx.r9.u64;
	// mr r18,r3
	r18.u64 = ctx.r3.u64;
	// stw r27,332(r1)
	PPC_STORE_U32(ctx.r1.u32 + 332, r27.u32);
	// mr r20,r5
	r20.u64 = ctx.r5.u64;
	// mr r31,r10
	r31.u64 = ctx.r10.u64;
	// li r14,0
	r14.s64 = 0;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// bne cr6,0x83005c18
	if (!cr6.eq) goto loc_83005C18;
	// stw r7,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r7.u32);
	// addi r28,r1,112
	r28.s64 = ctx.r1.s64 + 112;
	// stw r8,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r8.u32);
	// stw r14,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r14.u32);
	// stw r14,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r14.u32);
loc_83005C18:
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 8);
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r9,12(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + 12);
	// lwz r6,4(r28)
	ctx.r6.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// subf r17,r10,r11
	r17.s64 = r11.s64 - ctx.r10.s64;
	// subf r25,r6,r9
	r25.s64 = ctx.r9.s64 - ctx.r6.s64;
	// stw r17,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r17.u32);
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r25.u32);
	// bne cr6,0x83005c4c
	if (!cr6.eq) goto loc_83005C4C;
	// stw r14,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r14.u32);
	// addi r20,r1,104
	r20.s64 = ctx.r1.s64 + 104;
	// stw r14,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r14.u32);
loc_83005C4C:
	// addi r11,r7,31
	r11.s64 = ctx.r7.s64 + 31;
	// cmplw cr6,r27,r18
	cr6.compare<uint32_t>(r27.u32, r18.u32, xer);
	// rlwinm r26,r11,0,0,26
	r26.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFE0;
	// bne cr6,0x83005c94
	if (!cr6.eq) goto loc_83005C94;
	// addi r11,r8,31
	r11.s64 = ctx.r8.s64 + 31;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// rlwinm r11,r11,0,0,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFE0;
	// mullw r11,r11,r26
	r11.s64 = int64_t(r11.s32) * int64_t(r26.s32);
	// mullw r11,r11,r31
	r11.s64 = int64_t(r11.s32) * int64_t(r31.s32);
	// addi r11,r11,4095
	r11.s64 = r11.s64 + 4095;
	// rlwinm r30,r11,0,0,19
	r30.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFF000;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x821f4d88
	sub_821F4D88(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r19,r3
	r19.u64 = ctx.r3.u64;
	// bl 0x830055c8
	sub_830055C8(ctx, base);
	// b 0x83005c98
	goto loc_83005C98;
loc_83005C94:
	// mr r19,r27
	r19.u64 = r27.u64;
loc_83005C98:
	// rlwinm r10,r31,30,2,31
	ctx.r10.u64 = rotl64(r31.u32 | (r31.u64 << 32), 30) & 0x3FFFFFFF;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// rlwinm r9,r31,28,4,31
	ctx.r9.u64 = rotl64(r31.u32 | (r31.u64 << 32), 28) & 0xFFFFFFF;
	// li r8,1
	ctx.r8.s64 = 1;
	// subf r9,r10,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r10.s64;
	// rlwinm r7,r31,31,1,31
	ctx.r7.u64 = rotl64(r31.u32 | (r31.u64 << 32), 31) & 0x7FFFFFFF;
	// addi r6,r9,3
	ctx.r6.s64 = ctx.r9.s64 + 3;
	// srw r9,r7,r10
	ctx.r9.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r7.u32 >> (ctx.r10.u8 & 0x3F));
	// slw r8,r8,r6
	ctx.r8.u64 = ctx.r6.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r6.u8 & 0x3F));
	// add r7,r11,r8
	ctx.r7.u64 = r11.u64 + ctx.r8.u64;
	// stw r8,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r8.u32);
	// addi r6,r8,-1
	ctx.r6.s64 = ctx.r8.s64 + -1;
	// add r5,r11,r17
	ctx.r5.u64 = r11.u64 + r17.u64;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// andc r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 & ~ctx.r6.u64;
	// add r29,r9,r10
	r29.u64 = ctx.r9.u64 + ctx.r10.u64;
	// andc r10,r5,r8
	ctx.r10.u64 = ctx.r5.u64 & ~ctx.r8.u64;
	// subf r15,r11,r7
	r15.s64 = ctx.r7.s64 - r11.s64;
	// subf r16,r11,r10
	r16.s64 = ctx.r10.s64 - r11.s64;
	// addi r30,r29,6
	r30.s64 = r29.s64 + 6;
	// cmplw cr6,r15,r17
	cr6.compare<uint32_t>(r15.u32, r17.u32, xer);
	// mr r11,r17
	r11.u64 = r17.u64;
	// bgt cr6,0x83005cf8
	if (cr6.gt) goto loc_83005CF8;
	// mr r11,r15
	r11.u64 = r15.u64;
loc_83005CF8:
	// slw r11,r11,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (r11.u32 << (r29.u8 & 0x3F));
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r11.u32);
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x83005f84
	if (cr6.eq) goto loc_83005F84;
	// rlwinm r11,r26,27,5,31
	r11.u64 = rotl64(r26.u32 | (r26.u64 << 32), 27) & 0x7FFFFFF;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
loc_83005D10:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 4);
	// lwz r8,0(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// add r11,r14,r11
	r11.u64 = r14.u64 + r11.u64;
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// clrlwi r10,r8,29
	ctx.r10.u64 = ctx.r8.u32 & 0x7;
	// lwz r7,4(r20)
	ctx.r7.u64 = PPC_LOAD_U32(r20.u32 + 4);
	// rlwinm r27,r11,2,27,28
	r27.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x18;
	// lwz r4,0(r20)
	ctx.r4.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// rlwinm r6,r11,27,5,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// lwz r3,316(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 316);
	// add r31,r10,r27
	r31.u64 = ctx.r10.u64 + r27.u64;
	// lwz r5,88(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// mullw r26,r6,r9
	r26.s64 = int64_t(ctx.r6.s32) * int64_t(ctx.r9.s32);
	// rlwinm r10,r8,27,5,31
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x7FFFFFF;
	// slw r9,r31,r30
	ctx.r9.u64 = r30.u8 & 0x20 ? 0 : (r31.u32 << (r30.u8 & 0x3F));
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// rlwinm r6,r9,26,6,31
	ctx.r6.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 26) & 0x3FFFFFF;
	// slw r10,r10,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// clrlwi r10,r10,3
	ctx.r10.u64 = ctx.r10.u32 & 0x1FFFFFFF;
	// rlwinm r9,r6,0,0,27
	ctx.r9.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFFF0;
	// rlwinm r31,r11,29,31,31
	r31.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// clrlwi r9,r6,28
	ctx.r9.u64 = ctx.r6.u32 & 0xF;
	// rlwinm r10,r10,1,0,30
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// rlwinm r25,r11,30,30,30
	r25.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0x2;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r8,29,3,31
	ctx.r9.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 29) & 0x1FFFFFFF;
	// slw r24,r31,r30
	r24.u64 = r30.u8 & 0x20 ? 0 : (r31.u32 << (r30.u8 & 0x3F));
	// rlwinm r23,r11,4,27,27
	r23.u64 = rotl64(r11.u32 | (r11.u64 << 32), 4) & 0x10;
	// add r9,r9,r25
	ctx.r9.u64 = ctx.r9.u64 + r25.u64;
	// add r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 + r24.u64;
	// rlwinm r22,r11,28,31,31
	r22.u64 = rotl64(r11.u32 | (r11.u64 << 32), 28) & 0x1;
	// add r10,r10,r23
	ctx.r10.u64 = ctx.r10.u64 + r23.u64;
	// rlwinm r11,r9,1,29,30
	r11.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x6;
	// srawi r9,r10,6
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x3F) != 0);
	ctx.r9.s64 = ctx.r10.s32 >> 6;
	// add r11,r11,r22
	r11.u64 = r11.u64 + r22.u64;
	// clrlwi r6,r9,29
	ctx.r6.u64 = ctx.r9.u32 & 0x7;
	// rlwinm r8,r11,3,28,28
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0x8;
	// rlwinm r9,r11,0,0,30
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFE;
	// add r11,r8,r6
	r11.u64 = ctx.r8.u64 + ctx.r6.u64;
	// rlwinm r8,r10,0,0,22
	ctx.r8.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFE00;
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r7,r7,r14
	ctx.r7.u64 = ctx.r7.u64 + r14.u64;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// clrlwi r9,r10,26
	ctx.r9.u64 = ctx.r10.u32 & 0x3F;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mullw r21,r7,r3
	r21.s64 = int64_t(ctx.r7.s32) * int64_t(ctx.r3.s32);
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// slw r10,r4,r29
	ctx.r10.u64 = r29.u8 & 0x20 ? 0 : (ctx.r4.u32 << (r29.u8 & 0x3F));
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r10,r10,r21
	ctx.r10.u64 = ctx.r10.u64 + r21.u64;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// add r3,r10,r18
	ctx.r3.u64 = ctx.r10.u64 + r18.u64;
	// add r4,r11,r19
	ctx.r4.u64 = r11.u64 + r19.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// mr r31,r15
	r31.u64 = r15.u64;
	// cmpw cr6,r15,r16
	cr6.compare<int32_t>(r15.s32, r16.s32, xer);
	// bge cr6,0x83005ebc
	if (!cr6.lt) goto loc_83005EBC;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// slw r17,r11,r29
	r17.u64 = r29.u8 & 0x20 ? 0 : (r11.u32 << (r29.u8 & 0x3F));
loc_83005E00:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// mr r5,r17
	ctx.r5.u64 = r17.u64;
	// lwz r10,0(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// add r6,r10,r31
	ctx.r6.u64 = ctx.r10.u64 + r31.u64;
	// clrlwi r9,r11,29
	ctx.r9.u64 = r11.u32 & 0x7;
	// rlwinm r10,r11,27,5,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// add r9,r9,r27
	ctx.r9.u64 = ctx.r9.u64 + r27.u64;
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// slw r9,r9,r30
	ctx.r9.u64 = r30.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r30.u8 & 0x3F));
	// rlwinm r7,r9,26,6,31
	ctx.r7.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 26) & 0x3FFFFFF;
	// slw r10,r10,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// clrlwi r9,r10,3
	ctx.r9.u64 = ctx.r10.u32 & 0x1FFFFFFF;
	// rlwinm r8,r7,0,0,27
	ctx.r8.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0xFFFFFFF0;
	// clrlwi r10,r7,28
	ctx.r10.u64 = ctx.r7.u32 & 0xF;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// rlwinm r9,r11,29,3,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r11,r8,1,0,30
	r11.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r9,r25
	ctx.r9.u64 = ctx.r9.u64 + r25.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r9,1,29,30
	ctx.r10.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x6;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// add r10,r10,r22
	ctx.r10.u64 = ctx.r10.u64 + r22.u64;
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// rlwinm r8,r10,3,28,28
	ctx.r8.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0x8;
	// srawi r9,r11,6
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3F) != 0);
	ctx.r9.s64 = r11.s32 >> 6;
	// rlwinm r7,r10,0,0,30
	ctx.r7.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// clrlwi r10,r9,29
	ctx.r10.u64 = ctx.r9.u32 & 0x7;
	// rlwinm r9,r11,0,0,22
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFE00;
	// add r8,r8,r10
	ctx.r8.u64 = ctx.r8.u64 + ctx.r10.u64;
	// clrlwi r10,r11,26
	ctx.r10.u64 = r11.u32 & 0x3F;
	// rlwinm r8,r8,3,0,28
	ctx.r8.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 3) & 0xFFFFFFF8;
	// slw r11,r6,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (ctx.r6.u32 << (r29.u8 & 0x3F));
	// add r7,r8,r7
	ctx.r7.u64 = ctx.r8.u64 + ctx.r7.u64;
	// add r8,r11,r21
	ctx.r8.u64 = r11.u64 + r21.u64;
	// rlwinm r11,r7,2,0,29
	r11.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r8,r18
	ctx.r3.u64 = ctx.r8.u64 + r18.u64;
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r4,r11,r19
	ctx.r4.u64 = r11.u64 + r19.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r31,r31,r11
	r31.u64 = r31.u64 + r11.u64;
	// cmpw cr6,r31,r16
	cr6.compare<int32_t>(r31.s32, r16.s32, xer);
	// blt cr6,0x83005e00
	if (cr6.lt) goto loc_83005E00;
	// lwz r17,92(r1)
	r17.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_83005EBC:
	// cmplw cr6,r31,r17
	cr6.compare<uint32_t>(r31.u32, r17.u32, xer);
	// bge cr6,0x83005f70
	if (!cr6.lt) goto loc_83005F70;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// subf r6,r31,r17
	ctx.r6.s64 = r17.s64 - r31.s64;
	// lwz r10,0(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// add r5,r10,r31
	ctx.r5.u64 = ctx.r10.u64 + r31.u64;
	// clrlwi r9,r11,29
	ctx.r9.u64 = r11.u32 & 0x7;
	// rlwinm r10,r11,27,5,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x7FFFFFF;
	// add r9,r9,r27
	ctx.r9.u64 = ctx.r9.u64 + r27.u64;
	// add r10,r10,r26
	ctx.r10.u64 = ctx.r10.u64 + r26.u64;
	// slw r9,r9,r30
	ctx.r9.u64 = r30.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r30.u8 & 0x3F));
	// rlwinm r7,r9,26,6,31
	ctx.r7.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 26) & 0x3FFFFFF;
	// slw r10,r10,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r30.u8 & 0x3F));
	// clrlwi r9,r10,3
	ctx.r9.u64 = ctx.r10.u32 & 0x1FFFFFFF;
	// rlwinm r8,r7,0,0,27
	ctx.r8.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0xFFFFFFF0;
	// clrlwi r10,r7,28
	ctx.r10.u64 = ctx.r7.u32 & 0xF;
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// rlwinm r9,r11,29,3,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r11,r8,1,0,30
	r11.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r9,r25
	ctx.r9.u64 = ctx.r9.u64 + r25.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r10,r9,1,29,30
	ctx.r10.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0x6;
	// add r11,r11,r24
	r11.u64 = r11.u64 + r24.u64;
	// add r10,r10,r22
	ctx.r10.u64 = ctx.r10.u64 + r22.u64;
	// add r11,r11,r23
	r11.u64 = r11.u64 + r23.u64;
	// rlwinm r9,r10,3,28,28
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0x8;
	// srawi r8,r11,6
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3F) != 0);
	ctx.r8.s64 = r11.s32 >> 6;
	// rlwinm r7,r10,0,0,30
	ctx.r7.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFE;
	// clrlwi r10,r8,29
	ctx.r10.u64 = ctx.r8.u32 & 0x7;
	// rlwinm r8,r11,0,0,22
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFE00;
	// add r9,r9,r10
	ctx.r9.u64 = ctx.r9.u64 + ctx.r10.u64;
	// clrlwi r10,r11,26
	ctx.r10.u64 = r11.u32 & 0x3F;
	// rlwinm r9,r9,3,0,28
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// slw r11,r5,r29
	r11.u64 = r29.u8 & 0x20 ? 0 : (ctx.r5.u32 << (r29.u8 & 0x3F));
	// add r9,r9,r7
	ctx.r9.u64 = ctx.r9.u64 + ctx.r7.u64;
	// add r11,r11,r21
	r11.u64 = r11.u64 + r21.u64;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r18
	ctx.r3.u64 = r11.u64 + r18.u64;
	// add r11,r9,r8
	r11.u64 = ctx.r9.u64 + ctx.r8.u64;
	// slw r5,r6,r29
	ctx.r5.u64 = r29.u8 & 0x20 ? 0 : (ctx.r6.u32 << (r29.u8 & 0x3F));
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// add r4,r11,r19
	ctx.r4.u64 = r11.u64 + r19.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
loc_83005F70:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r14,r14,1
	r14.s64 = r14.s64 + 1;
	// cmplw cr6,r14,r11
	cr6.compare<uint32_t>(r14.u32, r11.u32, xer);
	// blt cr6,0x83005d10
	if (cr6.lt) goto loc_83005D10;
	// lwz r27,332(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
loc_83005F84:
	// cmplw cr6,r27,r18
	cr6.compare<uint32_t>(r27.u32, r18.u32, xer);
	// bne cr6,0x83005f98
	if (!cr6.eq) goto loc_83005F98;
	// lis r4,9351
	ctx.r4.s64 = 612827136;
	// mr r3,r19
	ctx.r3.u64 = r19.u64;
	// bl 0x821f5f18
	sub_821F5F18(ctx, base);
loc_83005F98:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// b 0x82ca2c00
	return;
}

PPC_WEAK_FUNC(sub_83005BD0) {
	__imp__sub_83005BD0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83005FA0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bc8
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r10,8
	ctx.r10.s64 = 8;
	// li r11,2
	r11.s64 = 2;
	// li r9,4
	ctx.r9.s64 = 4;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// cntlzw r8,r27
	ctx.r8.u64 = r27.u32 == 0 ? 32 : __builtin_clz(r27.u32);
	// stw r9,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r9.u32);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// subfic r10,r8,31
	xer.ca = ctx.r8.u32 <= 31;
	ctx.r10.s64 = 31 - ctx.r8.s64;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r11.u32);
	// rlwinm r4,r10,2,0,29
	ctx.r4.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// stw r11,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r11.u32);
	// subfic r11,r10,7
	xer.ca = ctx.r10.u32 <= 7;
	r11.s64 = 7 - ctx.r10.s64;
	// stw r9,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r9.u32);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// slw r11,r6,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r6.u32 << (r11.u8 & 0x3F));
	// addi r10,r30,-1
	ctx.r10.s64 = r30.s64 + -1;
	// lwzx r31,r4,r7
	r31.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r7.u32);
	// addi r11,r11,31
	r11.s64 = r11.s64 + 31;
	// rlwinm r20,r10,0,0,26
	r20.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFE0;
	// add r10,r31,r30
	ctx.r10.u64 = r31.u64 + r30.u64;
	// rlwinm r11,r11,0,0,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFE0;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r8,r28,-1
	ctx.r8.s64 = r28.s64 + -1;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// divwu r10,r10,r31
	ctx.r10.u32 = ctx.r10.u32 / r31.u32;
	// andc r29,r8,r11
	r29.u64 = ctx.r8.u64 & ~r11.u64;
	// lwzx r25,r4,r5
	r25.u64 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r5.u32);
	// twllei r31,0
	// mullw r22,r10,r31
	r22.s64 = int64_t(ctx.r10.s32) * int64_t(r31.s32);
	// li r24,0
	r24.s64 = 0;
	// cmplw cr6,r29,r28
	cr6.compare<uint32_t>(r29.u32, r28.u32, xer);
	// bge cr6,0x830060a4
	if (!cr6.lt) goto loc_830060A4;
	// add r11,r29,r25
	r11.u64 = r29.u64 + r25.u64;
	// addi r23,r11,-1
	r23.s64 = r11.s64 + -1;
loc_83006058:
	// mr r26,r20
	r26.u64 = r20.u64;
	// cmplw cr6,r20,r30
	cr6.compare<uint32_t>(r20.u32, r30.u32, xer);
	// bge cr6,0x83006094
	if (!cr6.lt) goto loc_83006094;
	// addi r21,r31,-1
	r21.s64 = r31.s64 + -1;
loc_83006068:
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// add r3,r21,r26
	ctx.r3.u64 = r21.u64 + r26.u64;
	// bl 0x83005528
	sub_83005528(ctx, base);
	// cmplw cr6,r24,r3
	cr6.compare<uint32_t>(r24.u32, ctx.r3.u32, xer);
	// bgt cr6,0x83006088
	if (cr6.gt) goto loc_83006088;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
loc_83006088:
	// add r26,r26,r31
	r26.u64 = r26.u64 + r31.u64;
	// cmplw cr6,r26,r30
	cr6.compare<uint32_t>(r26.u32, r30.u32, xer);
	// blt cr6,0x83006068
	if (cr6.lt) goto loc_83006068;
loc_83006094:
	// add r29,r29,r25
	r29.u64 = r29.u64 + r25.u64;
	// add r23,r23,r25
	r23.u64 = r23.u64 + r25.u64;
	// cmplw cr6,r29,r28
	cr6.compare<uint32_t>(r29.u32, r28.u32, xer);
	// blt cr6,0x83006058
	if (cr6.lt) goto loc_83006058;
loc_830060A4:
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82ca2c18
	return;
}

PPC_WEAK_FUNC(sub_83005FA0) {
	__imp__sub_83005FA0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830060B0) {
	PPC_FUNC_PROLOGUE();
	// b 0x83005800
	sub_83005800(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_830060B0) {
	__imp__sub_830060B0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830060B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bc4
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// mr r21,r8
	r21.u64 = ctx.r8.u64;
	// mr r24,r9
	r24.u64 = ctx.r9.u64;
	// mr r20,r10
	r20.u64 = ctx.r10.u64;
	// bl 0x8300a370
	sub_8300A370(ctx, base);
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r3,1
	ctx.r3.s64 = 1;
	// cntlzw r10,r7
	ctx.r10.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// addi r8,r11,-1224
	ctx.r8.s64 = r11.s64 + -1224;
	// cntlzw r9,r4
	ctx.r9.u64 = ctx.r4.u32 == 0 ? 32 : __builtin_clz(ctx.r4.u32);
	// subfic r11,r10,31
	xer.ca = ctx.r10.u32 <= 31;
	r11.s64 = 31 - ctx.r10.s64;
	// subfic r6,r9,31
	xer.ca = ctx.r9.u32 <= 31;
	ctx.r6.s64 = 31 - ctx.r9.s64;
	// rlwinm r9,r26,0,30,30
	ctx.r9.u64 = rotl64(r26.u32 | (r26.u64 << 32), 0) & 0x2;
	// add r5,r6,r11
	ctx.r5.u64 = ctx.r6.u64 + r11.u64;
	// rlwinm r10,r26,31,31,31
	ctx.r10.u64 = rotl64(r26.u32 | (r26.u64 << 32), 31) & 0x1;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// lbzx r8,r25,r8
	ctx.r8.u64 = PPC_LOAD_U8(r25.u32 + ctx.r8.u32);
	// slw r8,r8,r5
	ctx.r8.u64 = ctx.r5.u8 & 0x20 ? 0 : (ctx.r8.u32 << (ctx.r5.u8 & 0x3F));
	// rlwinm r19,r8,29,3,31
	r19.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 29) & 0x1FFFFFFF;
	// beq cr6,0x830061a0
	if (cr6.eq) goto loc_830061A0;
	// subf r8,r9,r27
	ctx.r8.s64 = r27.s64 - ctx.r9.s64;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// cntlzw r8,r8
	ctx.r8.u64 = ctx.r8.u32 == 0 ? 32 : __builtin_clz(ctx.r8.u32);
	// subf r8,r8,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r8.s64;
	// addi r8,r8,32
	ctx.r8.s64 = ctx.r8.s64 + 32;
	// slw r8,r3,r8
	ctx.r8.u64 = ctx.r8.u8 & 0x20 ? 0 : (ctx.r3.u32 << (ctx.r8.u8 & 0x3F));
	// sraw r8,r8,r31
	temp.u32 = r31.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r8.s32 < 0) & (((ctx.r8.s32 >> temp.u32) << temp.u32) != ctx.r8.s32);
	ctx.r8.s64 = ctx.r8.s32 >> temp.u32;
	// cmpwi cr6,r8,1
	cr6.compare<int32_t>(ctx.r8.s32, 1, xer);
	// mr r5,r8
	ctx.r5.u64 = ctx.r8.u64;
	// bgt cr6,0x83006164
	if (cr6.gt) goto loc_83006164;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
loc_83006164:
	// subf r8,r9,r30
	ctx.r8.s64 = r30.s64 - ctx.r9.s64;
	// addi r29,r8,-1
	r29.s64 = ctx.r8.s64 + -1;
	// add r8,r5,r7
	ctx.r8.u64 = ctx.r5.u64 + ctx.r7.u64;
	// cntlzw r5,r29
	ctx.r5.u64 = r29.u32 == 0 ? 32 : __builtin_clz(r29.u32);
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// subf r10,r5,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r5.s64;
	// srw r22,r8,r11
	r22.u64 = r11.u8 & 0x20 ? 0 : (ctx.r8.u32 >> (r11.u8 & 0x3F));
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// slw r10,r3,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r3.u32 << (ctx.r10.u8 & 0x3F));
	// sraw r10,r10,r31
	temp.u32 = r31.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r10.s32 < 0) & (((ctx.r10.s32 >> temp.u32) << temp.u32) != ctx.r10.s32);
	ctx.r10.s64 = ctx.r10.s32 >> temp.u32;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bgt cr6,0x83006198
	if (cr6.gt) goto loc_83006198;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
loc_83006198:
	// add r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 + ctx.r4.u64;
	// b 0x830061b0
	goto loc_830061B0;
loc_830061A0:
	// add r8,r7,r27
	ctx.r8.u64 = ctx.r7.u64 + r27.u64;
	// add r10,r4,r30
	ctx.r10.u64 = ctx.r4.u64 + r30.u64;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// srw r22,r8,r11
	r22.u64 = r11.u8 & 0x20 ? 0 : (ctx.r8.u32 >> (r11.u8 & 0x3F));
loc_830061B0:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// li r8,0
	ctx.r8.s64 = 0;
	// srw r23,r10,r6
	r23.u64 = ctx.r6.u8 & 0x20 ? 0 : (ctx.r10.u32 >> (ctx.r6.u8 & 0x3F));
	// lwz r10,332(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 332);
	// mr r29,r8
	r29.u64 = ctx.r8.u64;
	// mr r28,r8
	r28.u64 = ctx.r8.u64;
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r29.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
	// beq cr6,0x83006218
	if (cr6.eq) goto loc_83006218;
	// lwz r8,8(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// add r9,r9,r4
	ctx.r9.u64 = ctx.r9.u64 + ctx.r4.u64;
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// sraw r7,r7,r11
	temp.u32 = r11.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r7.s32 < 0) & (((ctx.r7.s32 >> temp.u32) << temp.u32) != ctx.r7.s32);
	ctx.r7.s64 = ctx.r7.s32 >> temp.u32;
	// sraw r10,r10,r6
	temp.u32 = ctx.r6.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r10.s32 < 0) & (((ctx.r10.s32 >> temp.u32) << temp.u32) != ctx.r10.s32);
	ctx.r10.s64 = ctx.r10.s32 >> temp.u32;
	// stw r7,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r7.u32);
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// srw r8,r8,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r8.u32 >> (r11.u8 & 0x3F));
	// srw r10,r9,r6
	ctx.r10.u64 = ctx.r6.u8 & 0x20 ? 0 : (ctx.r9.u32 >> (ctx.r6.u8 & 0x3F));
	// stw r8,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r8.u32);
	// b 0x8300626c
	goto loc_8300626C;
loc_83006218:
	// subf r10,r9,r27
	ctx.r10.s64 = r27.s64 - ctx.r9.s64;
	// stw r8,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r8.u32);
	// stw r8,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r8.u32);
	// srw r10,r10,r31
	ctx.r10.u64 = r31.u8 & 0x20 ? 0 : (ctx.r10.u32 >> (r31.u8 & 0x3F));
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bgt cr6,0x83006234
	if (cr6.gt) goto loc_83006234;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
loc_83006234:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r5,r9,r30
	ctx.r5.s64 = r30.s64 - ctx.r9.s64;
	// add r8,r10,r7
	ctx.r8.u64 = ctx.r10.u64 + ctx.r7.u64;
	// srw r10,r5,r31
	ctx.r10.u64 = r31.u8 & 0x20 ? 0 : (ctx.r5.u32 >> (r31.u8 & 0x3F));
	// addi r8,r8,-1
	ctx.r8.s64 = ctx.r8.s64 + -1;
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// srw r8,r8,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r8.u32 >> (r11.u8 & 0x3F));
	// stw r8,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r8.u32);
	// bgt cr6,0x8300625c
	if (cr6.gt) goto loc_8300625C;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
loc_8300625C:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 + ctx.r4.u64;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// srw r10,r10,r6
	ctx.r10.u64 = ctx.r6.u8 & 0x20 ? 0 : (ctx.r10.u32 >> (ctx.r6.u8 & 0x3F));
loc_8300626C:
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x83006294
	if (cr6.eq) goto loc_83006294;
	// lwz r10,0(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + 0);
	// lwz r9,4(r24)
	ctx.r9.u64 = PPC_LOAD_U32(r24.u32 + 4);
	// addi r24,r1,88
	r24.s64 = ctx.r1.s64 + 88;
	// sraw r29,r10,r11
	temp.u32 = r11.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r10.s32 < 0) & (((ctx.r10.s32 >> temp.u32) << temp.u32) != ctx.r10.s32);
	r29.s64 = ctx.r10.s32 >> temp.u32;
	// sraw r28,r9,r6
	temp.u32 = ctx.r6.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r9.s32 < 0) & (((ctx.r9.s32 >> temp.u32) << temp.u32) != ctx.r9.s32);
	r28.s64 = ctx.r9.s32 >> temp.u32;
	// stw r29,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r29.u32);
	// stw r28,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r28.u32);
loc_83006294:
	// clrlwi. r11,r26,31
	r11.u64 = r26.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x830062e0
	if (!cr0.eq) goto loc_830062E0;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// rlwinm r9,r26,31,31,31
	ctx.r9.u64 = rotl64(r26.u32 | (r26.u64 << 32), 31) & 0x1;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r25
	ctx.r7.u64 = r25.u64;
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x8300a198
	sub_8300A198(ctx, base);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// subf r21,r3,r21
	r21.s64 = r21.s64 - ctx.r3.s64;
	// add r10,r10,r29
	ctx.r10.u64 = ctx.r10.u64 + r29.u64;
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// addi r24,r1,88
	r24.s64 = ctx.r1.s64 + 88;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
loc_830062E0:
	// mr r10,r19
	ctx.r10.u64 = r19.u64;
	// lwz r8,324(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 324);
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// mr r7,r20
	ctx.r7.u64 = r20.u64;
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r21
	ctx.r3.u64 = r21.u64;
	// bl 0x83005800
	sub_83005800(ctx, base);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82ca2c14
	return;
}

PPC_WEAK_FUNC(sub_830060B8) {
	__imp__sub_830060B8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006310) {
	PPC_FUNC_PROLOGUE();
	// b 0x83005bd0
	sub_83005BD0(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83006310) {
	__imp__sub_83006310(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006318) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bbc
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// mr r19,r8
	r19.u64 = ctx.r8.u64;
	// mr r18,r9
	r18.u64 = ctx.r9.u64;
	// mr r20,r10
	r20.u64 = ctx.r10.u64;
	// bl 0x8300a370
	sub_8300A370(ctx, base);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// li r3,1
	ctx.r3.s64 = 1;
	// cntlzw r10,r6
	ctx.r10.u64 = ctx.r6.u32 == 0 ? 32 : __builtin_clz(ctx.r6.u32);
	// addi r7,r11,-1224
	ctx.r7.s64 = r11.s64 + -1224;
	// cntlzw r9,r4
	ctx.r9.u64 = ctx.r4.u32 == 0 ? 32 : __builtin_clz(ctx.r4.u32);
	// subfic r11,r10,31
	xer.ca = ctx.r10.u32 <= 31;
	r11.s64 = 31 - ctx.r10.s64;
	// subfic r8,r9,31
	xer.ca = ctx.r9.u32 <= 31;
	ctx.r8.s64 = 31 - ctx.r9.s64;
	// rlwinm r9,r24,0,30,30
	ctx.r9.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	// add r5,r8,r11
	ctx.r5.u64 = ctx.r8.u64 + r11.u64;
	// rlwinm r10,r24,31,31,31
	ctx.r10.u64 = rotl64(r24.u32 | (r24.u64 << 32), 31) & 0x1;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// lbzx r7,r23,r7
	ctx.r7.u64 = PPC_LOAD_U8(r23.u32 + ctx.r7.u32);
	// slw r7,r7,r5
	ctx.r7.u64 = ctx.r5.u8 & 0x20 ? 0 : (ctx.r7.u32 << (ctx.r5.u8 & 0x3F));
	// rlwinm r17,r7,29,3,31
	r17.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 29) & 0x1FFFFFFF;
	// beq cr6,0x83006400
	if (cr6.eq) goto loc_83006400;
	// subf r7,r9,r25
	ctx.r7.s64 = r25.s64 - ctx.r9.s64;
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// cntlzw r7,r7
	ctx.r7.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// subf r7,r7,r10
	ctx.r7.s64 = ctx.r10.s64 - ctx.r7.s64;
	// addi r7,r7,32
	ctx.r7.s64 = ctx.r7.s64 + 32;
	// slw r7,r3,r7
	ctx.r7.u64 = ctx.r7.u8 & 0x20 ? 0 : (ctx.r3.u32 << (ctx.r7.u8 & 0x3F));
	// sraw r7,r7,r30
	temp.u32 = r30.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r7.s32 < 0) & (((ctx.r7.s32 >> temp.u32) << temp.u32) != ctx.r7.s32);
	ctx.r7.s64 = ctx.r7.s32 >> temp.u32;
	// cmpwi cr6,r7,1
	cr6.compare<int32_t>(ctx.r7.s32, 1, xer);
	// mr r5,r7
	ctx.r5.u64 = ctx.r7.u64;
	// bgt cr6,0x830063c4
	if (cr6.gt) goto loc_830063C4;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
loc_830063C4:
	// subf r7,r9,r26
	ctx.r7.s64 = r26.s64 - ctx.r9.s64;
	// addi r31,r7,-1
	r31.s64 = ctx.r7.s64 + -1;
	// add r7,r5,r6
	ctx.r7.u64 = ctx.r5.u64 + ctx.r6.u64;
	// cntlzw r5,r31
	ctx.r5.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// subf r10,r5,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r5.s64;
	// srw r21,r7,r11
	r21.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 >> (r11.u8 & 0x3F));
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// slw r10,r3,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r3.u32 << (ctx.r10.u8 & 0x3F));
	// sraw r10,r10,r30
	temp.u32 = r30.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r10.s32 < 0) & (((ctx.r10.s32 >> temp.u32) << temp.u32) != ctx.r10.s32);
	ctx.r10.s64 = ctx.r10.s32 >> temp.u32;
	// cmpwi cr6,r10,1
	cr6.compare<int32_t>(ctx.r10.s32, 1, xer);
	// bgt cr6,0x830063f8
	if (cr6.gt) goto loc_830063F8;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
loc_830063F8:
	// add r10,r10,r4
	ctx.r10.u64 = ctx.r10.u64 + ctx.r4.u64;
	// b 0x83006410
	goto loc_83006410;
loc_83006400:
	// add r7,r6,r25
	ctx.r7.u64 = ctx.r6.u64 + r25.u64;
	// add r10,r4,r26
	ctx.r10.u64 = ctx.r4.u64 + r26.u64;
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// srw r21,r7,r11
	r21.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 >> (r11.u8 & 0x3F));
loc_83006410:
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// srw r22,r10,r8
	r22.u64 = ctx.r8.u8 & 0x20 ? 0 : (ctx.r10.u32 >> (ctx.r8.u8 & 0x3F));
	// beq cr6,0x8300643c
	if (cr6.eq) goto loc_8300643C;
	// lwz r10,0(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + 0);
	// lwz r7,4(r20)
	ctx.r7.u64 = PPC_LOAD_U32(r20.u32 + 4);
	// addi r20,r1,88
	r20.s64 = ctx.r1.s64 + 88;
	// sraw r10,r10,r11
	temp.u32 = r11.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r10.s32 < 0) & (((ctx.r10.s32 >> temp.u32) << temp.u32) != ctx.r10.s32);
	ctx.r10.s64 = ctx.r10.s32 >> temp.u32;
	// sraw r7,r7,r8
	temp.u32 = ctx.r8.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r7.s32 < 0) & (((ctx.r7.s32 >> temp.u32) << temp.u32) != ctx.r7.s32);
	ctx.r7.s64 = ctx.r7.s32 >> temp.u32;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// stw r7,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r7.u32);
loc_8300643C:
	// lwz r10,348(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 348);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x83006488
	if (cr6.eq) goto loc_83006488;
	// lwz r7,8(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r9,12(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// add r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 + ctx.r6.u64;
	// lwz r6,0(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// add r9,r9,r4
	ctx.r9.u64 = ctx.r9.u64 + ctx.r4.u64;
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// sraw r28,r6,r11
	temp.u32 = r11.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r6.s32 < 0) & (((ctx.r6.s32 >> temp.u32) << temp.u32) != ctx.r6.s32);
	r28.s64 = ctx.r6.s32 >> temp.u32;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// sraw r27,r10,r8
	temp.u32 = ctx.r8.u32 & 0x3F;
	if (temp.u32 > 0x1F) temp.u32 = 0x1F;
	xer.ca = (ctx.r10.s32 < 0) & (((ctx.r10.s32 >> temp.u32) << temp.u32) != ctx.r10.s32);
	r27.s64 = ctx.r10.s32 >> temp.u32;
	// srw r29,r7,r11
	r29.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 >> (r11.u8 & 0x3F));
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// srw r31,r9,r8
	r31.u64 = ctx.r8.u8 & 0x20 ? 0 : (ctx.r9.u32 >> (ctx.r8.u8 & 0x3F));
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r29.u32);
	// b 0x830064e4
	goto loc_830064E4;
loc_83006488:
	// subf r10,r9,r25
	ctx.r10.s64 = r25.s64 - ctx.r9.s64;
	// li r28,0
	r28.s64 = 0;
	// srw r10,r10,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r10.u32 >> (r30.u8 & 0x3F));
	// li r27,0
	r27.s64 = 0;
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r28.u32);
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// bgt cr6,0x830064ac
	if (cr6.gt) goto loc_830064AC;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
loc_830064AC:
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// subf r5,r9,r26
	ctx.r5.s64 = r26.s64 - ctx.r9.s64;
	// add r7,r10,r6
	ctx.r7.u64 = ctx.r10.u64 + ctx.r6.u64;
	// srw r10,r5,r30
	ctx.r10.u64 = r30.u8 & 0x20 ? 0 : (ctx.r5.u32 >> (r30.u8 & 0x3F));
	// addi r7,r7,-1
	ctx.r7.s64 = ctx.r7.s64 + -1;
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// srw r29,r7,r11
	r29.u64 = r11.u8 & 0x20 ? 0 : (ctx.r7.u32 >> (r11.u8 & 0x3F));
	// stw r29,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r29.u32);
	// bgt cr6,0x830064d4
	if (cr6.gt) goto loc_830064D4;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
loc_830064D4:
	// add r11,r10,r9
	r11.u64 = ctx.r10.u64 + ctx.r9.u64;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// srw r31,r11,r8
	r31.u64 = ctx.r8.u8 & 0x20 ? 0 : (r11.u32 >> (ctx.r8.u8 & 0x3F));
loc_830064E4:
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r31.u32);
	// clrlwi. r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x83006548
	if (!cr0.eq) goto loc_83006548;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// rlwinm r9,r24,31,31,31
	ctx.r9.u64 = rotl64(r24.u32 | (r24.u64 << 32), 31) & 0x1;
	// li r8,1
	ctx.r8.s64 = 1;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x8300a198
	sub_8300A198(ctx, base);
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// lwz r10,100(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// add r8,r11,r28
	ctx.r8.u64 = r11.u64 + r28.u64;
	// lwz r9,340(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 340);
	// add r7,r10,r27
	ctx.r7.u64 = ctx.r10.u64 + r27.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r8,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r8.u32);
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
	// stw r7,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r7.u32);
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// subf r6,r3,r9
	ctx.r6.s64 = ctx.r9.s64 - ctx.r3.s64;
	// stw r10,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r10.u32);
	// b 0x8300654c
	goto loc_8300654C;
loc_83006548:
	// lwz r6,340(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 340);
loc_8300654C:
	// mr r10,r17
	ctx.r10.u64 = r17.u64;
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
	// mr r5,r20
	ctx.r5.u64 = r20.u64;
	// mr r4,r18
	ctx.r4.u64 = r18.u64;
	// mr r3,r19
	ctx.r3.u64 = r19.u64;
	// bl 0x83005bd0
	sub_83005BD0(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82ca2c0c
	return;
}

PPC_WEAK_FUNC(sub_83006318) {
	__imp__sub_83006318(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006578) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	// addi r9,r1,-16
	ctx.r9.s64 = ctx.r1.s64 + -16;
	// addi r11,r4,28
	r11.s64 = ctx.r4.s64 + 28;
	// li r10,4
	ctx.r10.s64 = 4;
loc_83006584:
	// lwz r8,-16(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + -16);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// lwz r6,16(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lbzx r8,r8,r3
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r8.u32 + ctx.r3.u32);
	// and r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 & ctx.r7.u64;
	// srw r8,r8,r6
	ctx.r8.u64 = ctx.r6.u8 & 0x20 ? 0 : (ctx.r8.u32 >> (ctx.r6.u8 & 0x3F));
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// bne 0x83006584
	if (!cr0.eq) goto loc_83006584;
	// addi r11,r1,-16
	r11.s64 = ctx.r1.s64 + -16;
	// lvx128 v1,r0,r11
	simd::store_shuffled(ctx.v1, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83006578) {
	__imp__sub_83006578(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830065C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r29,r1,96
	r29.s64 = ctx.r1.s64 + 96;
	// addi r31,r4,28
	r31.s64 = ctx.r4.s64 + 28;
	// li r30,4
	r30.s64 = 4;
loc_830065DC:
	// lwz r11,-16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// lis r5,2
	ctx.r5.s64 = 131072;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rlwinm r11,r11,1,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// add r4,r11,r28
	ctx.r4.u64 = r11.u64 + r28.u64;
	// bl 0x8300b4a8
	sub_8300B4A8(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lhz r11,80(r1)
	r11.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// addic. r30,r30,-1
	xer.ca = r30.u32 > 0;
	r30.s64 = r30.s64 + -1;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// srw r11,r11,r9
	r11.u64 = ctx.r9.u8 & 0x20 ? 0 : (r11.u32 >> (ctx.r9.u8 & 0x3F));
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// bne 0x830065dc
	if (!cr0.eq) goto loc_830065DC;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// lvx128 v1,r0,r11
	simd::store_shuffled(ctx.v1, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830065C0) {
	__imp__sub_830065C0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006630) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r29,r1,96
	r29.s64 = ctx.r1.s64 + 96;
	// addi r31,r4,28
	r31.s64 = ctx.r4.s64 + 28;
	// li r30,4
	r30.s64 = 4;
loc_8300664C:
	// lwz r11,-16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// lis r5,4
	ctx.r5.s64 = 262144;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// add r4,r11,r28
	ctx.r4.u64 = r11.u64 + r28.u64;
	// bl 0x8300b4a8
	sub_8300B4A8(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addic. r30,r30,-1
	xer.ca = r30.u32 > 0;
	r30.s64 = r30.s64 + -1;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// and r11,r11,r10
	r11.u64 = r11.u64 & ctx.r10.u64;
	// srw r11,r11,r9
	r11.u64 = ctx.r9.u8 & 0x20 ? 0 : (r11.u32 >> (ctx.r9.u8 & 0x3F));
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// bne 0x8300664c
	if (!cr0.eq) goto loc_8300664C;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// lvx128 v1,r0,r11
	simd::store_shuffled(ctx.v1, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83006630) {
	__imp__sub_83006630(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830066A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCVRegister v63{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r5,4
	ctx.r5.s64 = 262144;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x8300b4a8
	sub_8300B4A8(ctx, base);
	// lis r5,4
	ctx.r5.s64 = 262144;
	// addi r4,r31,4
	ctx.r4.s64 = r31.s64 + 4;
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// bl 0x8300b4a8
	sub_8300B4A8(ctx, base);
	// li r11,0
	r11.s64 = 0;
loc_830066E8:
	// rlwinm r9,r11,31,1,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFC;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// clrlwi r7,r11,30
	ctx.r7.u64 = r11.u32 & 0x3;
	// rlwinm r8,r11,0,0,29
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFC;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// add r8,r8,r7
	ctx.r8.u64 = ctx.r8.u64 + ctx.r7.u64;
	// lwzx r7,r9,r10
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r8,r8,2,0,29
	ctx.r8.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// clrlwi r5,r7,28
	ctx.r5.u64 = ctx.r7.u32 & 0xF;
	// rlwinm r7,r7,28,4,31
	ctx.r7.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 28) & 0xFFFFFFF;
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// stwx r7,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, ctx.r7.u32);
	// stwx r5,r8,r6
	PPC_STORE_U32(ctx.r8.u32 + ctx.r6.u32, ctx.r5.u32);
	// blt cr6,0x830066e8
	if (cr6.lt) goto loc_830066E8;
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_8300672C:
	// clrlwi r8,r10,30
	ctx.r8.u64 = ctx.r10.u32 & 0x3;
	// rlwinm r9,r10,0,0,29
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFC;
	// addi r7,r1,96
	ctx.r7.s64 = ctx.r1.s64 + 96;
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmplwi cr6,r10,16
	cr6.compare<uint32_t>(ctx.r10.u32, 16, xer);
	// lwzx r9,r9,r7
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	// rlwinm r8,r9,29,3,31
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 29) & 0x1FFFFFFF;
	// rlwinm r7,r9,30,31,31
	ctx.r7.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x1;
	// rlwinm r6,r9,31,31,31
	ctx.r6.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 31) & 0x1;
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// clrlwi r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	// stw r7,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r7.u32);
	// stw r6,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r6.u32);
	// stw r9,12(r11)
	PPC_STORE_U32(r11.u32 + 12, ctx.r9.u32);
	// lvx128 v63,r0,r11
	simd::store_shuffled(v63, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// vcuxwfp128 v63,v63,0
	ctx.fpscr.enableFlushMode();
	simd::store_f32_aligned(v63.f32, simd::cvtepu32_f32(simd::load_u32(v63.u32)));
	// stvx128 v63,r0,r11
	ea = (r11.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v63), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// blt cr6,0x8300672c
	if (cr6.lt) goto loc_8300672C;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830066A0) {
	__imp__sub_830066A0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006798) {
	PPC_FUNC_PROLOGUE();
	// b 0x830066a0
	sub_830066A0(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_83006798) {
	__imp__sub_83006798(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830067A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// li r12,32
	r12.s64 = 32;
	// stvx128 v1,r1,r12
	ea = (ctx.r1.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v1), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r9,r1,32
	ctx.r9.s64 = ctx.r1.s64 + 32;
	// addi r11,r4,12
	r11.s64 = ctx.r4.s64 + 12;
	// li r10,4
	ctx.r10.s64 = 4;
loc_830067B4:
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + 0);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// lwz r7,32(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + 32);
	// lwz r6,0(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + 0);
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// lwz r5,16(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + 16);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// slw r7,r6,r7
	ctx.r7.u64 = ctx.r7.u8 & 0x20 ? 0 : (ctx.r6.u32 << (ctx.r7.u8 & 0x3F));
	// lbzx r6,r8,r3
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r8.u32 + ctx.r3.u32);
	// and r7,r7,r5
	ctx.r7.u64 = ctx.r7.u64 & ctx.r5.u64;
	// or r7,r7,r6
	ctx.r7.u64 = ctx.r7.u64 | ctx.r6.u64;
	// stbx r7,r8,r3
	PPC_STORE_U8(ctx.r8.u32 + ctx.r3.u32, ctx.r7.u8);
	// bne 0x830067b4
	if (!cr0.eq) goto loc_830067B4;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830067A0) {
	__imp__sub_830067A0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830067F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r12,160
	r12.s64 = 160;
	// stvx128 v1,r1,r12
	ea = (ctx.r1.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v1), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r29,r1,160
	r29.s64 = ctx.r1.s64 + 160;
	// addi r31,r4,12
	r31.s64 = ctx.r4.s64 + 12;
	// li r30,4
	r30.s64 = 4;
loc_83006814:
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// lis r5,2
	ctx.r5.s64 = 131072;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// slw r11,r10,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r11.u8 & 0x3F));
	// and r11,r11,r9
	r11.u64 = r11.u64 & ctx.r9.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// sth r11,80(r1)
	PPC_STORE_U16(ctx.r1.u32 + 80, r11.u16);
	// bl 0x8300b4a8
	sub_8300B4A8(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lhz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// addic. r30,r30,-1
	xer.ca = r30.u32 > 0;
	r30.s64 = r30.s64 + -1;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// rlwinm r11,r11,1,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// lhzx r9,r11,r28
	ctx.r9.u64 = PPC_LOAD_U16(r11.u32 + r28.u32);
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// sthx r10,r11,r28
	PPC_STORE_U16(r11.u32 + r28.u32, ctx.r10.u16);
	// bne 0x83006814
	if (!cr0.eq) goto loc_83006814;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_830067F0) {
	__imp__sub_830067F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006870) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r12,160
	r12.s64 = 160;
	// stvx128 v1,r1,r12
	ea = (ctx.r1.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v1), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r29,r1,160
	r29.s64 = ctx.r1.s64 + 160;
	// addi r31,r4,12
	r31.s64 = ctx.r4.s64 + 12;
	// li r30,4
	r30.s64 = 4;
loc_83006894:
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 32);
	// lis r5,4
	ctx.r5.s64 = 262144;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + 0);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// slw r11,r10,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (ctx.r10.u32 << (r11.u8 & 0x3F));
	// and r11,r11,r9
	r11.u64 = r11.u64 & ctx.r9.u64;
	// addi r3,r1,84
	ctx.r3.s64 = ctx.r1.s64 + 84;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x8300b4a8
	sub_8300B4A8(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addic. r30,r30,-1
	xer.ca = r30.u32 > 0;
	r30.s64 = r30.s64 + -1;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// lwzx r9,r11,r28
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + r28.u32);
	// or r10,r9,r10
	ctx.r10.u64 = ctx.r9.u64 | ctx.r10.u64;
	// stwx r10,r11,r28
	PPC_STORE_U32(r11.u32 + r28.u32, ctx.r10.u32);
	// bne 0x83006894
	if (!cr0.eq) goto loc_83006894;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83006870) {
	__imp__sub_83006870(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_830068F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// srawi r11,r3,18
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x3FFFF) != 0);
	r11.s64 = ctx.r3.s32 >> 18;
	// lis r8,4113
	ctx.r8.s64 = 269549568;
	// rlwinm r7,r11,2,27,29
	ctx.r7.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x1C;
	// addi r6,r1,-48
	ctx.r6.s64 = ctx.r1.s64 + -48;
	// lis r4,1
	ctx.r4.s64 = 65536;
	// ori r11,r8,4627
	r11.u64 = ctx.r8.u64 | 4627;
	// srawi r10,r3,21
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x1FFFFF) != 0);
	ctx.r10.s64 = ctx.r3.s32 >> 21;
	// srawi r9,r3,24
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0xFFFFFF) != 0);
	ctx.r9.s64 = ctx.r3.s32 >> 24;
	// stw r11,-36(r1)
	PPC_STORE_U32(ctx.r1.u32 + -36, r11.u32);
	// ori r4,r4,515
	ctx.r4.u64 = ctx.r4.u64 | 515;
	// stw r11,-40(r1)
	PPC_STORE_U32(ctx.r1.u32 + -40, r11.u32);
	// srawi r5,r3,27
	xer.ca = (ctx.r3.s32 < 0) & ((ctx.r3.u32 & 0x7FFFFFF) != 0);
	ctx.r5.s64 = ctx.r3.s32 >> 27;
	// stw r11,-44(r1)
	PPC_STORE_U32(ctx.r1.u32 + -44, r11.u32);
	// stw r11,-48(r1)
	PPC_STORE_U32(ctx.r1.u32 + -48, r11.u32);
	// lis r31,1029
	r31.s64 = 67436544;
	// rlwinm r10,r10,2,27,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0x1C;
	// stwx r4,r7,r6
	PPC_STORE_U32(ctx.r7.u32 + ctx.r6.u32, ctx.r4.u32);
	// addi r3,r1,-48
	ctx.r3.s64 = ctx.r1.s64 + -48;
	// rlwinm r9,r9,2,27,29
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0x1C;
	// addi r8,r1,-48
	ctx.r8.s64 = ctx.r1.s64 + -48;
	// lis r30,2057
	r30.s64 = 134807552;
	// rlwinm r5,r5,2,27,29
	ctx.r5.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0x1C;
	// addi r11,r1,-48
	r11.s64 = ctx.r1.s64 + -48;
	// lis r7,3085
	ctx.r7.s64 = 202178560;
	// addi r6,r1,-48
	ctx.r6.s64 = ctx.r1.s64 + -48;
	// ori r4,r31,1543
	ctx.r4.u64 = r31.u64 | 1543;
	// ori r31,r30,2571
	r31.u64 = r30.u64 | 2571;
	// ori r7,r7,3599
	ctx.r7.u64 = ctx.r7.u64 | 3599;
	// stwx r4,r10,r3
	PPC_STORE_U32(ctx.r10.u32 + ctx.r3.u32, ctx.r4.u32);
	// stwx r31,r9,r8
	PPC_STORE_U32(ctx.r9.u32 + ctx.r8.u32, r31.u32);
	// stwx r7,r5,r11
	PPC_STORE_U32(ctx.r5.u32 + r11.u32, ctx.r7.u32);
	// lvx128 v1,r0,r6
	simd::store_shuffled(ctx.v1, simd::load_and_shuffle(base + ((ctx.r6.u32) & ~0xF), VectorMaskL));
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_830068F0) {
	__imp__sub_830068F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006988) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f29{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCVRegister v62{};
	PPCVRegister v63{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bcc
	// stfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -120, f29.u64);
	// stfd f30,-112(r1)
	PPC_STORE_U64(ctx.r1.u32 + -112, f30.u64);
	// stfd f31,-104(r1)
	PPC_STORE_U64(ctx.r1.u32 + -104, f31.u64);
	// stwu r1,-336(r1)
	ea = -336 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r25,r6
	r25.u64 = ctx.r6.u64;
	// mr r24,r7
	r24.u64 = ctx.r7.u64;
	// mr r23,r8
	r23.u64 = ctx.r8.u64;
	// mr r22,r9
	r22.u64 = ctx.r9.u64;
	// mr r21,r10
	r21.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// li r30,0
	r30.s64 = 0;
	// bne cr6,0x83006a54
	if (!cr6.eq) goto loc_83006A54;
	// addi r8,r1,160
	ctx.r8.s64 = ctx.r1.s64 + 160;
	// addi r7,r1,144
	ctx.r7.s64 = ctx.r1.s64 + 144;
	// addi r6,r1,128
	ctx.r6.s64 = ctx.r1.s64 + 128;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r1,192
	ctx.r4.s64 = ctx.r1.s64 + 192;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// lis r11,32640
	r11.s64 = 2139095040;
	// lis r10,-128
	ctx.r10.s64 = -8388608;
	// stw r30,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, r30.u32);
	// lis r9,16256
	ctx.r9.s64 = 1065353216;
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// stw r10,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r10.u32);
	// stw r9,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r9.u32);
	// stw r30,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r30.u32);
	// stw r11,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r11.u32);
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// stw r30,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r30.u32);
	// stw r9,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r9.u32);
	// stw r30,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, r30.u32);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r30.u32);
	// stw r11,8(r8)
	PPC_STORE_U32(ctx.r8.u32 + 8, r11.u32);
	// stw r10,8(r7)
	PPC_STORE_U32(ctx.r7.u32 + 8, ctx.r10.u32);
	// stw r30,8(r6)
	PPC_STORE_U32(ctx.r6.u32 + 8, r30.u32);
	// stw r9,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r9.u32);
	// stw r30,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r30.u32);
	// stw r30,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r30.u32);
	// stw r11,12(r8)
	PPC_STORE_U32(ctx.r8.u32 + 12, r11.u32);
	// stw r10,12(r7)
	PPC_STORE_U32(ctx.r7.u32 + 12, ctx.r10.u32);
	// stw r30,12(r6)
	PPC_STORE_U32(ctx.r6.u32 + 12, r30.u32);
	// stw r9,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r9.u32);
	// stw r30,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, r30.u32);
	// stw r30,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r30.u32);
	// stw r30,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r30.u32);
	// b 0x83006c4c
	goto loc_83006C4C;
loc_83006A54:
	// addi r10,r1,192
	ctx.r10.s64 = ctx.r1.s64 + 192;
	// li r11,-1
	r11.s64 = -1;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r28,r3,28
	r28.s64 = ctx.r3.s64 + 28;
	// mr r31,r30
	r31.u64 = r30.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// li r29,1
	r29.s64 = 1;
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r11.u32);
	// lfs f31,3084(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 3084);
	f31.f64 = double(temp.f32);
	// stw r11,12(r10)
	PPC_STORE_U32(ctx.r10.u32 + 12, r11.u32);
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f30,3080(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + 3080);
	f30.f64 = double(temp.f32);
	// lfs f29,3800(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3800);
	f29.f64 = double(temp.f32);
loc_83006A90:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + 0);
	// lwz r10,16(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + 16);
	// srw r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 >> (ctx.r10.u8 & 0x3F));
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// subfic r11,r11,32
	xer.ca = r11.u32 <= 32;
	r11.s64 = 32 - r11.s64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x83006ad4
	if (!cr6.eq) goto loc_83006AD4;
	// addi r11,r1,176
	r11.s64 = ctx.r1.s64 + 176;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// addi r7,r1,128
	ctx.r7.s64 = ctx.r1.s64 + 128;
	// addi r9,r1,160
	ctx.r9.s64 = ctx.r1.s64 + 160;
	// stwx r30,r31,r11
	PPC_STORE_U32(r31.u32 + r11.u32, r30.u32);
	// stfsx f31,r31,r10
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, temp.u32);
	// stfsx f31,r31,r8
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + ctx.r8.u32, temp.u32);
	// stfsx f31,r31,r7
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + ctx.r7.u32, temp.u32);
	// b 0x83006c38
	goto loc_83006C38;
loc_83006AD4:
	// lwzx r9,r31,r26
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + r26.u32);
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// bne cr6,0x83006aec
	if (!cr6.eq) goto loc_83006AEC;
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// slw r10,r29,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (r29.u32 << (ctx.r10.u8 & 0x3F));
	// b 0x83006af0
	goto loc_83006AF0;
loc_83006AEC:
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
loc_83006AF0:
	// addi r8,r1,176
	ctx.r8.s64 = ctx.r1.s64 + 176;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// stwx r10,r31,r8
	PPC_STORE_U32(r31.u32 + ctx.r8.u32, ctx.r10.u32);
	// bne cr6,0x83006b9c
	if (!cr6.eq) goto loc_83006B9C;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x83006b64
	if (cr6.eq) goto loc_83006B64;
	// cmplwi cr6,r9,3
	cr6.compare<uint32_t>(ctx.r9.u32, 3, xer);
	// beq cr6,0x83006b64
	if (cr6.eq) goto loc_83006B64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// slw r11,r29,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (r29.u32 << (r11.u8 & 0x3F));
	// addi r9,r11,-1
	ctx.r9.s64 = r11.s64 + -1;
	// stfsx f29,r31,r10
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f29.f64);
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, temp.u32);
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// clrldi r10,r9,32
	ctx.r10.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r10,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r10.u64);
	// lfd f13,88(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// addi r11,r1,160
	r11.s64 = ctx.r1.s64 + 160;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfsx f0,r31,r9
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + ctx.r9.u32, temp.u32);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// stfsx f30,r31,r11
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + r11.u32, temp.u32);
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// b 0x83006c00
	goto loc_83006C00;
loc_83006B64:
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// addi r9,r1,160
	ctx.r9.s64 = ctx.r1.s64 + 160;
	// sld r11,r29,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (r29.u64 << (r11.u8 & 0x7F));
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// stfsx f31,r31,r10
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, temp.u32);
	// stfsx f30,r31,r9
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + ctx.r9.u32, temp.u32);
	// bl 0x82fffb40
	sub_82FFFB40(ctx, base);
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// stfsx f0,r31,r11
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + r11.u32, temp.u32);
	// stfsx f31,r31,r10
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, temp.u32);
	// b 0x83006c3c
	goto loc_83006C3C;
loc_83006B9C:
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x83006c08
	if (cr6.eq) goto loc_83006C08;
	// cmplwi cr6,r9,3
	cr6.compare<uint32_t>(ctx.r9.u32, 3, xer);
	// beq cr6,0x83006c08
	if (cr6.eq) goto loc_83006C08;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r8,r1,128
	ctx.r8.s64 = ctx.r1.s64 + 128;
	// slw r11,r29,r11
	r11.u64 = r11.u8 & 0x20 ? 0 : (r29.u32 << (r11.u8 & 0x3F));
	// addi r9,r11,-1
	ctx.r9.s64 = r11.s64 + -1;
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// clrldi r9,r9,32
	ctx.r9.u64 = ctx.r9.u64 & 0xFFFFFFFF;
	// std r11,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, r11.u64);
	// lfd f0,96(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// std r9,104(r1)
	PPC_STORE_U64(ctx.r1.u32 + 104, ctx.r9.u64);
	// lfd f13,104(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 104);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// addi r11,r1,160
	r11.s64 = ctx.r1.s64 + 160;
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// stfsx f0,r31,r8
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + ctx.r8.u32, temp.u32);
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// stfsx f30,r31,r9
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + ctx.r9.u32, temp.u32);
	// frsp f0,f13
	f0.f64 = double(float(ctx.f13.f64));
	// stfsx f0,r31,r11
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + r11.u32, temp.u32);
	// fneg f0,f0
	f0.u64 = f0.u64 ^ 0x8000000000000000;
loc_83006C00:
	// stfsx f0,r31,r10
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, temp.u32);
	// b 0x83006c3c
	goto loc_83006C3C;
loc_83006C08:
	// clrldi r11,r11,32
	r11.u64 = r11.u64 & 0xFFFFFFFF;
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// sld r11,r29,r11
	r11.u64 = r11.u8 & 0x40 ? 0 : (r29.u64 << (r11.u8 & 0x7F));
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// stfsx f31,r31,r10
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, temp.u32);
	// bl 0x82fffb40
	sub_82FFFB40(ctx, base);
	// addi r11,r1,160
	r11.s64 = ctx.r1.s64 + 160;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// stfsx f0,r31,r11
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + r11.u32, temp.u32);
	// stfsx f30,r31,r10
	temp.f32 = float(f30.f64);
	PPC_STORE_U32(r31.u32 + ctx.r10.u32, temp.u32);
loc_83006C38:
	// stfsx f31,r31,r9
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r31.u32 + ctx.r9.u32, temp.u32);
loc_83006C3C:
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// cmplwi cr6,r31,16
	cr6.compare<uint32_t>(r31.u32, 16, xer);
	// blt cr6,0x83006a90
	if (cr6.lt) goto loc_83006A90;
loc_83006C4C:
	// addi r11,r1,192
	r11.s64 = ctx.r1.s64 + 192;
	// lwz r10,420(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 420);
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// addi r8,r1,128
	ctx.r8.s64 = ctx.r1.s64 + 128;
	// addi r7,r1,144
	ctx.r7.s64 = ctx.r1.s64 + 144;
	// addi r6,r1,160
	ctx.r6.s64 = ctx.r1.s64 + 160;
	// lvx128 v63,r0,r11
	simd::store_shuffled(v63, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// addi r5,r1,176
	ctx.r5.s64 = ctx.r1.s64 + 176;
	// stvx128 v63,r0,r25
	ea = (r25.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v63), &VectorMaskL[(ea & 0xF) * 16]);
	// lvx128 v63,r0,r9
	simd::store_shuffled(v63, simd::load_and_shuffle(base + ((ctx.r9.u32) & ~0xF), VectorMaskL));
	// lvx128 v62,r0,r8
	simd::store_shuffled(v62, simd::load_and_shuffle(base + ((ctx.r8.u32) & ~0xF), VectorMaskL));
	// stvx128 v63,r0,r24
	ea = (r24.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v63), &VectorMaskL[(ea & 0xF) * 16]);
	// lvx128 v63,r0,r7
	simd::store_shuffled(v63, simd::load_and_shuffle(base + ((ctx.r7.u32) & ~0xF), VectorMaskL));
	// stvx128 v62,r0,r23
	ea = (r23.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v62), &VectorMaskL[(ea & 0xF) * 16]);
	// lvx128 v62,r0,r6
	simd::store_shuffled(v62, simd::load_and_shuffle(base + ((ctx.r6.u32) & ~0xF), VectorMaskL));
	// stvx128 v63,r0,r22
	ea = (r22.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v63), &VectorMaskL[(ea & 0xF) * 16]);
	// lvx128 v63,r0,r5
	simd::store_shuffled(v63, simd::load_and_shuffle(base + ((ctx.r5.u32) & ~0xF), VectorMaskL));
	// stvx128 v62,r0,r21
	ea = (r21.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v62), &VectorMaskL[(ea & 0xF) * 16]);
	// stvx128 v63,r0,r10
	ea = (ctx.r10.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v63), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// lfd f29,-120(r1)
	ctx.fpscr.disableFlushMode();
	f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -120);
	// lfd f30,-112(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -112);
	// lfd f31,-104(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -104);
	// b 0x82ca2c1c
	return;
}

PPC_WEAK_FUNC(sub_83006988) {
	__imp__sub_83006988(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006CB0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCVRegister v56{};
	PPCVRegister v57{};
	PPCVRegister v58{};
	PPCVRegister v59{};
	PPCVRegister v60{};
	PPCVRegister v61{};
	PPCVRegister v62{};
	PPCVRegister v63{};
	// lis r11,-32251
	r11.s64 = -2113601536;
	// vspltisw128 v63,4
	simd::store_i32(v63.u32, simd::set1_i32(int32_t(0x4)));
	// vor128 v61,v1,v1
	simd::store_i8(v61.u8, simd::load_i8(ctx.v1.u8));
	// vspltisw128 v62,8
	simd::store_i32(v62.u32, simd::set1_i32(int32_t(0x8)));
	// addi r11,r11,-5680
	r11.s64 = r11.s64 + -5680;
	// vspltisw128 v60,2
	simd::store_i32(v60.u32, simd::set1_i32(int32_t(0x2)));
	// vspltisw128 v59,1
	simd::store_i32(v59.u32, simd::set1_i32(int32_t(0x1)));
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// vcsxwfp128 v13,v63,0
	ctx.fpscr.enableFlushMode();
	simd::store_f32_aligned(ctx.v13.f32, simd::cvtepi32_f32(simd::load_i32(v63.s32)));
	// vcsxwfp128 v12,v62,0
	simd::store_f32_aligned(ctx.v12.f32, simd::cvtepi32_f32(simd::load_i32(v62.s32)));
	// addi r10,r10,-5696
	ctx.r10.s64 = ctx.r10.s64 + -5696;
	// vcsxwfp128 v11,v60,0
	simd::store_f32_aligned(ctx.v11.f32, simd::cvtepi32_f32(simd::load_i32(v60.s32)));
	// lvx128 v63,r0,r11
	simd::store_shuffled(v63, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// vcsxwfp128 v60,v59,8
	simd::store_f32_aligned(v60.f32, simd::mul_f32(simd::cvtepi32_f32(simd::load_i32(v59.s32)), simd::bitcast_f32(simd::set1_i32(0x3B800000))));
	// vspltw128 v58,v63,0
	simd::store_i32(v58.u32, simd::broadcast_lane_i32(simd::load_i32(v63.u32), 3));
	// vcsxwfp128 v57,v59,7
	simd::store_f32_aligned(v57.f32, simd::mul_f32(simd::cvtepi32_f32(simd::load_i32(v59.s32)), simd::bitcast_f32(simd::set1_i32(0x3C000000))));
	// vspltw128 v10,v63,2
	simd::store_i32(ctx.v10.u32, simd::broadcast_lane_i32(simd::load_i32(v63.u32), 1));
	// vcsxwfp128 v59,v59,9
	simd::store_f32_aligned(v59.f32, simd::mul_f32(simd::cvtepi32_f32(simd::load_i32(v59.s32)), simd::bitcast_f32(simd::set1_i32(0x3B000000))));
	// vspltw128 v9,v63,3
	simd::store_i32(ctx.v9.u32, simd::broadcast_lane_i32(simd::load_i32(v63.u32), 0));
	// lvx128 v62,r0,r10
	simd::store_shuffled(v62, simd::load_and_shuffle(base + ((ctx.r10.u32) & ~0xF), VectorMaskL));
	// vspltw128 v8,v63,1
	simd::store_i32(ctx.v8.u32, simd::broadcast_lane_i32(simd::load_i32(v63.u32), 2));
	// vmulfp128 v0,v61,v58
	simd::store_f32_aligned(ctx.v0.f32, simd::mul_f32(simd::load_f32_aligned(v61.f32), simd::load_f32_aligned(v58.f32)));
	// vspltw128 v63,v62,2
	simd::store_i32(v63.u32, simd::broadcast_lane_i32(simd::load_i32(v62.u32), 1));
	// vspltw128 v58,v62,1
	simd::store_i32(v58.u32, simd::broadcast_lane_i32(simd::load_i32(v62.u32), 2));
	// vspltw128 v56,v62,0
	simd::store_i32(v56.u32, simd::broadcast_lane_i32(simd::load_i32(v62.u32), 3));
	// vspltw128 v62,v62,3
	simd::store_i32(v62.u32, simd::broadcast_lane_i32(simd::load_i32(v62.u32), 0));
	// vcmpgtfp128 v7,v63,v61
	simd::store_f32_aligned(ctx.v7.f32, simd::cmpgt_f32(simd::load_f32_aligned(v63.f32), simd::load_f32_aligned(v61.f32)));
	// vcmpgtfp128 v6,v58,v61
	simd::store_f32_aligned(ctx.v6.f32, simd::cmpgt_f32(simd::load_f32_aligned(v58.f32), simd::load_f32_aligned(v61.f32)));
	// vcmpgtfp128 v5,v56,v61
	simd::store_f32_aligned(ctx.v5.f32, simd::cmpgt_f32(simd::load_f32_aligned(v56.f32), simd::load_f32_aligned(v61.f32)));
	// vmaddfp v13,v0,v13,v10
	simd::store_f32_aligned(ctx.v13.f32, simd::add_f32(simd::mul_f32(simd::load_f32_aligned(ctx.v0.f32), simd::load_f32_aligned(ctx.v13.f32)), simd::load_f32_aligned(ctx.v10.f32)));
	// vor v10,v0,v0
	simd::store_i8(ctx.v10.u8, simd::load_i8(ctx.v0.u8));
	// vmaddfp v12,v0,v12,v9
	simd::store_f32_aligned(ctx.v12.f32, simd::add_f32(simd::mul_f32(simd::load_f32_aligned(ctx.v0.f32), simd::load_f32_aligned(ctx.v12.f32)), simd::load_f32_aligned(ctx.v9.f32)));
	// vmaddfp v0,v0,v11,v8
	simd::store_f32_aligned(ctx.v0.f32, simd::add_f32(simd::mul_f32(simd::load_f32_aligned(ctx.v0.f32), simd::load_f32_aligned(ctx.v11.f32)), simd::load_f32_aligned(ctx.v8.f32)));
	// vmulfp128 v63,v13,v60
	simd::store_f32_aligned(v63.f32, simd::mul_f32(simd::load_f32_aligned(ctx.v13.f32), simd::load_f32_aligned(v60.f32)));
	// vmulfp128 v60,v12,v57
	simd::store_f32_aligned(v60.f32, simd::mul_f32(simd::load_f32_aligned(ctx.v12.f32), simd::load_f32_aligned(v57.f32)));
	// vmulfp128 v59,v0,v59
	simd::store_f32_aligned(v59.f32, simd::mul_f32(simd::load_f32_aligned(ctx.v0.f32), simd::load_f32_aligned(v59.f32)));
	// vrfiz128 v63,v63
	simd::store_f32(v63.f32, simd::round_f32(simd::load_f32(v63.f32), simd::round_to_zero));
	// vrfiz128 v60,v60
	simd::store_f32(v60.f32, simd::round_f32(simd::load_f32(v60.f32), simd::round_to_zero));
	// vrfiz128 v59,v59
	simd::store_f32(v59.f32, simd::round_f32(simd::load_f32(v59.f32), simd::round_to_zero));
	// vaddfp128 v13,v13,v63
	simd::store_f32_aligned(ctx.v13.f32, simd::add_f32(simd::load_f32_aligned(ctx.v13.f32), simd::load_f32_aligned(v63.f32)));
	// vaddfp128 v12,v12,v60
	simd::store_f32_aligned(ctx.v12.f32, simd::add_f32(simd::load_f32_aligned(ctx.v12.f32), simd::load_f32_aligned(v60.f32)));
	// vaddfp128 v0,v0,v59
	simd::store_f32_aligned(ctx.v0.f32, simd::add_f32(simd::load_f32_aligned(ctx.v0.f32), simd::load_f32_aligned(v59.f32)));
	// vsel v13,v12,v13,v7
	simd::store_i8(ctx.v13.u8, simd::select_i8(simd::load_i8(ctx.v12.u8), simd::load_i8(ctx.v13.u8), simd::load_i8(ctx.v7.u8)));
	// vsel v0,v13,v0,v6
	simd::store_i8(ctx.v0.u8, simd::select_i8(simd::load_i8(ctx.v13.u8), simd::load_i8(ctx.v0.u8), simd::load_i8(ctx.v6.u8)));
	// vsel v0,v0,v10,v5
	simd::store_i8(ctx.v0.u8, simd::select_i8(simd::load_i8(ctx.v0.u8), simd::load_i8(ctx.v10.u8), simd::load_i8(ctx.v5.u8)));
	// vmulfp128 v1,v0,v62
	simd::store_f32_aligned(ctx.v1.f32, simd::mul_f32(simd::load_f32_aligned(ctx.v0.f32), simd::load_f32_aligned(v62.f32)));
	// vrlimi128 v1,v61,1,0
	simd::store_f32(ctx.v1.f32, simd::blend_f32<1>(simd::load_f32(ctx.v1.f32), simd::permute_f32<228>(simd::load_f32(v61.f32))));
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_83006CB0) {
	__imp__sub_83006CB0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_83006D70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCVRegister v63{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r29,r1,96
	r29.s64 = ctx.r1.s64 + 96;
	// addi r31,r4,28
	r31.s64 = ctx.r4.s64 + 28;
	// li r30,4
	r30.s64 = 4;
loc_83006D8C:
	// lwz r11,-16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + -16);
	// lis r5,2
	ctx.r5.s64 = 131072;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// rlwinm r11,r11,1,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r5,r5,1
	ctx.r5.u64 = ctx.r5.u64 | 1;
	// add r4,r11,r28
	ctx.r4.u64 = r11.u64 + r28.u64;
	// bl 0x8300b4a8
	sub_8300B4A8(ctx, base);
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + 0);
	// lhz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r1.u32 + 80);
	// addi r11,r1,82
	r11.s64 = ctx.r1.s64 + 82;
	// lwz r7,16(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + 16);
	// addi r10,r1,84
	ctx.r10.s64 = ctx.r1.s64 + 84;
	// and r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 & ctx.r8.u64;
	// addic. r30,r30,-1
	xer.ca = r30.u32 > 0;
	r30.s64 = r30.s64 + -1;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// srw r9,r9,r7
	ctx.r9.u64 = ctx.r7.u8 & 0x20 ? 0 : (ctx.r9.u32 >> (ctx.r7.u8 & 0x3F));
	// sth r9,82(r1)
	PPC_STORE_U16(ctx.r1.u32 + 82, ctx.r9.u16);
	// lvlx v0,0,r11
	temp.u32 = r0.u32 + r11.u32;
	simd::store_shuffled(ctx.v0,
		simde_mm_shuffle_epi8(
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(base + ((temp).u32 & ~0xF))),
			simde_mm_load_si128(reinterpret_cast<const simde__m128i*>(&VectorMaskL[((temp).u32 & 0xF) * 16]))
		));
	// vsplth v0,v0,0
	simd::store_i16(reinterpret_cast<uint16_t*>(ctx.v0.u16), simd::splat_halfword(*reinterpret_cast<const simd::vec128i*>(ctx.v0.u16), 7));
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// vupkd3d128 v63,v0,20
	__builtin_trap();
	// stvewx128 v63,r0,r10
	PPC_STORE_U32((ctx.r10.u32) & ~0x3, simd::extract_u32(*reinterpret_cast<const simd::vec128i*>(&v63.u32), 3 - ((ctx.r10.u32) & 0xF) >> 2));
	// lfs f0,84(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r29)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r29.u32 + 0, temp.u32);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// bne 0x83006d8c
	if (!cr0.eq) goto loc_83006D8C;
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// lvx128 v1,r0,r11
	simd::store_shuffled(ctx.v1, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_83006D70) {
	__imp__sub_83006D70(ctx, base);
}

