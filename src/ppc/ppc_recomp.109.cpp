#include "ppc_recomp_shared.h"

PPC_FUNC_IMPL(__imp__sub_82BD78B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r4,-10002
	ctx.r4.s64 = -10002;
	// addi r30,r10,-28000
	r30.s64 = ctx.r10.s64 + -28000;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r9,68(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(68) );
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,72(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(72) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r6,-32247
	ctx.r6.s64 = -2113339392;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r6,880
	ctx.r5.s64 = ctx.r6.s64 + 880;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// bl 0x82bc7060
	sub_82BC7060(ctx, base);
	// lis r5,-32241
	ctx.r5.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r5,9160
	ctx.r4.s64 = ctx.r5.s64 + 9160;
	// li r5,7
	ctx.r5.s64 = 7;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// lis r4,-32241
	ctx.r4.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r4,9168
	ctx.r5.s64 = ctx.r4.s64 + 9168;
	// li r4,-10002
	ctx.r4.s64 = -10002;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r11,-32067
	r11.s64 = -2101542912;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,24824
	ctx.r4.s64 = r11.s64 + 24824;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// lis r10,-32067
	ctx.r10.s64 = -2101542912;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r10,25072
	ctx.r4.s64 = ctx.r10.s64 + 25072;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r9,9180
	ctx.r5.s64 = ctx.r9.s64 + 9180;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r8,-32067
	ctx.r8.s64 = -2101542912;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r8,24328
	ctx.r4.s64 = ctx.r8.s64 + 24328;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// lis r7,-32067
	ctx.r7.s64 = -2101542912;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r7,24576
	ctx.r4.s64 = ctx.r7.s64 + 24576;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// lis r6,-32241
	ctx.r6.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r6,9188
	ctx.r5.s64 = ctx.r6.s64 + 9188;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82bc5cd8
	sub_82BC5CD8(ctx, base);
	// lwz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r4,-2
	ctx.r4.s64 = -2;
	// lwz r11,-8(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(-8) );
	// stw r11,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r11.u32);
	// lwz r10,-4(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(-4) );
	// stw r10,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bl 0x82bc5ff0
	sub_82BC5FF0(ctx, base);
	// lis r8,-32241
	ctx.r8.s64 = -2112946176;
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r8,9196
	ctx.r4.s64 = ctx.r8.s64 + 9196;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// lis r7,-32241
	ctx.r7.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r7,9200
	ctx.r5.s64 = ctx.r7.s64 + 9200;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r6,-32067
	ctx.r6.s64 = -2101542912;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r6,28848
	ctx.r4.s64 = ctx.r6.s64 + 28848;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// lis r5,-32241
	ctx.r5.s64 = -2112946176;
	// li r4,-10002
	ctx.r4.s64 = -10002;
	// addi r5,r5,9208
	ctx.r5.s64 = ctx.r5.s64 + 9208;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD78B0) {
	__imp__sub_82BD78B0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7A58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd78b0
	sub_82BD78B0(ctx, base);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// addi r5,r11,1080
	ctx.r5.s64 = r11.s64 + 1080;
	// addi r4,r10,9220
	ctx.r4.s64 = ctx.r10.s64 + 9220;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc7060
	sub_82BC7060(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7A58) {
	__imp__sub_82BD7A58(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7AA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r29,0(r3)
	r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82bd7af8
	if (cr6.eq) goto loc_82BD7AF8;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r11,1
	r11.s64 = 1;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BD7AF8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// beq cr6,0x82bd7b3c
	if (cr6.eq) goto loc_82BD7B3C;
	// bl 0x83000f30
	sub_83000F30(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// addi r4,r11,-4584
	ctx.r4.s64 = r11.s64 + -4584;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// b 0x82bd7b54
	goto loc_82BD7B54;
loc_82BD7B3C:
	// bl 0x83000f30
	sub_83000F30(ctx, base);
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r11,-6332
	ctx.r4.s64 = r11.s64 + -6332;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
loc_82BD7B54:
	// extsw r11,r29
	r11.s64 = r29.s32;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r9,3
	ctx.r9.s64 = 3;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// lfd f0,112(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// li r3,3
	ctx.r3.s64 = 3;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BD7AA8) {
	__imp__sub_82BD7AA8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7B90) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// bl 0x83000f30
	sub_83000F30(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// addi r4,r11,-4584
	ctx.r4.s64 = r11.s64 + -4584;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// beq cr6,0x82bd7c20
	if (cr6.eq) goto loc_82BD7C20;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bd7bfc
	if (!cr6.eq) goto loc_82BD7BFC;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x82bd7c28
	goto loc_82BD7C28;
loc_82BD7BFC:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd7c18
	if (cr6.lt) goto loc_82BD7C18;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD7C18:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
loc_82BD7C20:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addi r5,r11,16
	ctx.r5.s64 = r11.s64 + 16;
loc_82BD7C28:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc67f0
	sub_82BC67F0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7B90) {
	__imp__sub_82BD7B90(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7C50) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bd7c94
	if (!cr6.lt) goto loc_82BD7C94;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bd7c94
	if (cr6.eq) goto loc_82BD7C94;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82bd7ca8
	if (!cr6.eq) goto loc_82BD7CA8;
loc_82BD7C94:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r5,r11,8120
	ctx.r5.s64 = r11.s64 + 8120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc67f0
	sub_82BC67F0(ctx, base);
loc_82BD7CA8:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822af338
	sub_822AF338(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r5,r11,-4576
	ctx.r5.s64 = r11.s64 + -4576;
	// li r4,-10000
	ctx.r4.s64 = -10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82bd7d38
	if (cr6.eq) goto loc_82BD7D38;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5d40
	sub_82BC5D40(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bd7d38
	if (cr6.eq) goto loc_82BD7D38;
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc58d0
	sub_82BC58D0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bd7d38
	if (cr6.eq) goto loc_82BD7D38;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82bd7d24
	if (!cr6.eq) goto loc_82BD7D24;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r5,11
	ctx.r5.s64 = 11;
	// addi r4,r11,-4568
	ctx.r4.s64 = r11.s64 + -4568;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// b 0x82bd7d50
	goto loc_82BD7D50;
loc_82BD7D24:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r4,r11,-4556
	ctx.r4.s64 = r11.s64 + -4556;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// b 0x82bd7d50
	goto loc_82BD7D50;
loc_82BD7D38:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
loc_82BD7D50:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7C50) {
	__imp__sub_82BD7C50(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7D70) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r5,r11,-4576
	ctx.r5.s64 = r11.s64 + -4576;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82bc6ce8
	sub_82BC6CE8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bd7db8
	if (!cr6.eq) goto loc_82BD7DB8;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r4,r11,-4548
	ctx.r4.s64 = r11.s64 + -4548;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BD7DB8:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7D70) {
	__imp__sub_82BD7D70(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7DD8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc6558
	sub_82BC6558(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r10,-4576
	ctx.r5.s64 = ctx.r10.s64 + -4576;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// li r4,-10000
	ctx.r4.s64 = -10000;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5ff0
	sub_82BC5FF0(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7DD8) {
	__imp__sub_82BD7DD8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7E40) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r5,r11,-4576
	ctx.r5.s64 = r11.s64 + -4576;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc6ce8
	sub_82BC6CE8(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// bl 0x82bd7aa8
	sub_82BD7AA8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7E40) {
	__imp__sub_82BD7E40(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7E98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r5,r11,-4576
	ctx.r5.s64 = r11.s64 + -4576;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc6ce8
	sub_82BC6CE8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// bl 0x82ca49d8
	sub_82CA49D8(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// cntlzw r9,r3
	ctx.r9.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// rlwinm r4,r9,27,31,31
	ctx.r4.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7aa8
	sub_82BD7AA8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7E98) {
	__imp__sub_82BD7E98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7F00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc5dd0
	sub_82BC5DD0(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r4,-1
	ctx.r4.s64 = -1;
	// addi r5,r11,-4516
	ctx.r5.s64 = r11.s64 + -4516;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// cmpwi cr6,r10,6
	cr6.compare<int32_t>(ctx.r10.s32, 6, xer);
	// bne cr6,0x82bd7f58
	if (!cr6.eq) goto loc_82BD7F58;
	// lwz r11,-8(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// lbz r10,6(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 6);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82bd7f58
	if (cr6.eq) goto loc_82BD7F58;
	// lwz r11,16(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(16) );
	// b 0x82bd7f5c
	goto loc_82BD7F5C;
loc_82BD7F58:
	// li r11,0
	r11.s64 = 0;
loc_82BD7F5C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7F00) {
	__imp__sub_82BD7F00(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7F80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bd7fc0
	if (!cr6.lt) goto loc_82BD7FC0;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bd7fc0
	if (cr6.eq) goto loc_82BD7FC0;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82bd7fd0
	if (!cr6.eq) goto loc_82BD7FD0;
loc_82BD7FC0:
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1548
	sub_821E1548(ctx, base);
loc_82BD7FD0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7d70
	sub_82BD7D70(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7f00
	sub_82BD7F00(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7F80) {
	__imp__sub_82BD7F80(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD7FF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r5,r11,-4576
	ctx.r5.s64 = r11.s64 + -4576;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82bc6ce8
	sub_82BC6CE8(ctx, base);
	// lwz r31,0(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82bd8060
	if (cr6.eq) goto loc_82BD8060;
	// bl 0x82240578
	sub_82240578(ctx, base);
	// cmplw cr6,r31,r3
	cr6.compare<uint32_t>(r31.u32, ctx.r3.u32, xer);
	// beq cr6,0x82bd8060
	if (cr6.eq) goto loc_82BD8060;
	// bl 0x82240578
	sub_82240578(ctx, base);
	// addi r11,r3,32
	r11.s64 = ctx.r3.s64 + 32;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x82bd8060
	if (cr6.eq) goto loc_82BD8060;
	// bl 0x82240578
	sub_82240578(ctx, base);
	// addi r11,r3,64
	r11.s64 = ctx.r3.s64 + 64;
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x82bd8060
	if (cr6.eq) goto loc_82BD8060;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bd7f00
	sub_82BD7F00(ctx, base);
loc_82BD8060:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD7FF8) {
	__imp__sub_82BD7FF8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8080) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r5,r11,-4576
	ctx.r5.s64 = r11.s64 + -4576;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc6ce8
	sub_82BC6CE8(ctx, base);
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82bd80c8
	if (!cr6.eq) goto loc_82BD80C8;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r5,13
	ctx.r5.s64 = 13;
	// addi r4,r11,-4508
	ctx.r4.s64 = r11.s64 + -4508;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// b 0x82bd80d4
	goto loc_82BD80D4;
loc_82BD80C8:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-4492
	ctx.r4.s64 = r11.s64 + -4492;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
loc_82BD80D4:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD8080) {
	__imp__sub_82BD8080(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD80F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd811c
	if (cr6.lt) goto loc_82BD811C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD811C:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bd8170
	if (cr6.eq) goto loc_82BD8170;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bd8140
	if (!cr6.eq) goto loc_82BD8140;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bd817c
	goto loc_82BD817C;
loc_82BD8140:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd815c
	if (cr6.lt) goto loc_82BD815C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD815C:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bd8170
	if (cr6.lt) goto loc_82BD8170;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD8170:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bd8194
	if (!cr0.eq) goto loc_82BD8194;
loc_82BD817C:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BD8194:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,11932
	ctx.r5.s64 = r11.s64 + 11932;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6e30
	sub_82BC6E30(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7dd8
	sub_82BD7DD8(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca4890
	sub_82CA4890(ctx, base);
	// stw r3,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r3.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bd81ec
	if (!cr6.eq) goto loc_82BD81EC;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7aa8
	sub_82BD7AA8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
loc_82BD81EC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BD80F0) {
	__imp__sub_82BD80F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD81F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd8224
	if (cr6.lt) goto loc_82BD8224;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD8224:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bd8278
	if (cr6.eq) goto loc_82BD8278;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bd8248
	if (!cr6.eq) goto loc_82BD8248;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bd8284
	goto loc_82BD8284;
loc_82BD8248:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd8264
	if (cr6.lt) goto loc_82BD8264;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD8264:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bd8278
	if (cr6.lt) goto loc_82BD8278;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD8278:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bd829c
	if (!cr0.eq) goto loc_82BD829C;
loc_82BD8284:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BD829C:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,11932
	ctx.r5.s64 = r11.s64 + 11932;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6e30
	sub_82BC6E30(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7dd8
	sub_82BD7DD8(ctx, base);
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r4,r10,-4480
	ctx.r4.s64 = ctx.r10.s64 + -4480;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// stw r9,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r9.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7aa8
	sub_82BD7AA8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BD81F8) {
	__imp__sub_82BD81F8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD82F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd7dd8
	sub_82BD7DD8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x83000d90
	sub_83000D90(ctx, base);
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bd8394
	if (!cr6.eq) goto loc_82BD8394;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r30,0(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bl 0x83000f30
	sub_83000F30(ctx, base);
	// lis r8,-32245
	ctx.r8.s64 = -2113208320;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r8,-6332
	ctx.r4.s64 = ctx.r8.s64 + -6332;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// extsw r7,r30
	ctx.r7.s64 = r30.s32;
	// lwz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r6,3
	ctx.r6.s64 = 3;
	// std r7,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r7.u64);
	// lfd f0,112(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// li r3,3
	ctx.r3.s64 = 3;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r5)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r5.u32 + 0, temp.u32);
	// stw r6,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r6.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,8
	ctx.r4.s64 = r11.s64 + 8;
	// stw r4,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r4.u32);
	// b 0x82bd8398
	goto loc_82BD8398;
loc_82BD8394:
	// li r3,1
	ctx.r3.s64 = 1;
loc_82BD8398:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD82F0) {
	__imp__sub_82BD82F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD83B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r9,5
	ctx.r9.s64 = 5;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// addi r11,r31,76
	r11.s64 = r31.s64 + 76;
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// lwz r7,0(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// lwz r6,12(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(12) );
	// stw r9,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r9.u32);
	// rotlwi r3,r6,0
	ctx.r3.u64 = rotl32(ctx.r6.u32, 0);
	// stw r6,76(r31)
	PPC_STORE_U32(r31.u32 + 76, ctx.r6.u32);
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lwz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r4,-1
	ctx.r4.s64 = -1;
	// stw r11,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, r11.u32);
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bl 0x822af338
	sub_822AF338(ctx, base);
	// lwz r30,0(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82bd8448
	if (!cr6.eq) goto loc_82BD8448;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// rlwinm r10,r29,2,0,29
	ctx.r10.u64 = rotl64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,560
	r11.s64 = r11.s64 + 560;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// add r8,r10,r11
	ctx.r8.u64 = ctx.r10.u64 + r11.u64;
	// addi r4,r9,-4456
	ctx.r4.s64 = ctx.r9.s64 + -4456;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,-4(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(-4) );
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BD8448:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BD83B0) {
	__imp__sub_82BD83B0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8458) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bd8584
	if (!cr6.lt) goto loc_82BD8584;
	// lis r9,-32247
	ctx.r9.s64 = -2113339392;
	// addi r29,r9,1876
	r29.s64 = ctx.r9.s64 + 1876;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82bd8584
	if (cr6.eq) goto loc_82BD8584;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82bd8584
	if (!cr6.gt) goto loc_82BD8584;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd84a8
	if (cr6.lt) goto loc_82BD84A8;
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82BD84A8:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// beq cr6,0x82bd84f8
	if (cr6.eq) goto loc_82BD84F8;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bd853c
	if (cr6.eq) goto loc_82BD853C;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd84e4
	if (cr6.lt) goto loc_82BD84E4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD84E4:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd84f8
	if (cr6.lt) goto loc_82BD84F8;
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82BD84F8:
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x82bd853c
	if (cr0.eq) goto loc_82BD853C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7dd8
	sub_82BD7DD8(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca4890
	sub_82CA4890(ctx, base);
	// stw r3,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r3.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bd8574
	if (!cr6.eq) goto loc_82BD8574;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7b90
	sub_82BD7B90(ctx, base);
	// b 0x82bd8574
	goto loc_82BD8574;
loc_82BD853C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7d70
	sub_82BD7D70(ctx, base);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bd8558
	if (cr6.lt) goto loc_82BD8558;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_82BD8558:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
loc_82BD8574:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
loc_82BD8584:
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// li r9,5
	ctx.r9.s64 = 5;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// addi r11,r31,76
	r11.s64 = r31.s64 + 76;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// lwz r7,0(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// lwz r6,12(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(12) );
	// stw r9,80(r31)
	PPC_STORE_U32(r31.u32 + 80, ctx.r9.u32);
	// rotlwi r3,r6,0
	ctx.r3.u64 = rotl32(ctx.r6.u32, 0);
	// stw r6,76(r31)
	PPC_STORE_U32(r31.u32 + 76, ctx.r6.u32);
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(0) );
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// lwz r10,4(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(4) );
	// stw r10,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BD8458) {
	__imp__sub_82BD8458(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD85E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32246
	r11.s64 = -2113273856;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r5,r11,11932
	ctx.r5.s64 = r11.s64 + 11932;
	// b 0x82bd8458
	sub_82BD8458(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_82BD85E0) {
	__imp__sub_82BD85E0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD85F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// lis r11,-32246
	r11.s64 = -2113273856;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r5,r11,11952
	ctx.r5.s64 = r11.s64 + 11952;
	// b 0x82bd8458
	sub_82BD8458(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_82BD85F0) {
	__imp__sub_82BD85F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8600) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd7d70
	sub_82BD7D70(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd8630
	if (cr6.lt) goto loc_82BD8630;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r11,r11,1876
	r11.s64 = r11.s64 + 1876;
loc_82BD8630:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,1
	ctx.r7.s64 = 1;
	// lis r6,-32066
	ctx.r6.s64 = -2101477376;
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r6,-29120
	ctx.r4.s64 = ctx.r6.s64 + -29120;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// stw r7,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r7.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD8600) {
	__imp__sub_82BD8600(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8698) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bge cr6,0x82bd86d4
	if (!cr6.lt) goto loc_82BD86D4;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r30,r10,1876
	r30.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bd86d4
	if (cr6.eq) goto loc_82BD86D4;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bgt cr6,0x82bd86f4
	if (cr6.gt) goto loc_82BD86F4;
loc_82BD86D4:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1548
	sub_821E1548(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd8600
	sub_82BD8600(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BD86F4:
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd8700
	if (cr6.lt) goto loc_82BD8700;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82BD8700:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// beq cr6,0x82bd8758
	if (cr6.eq) goto loc_82BD8758;
	// mr r4,r11
	ctx.r4.u64 = r11.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bd8728
	if (!cr6.eq) goto loc_82BD8728;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bd8764
	goto loc_82BD8764;
loc_82BD8728:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd8744
	if (cr6.lt) goto loc_82BD8744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD8744:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd8758
	if (cr6.lt) goto loc_82BD8758;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82BD8758:
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bd877c
	if (!cr0.eq) goto loc_82BD877C;
loc_82BD8764:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BD877C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7dd8
	sub_82BD7DD8(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r4,r11,11932
	ctx.r4.s64 = r11.s64 + 11932;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca4890
	sub_82CA4890(ctx, base);
	// stw r3,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r3.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bd87b4
	if (!cr6.eq) goto loc_82BD87B4;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7b90
	sub_82BD7B90(ctx, base);
loc_82BD87B4:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// srawi r4,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r4.s64 = ctx.r9.s32 >> 3;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lwz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,1
	ctx.r10.s64 = 1;
	// lis r6,-32066
	ctx.r6.s64 = -2101477376;
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r6,-29120
	ctx.r4.s64 = ctx.r6.s64 + -29120;
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r11.u32);
	// lwz r9,4(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(4) );
	// stw r9,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BD8698) {
	__imp__sub_82BD8698(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8828) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-656(r1)
	ea = -656 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r3,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r3.u32);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// addi r11,r1,92
	r11.s64 = ctx.r1.s64 + 92;
	// li r29,4
	r29.s64 = 4;
loc_82BD8850:
	// addi r10,r1,92
	ctx.r10.s64 = ctx.r1.s64 + 92;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// subf. r30,r10,r11
	r30.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x82bd88c0
	if (cr0.eq) goto loc_82BD88C0;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(16) );
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd887c
	if (cr6.lt) goto loc_82BD887C;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD887C:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// stw r29,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r29.u32);
	// addi r10,r1,92
	ctx.r10.s64 = ctx.r1.s64 + 92;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(84) );
	// addi r7,r8,1
	ctx.r7.s64 = ctx.r8.s64 + 1;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// bl 0x82bc75d8
	sub_82BC75D8(ctx, base);
loc_82BD88C0:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// li r4,512
	ctx.r4.s64 = 512;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x82ca8fb8
	sub_82CA8FB8(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82bd8924
	if (cr6.eq) goto loc_82BD8924;
	// addi r11,r1,92
	r11.s64 = ctx.r1.s64 + 92;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_82BD88E0:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82bd88e0
	if (!cr6.eq) goto loc_82BD88E0;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r11,r11,0
	r11.u64 = rotl32(r11.u32, 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82bd8914
	if (cr6.eq) goto loc_82BD8914;
	// addi r10,r1,91
	ctx.r10.s64 = ctx.r1.s64 + 91;
	// lbzx r9,r11,r10
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,10
	cr6.compare<uint32_t>(ctx.r9.u32, 10, xer);
	// beq cr6,0x82bd8960
	if (cr6.eq) goto loc_82BD8960;
loc_82BD8914:
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(88) );
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// b 0x82bd8850
	goto loc_82BD8850;
loc_82BD8924:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82bc7568
	sub_82BC7568(ctx, base);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(84) );
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(88) );
	// bl 0x82bc6490
	sub_82BC6490(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// li r4,-1
	ctx.r4.s64 = -1;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82bc5b30
	sub_82BC5B30(ctx, base);
	// subfic r10,r3,0
	xer.ca = ctx.r3.u32 <= 0;
	ctx.r10.s64 = 0 - ctx.r3.s64;
	// subfe r9,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r3,r9,31
	ctx.r3.u64 = ctx.r9.u32 & 0x1;
	// addi r1,r1,656
	ctx.r1.s64 = ctx.r1.s64 + 656;
	// b 0x82ca2c34
	return;
loc_82BD8960:
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// bl 0x82bc7568
	sub_82BC7568(ctx, base);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(84) );
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(88) );
	// bl 0x82bc6490
	sub_82BC6490(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,656
	ctx.r1.s64 = ctx.r1.s64 + 656;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BD8828) {
	__imp__sub_82BD8828(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8990) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// stwu r1,-672(r1)
	ea = -672 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,92
	r11.s64 = ctx.r1.s64 + 92;
	// stw r3,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r3.u32);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// li r28,512
	r28.s64 = 512;
	// li r26,4
	r26.s64 = 4;
	// b 0x82bd89cc
	goto loc_82BD89CC;
loc_82BD89C8:
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(88) );
loc_82BD89CC:
	// addi r10,r1,92
	ctx.r10.s64 = ctx.r1.s64 + 92;
	// subf. r29,r10,r11
	r29.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// beq 0x82bd8a38
	if (cr0.eq) goto loc_82BD8A38;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(16) );
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd89f4
	if (cr6.lt) goto loc_82BD89F4;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD89F4:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r29,8(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r1,92
	ctx.r4.s64 = ctx.r1.s64 + 92;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// stw r3,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r3.u32);
	// stw r26,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r26.u32);
	// addi r10,r1,92
	ctx.r10.s64 = ctx.r1.s64 + 92;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(84) );
	// addi r7,r8,1
	ctx.r7.s64 = ctx.r8.s64 + 1;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// stw r7,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r7.u32);
	// bl 0x82bc75d8
	sub_82BC75D8(ctx, base);
loc_82BD8A38:
	// cmplw cr6,r28,r30
	cr6.compare<uint32_t>(r28.u32, r30.u32, xer);
	// ble cr6,0x82bd8a44
	if (!cr6.gt) goto loc_82BD8A44;
	// mr r28,r30
	r28.u64 = r30.u64;
loc_82BD8A44:
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,92
	ctx.r3.s64 = ctx.r1.s64 + 92;
	// bl 0x82cab340
	sub_82CAB340(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// subf. r30,r3,r30
	r30.s64 = r30.s64 - ctx.r3.s64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// beq 0x82bd8a74
	if (cr0.eq) goto loc_82BD8A74;
	// cmplw cr6,r3,r28
	cr6.compare<uint32_t>(ctx.r3.u32, r28.u32, xer);
	// beq cr6,0x82bd89c8
	if (cr6.eq) goto loc_82BD89C8;
loc_82BD8A74:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82bc7568
	sub_82BC7568(ctx, base);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(84) );
	// lwz r3,88(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(88) );
	// bl 0x82bc6490
	sub_82BC6490(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// beq cr6,0x82bd8ab0
	if (cr6.eq) goto loc_82BD8AB0;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82bc5b30
	sub_82BC5B30(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// li r3,0
	ctx.r3.s64 = 0;
	// beq cr6,0x82bd8ab4
	if (cr6.eq) goto loc_82BD8AB4;
loc_82BD8AB0:
	// li r3,1
	ctx.r3.s64 = 1;
loc_82BD8AB4:
	// addi r1,r1,672
	ctx.r1.s64 = ctx.r1.s64 + 672;
	// b 0x82ca2c2c
	return;
}

PPC_WEAK_FUNC(sub_82BD8990) {
	__imp__sub_82BD8990(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8AC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bc8
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r22,r5
	r22.u64 = ctx.r5.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// subf r9,r11,r10
	ctx.r9.s64 = ctx.r10.s64 - r11.s64;
	// srawi r11,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	r11.s64 = ctx.r9.s32 >> 3;
	// addi r27,r11,-1
	r27.s64 = r11.s64 + -1;
	// bl 0x83001810
	sub_83001810(ctx, base);
	// li r20,0
	r20.s64 = 0;
	// li r21,3
	r21.s64 = 3;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bne cr6,0x82bd8b98
	if (!cr6.eq) goto loc_82BD8B98;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82bd8828
	sub_82BD8828(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r28,r22,1
	r28.s64 = r22.s64 + 1;
loc_82BD8B18:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x83001448
	sub_83001448(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bd8d90
	if (cr6.eq) goto loc_82BD8D90;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r30,0(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r20,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r20.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bl 0x83000f30
	sub_83000F30(ctx, base);
	// lis r9,-32245
	ctx.r9.s64 = -2113208320;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r9,-6332
	ctx.r4.s64 = ctx.r9.s64 + -6332;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// extsw r8,r30
	ctx.r8.s64 = r30.s32;
	// lwz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r3,3
	ctx.r3.s64 = 3;
	// std r8,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r8.u64);
	// lfd f0,112(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r7)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r7.u32 + 0, temp.u32);
	// stw r21,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, r21.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r6,r11,8
	ctx.r6.s64 = r11.s64 + 8;
	// stw r6,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r6.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82ca2c18
	return;
loc_82BD8B98:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r27,20
	ctx.r4.s64 = r27.s64 + 20;
	// addi r5,r11,-4424
	ctx.r5.s64 = r11.s64 + -4424;
	// bl 0x82bc6d80
	sub_82BC6D80(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// li r30,1
	r30.s64 = 1;
	// mr r28,r22
	r28.u64 = r22.u64;
	// li r25,-1
	r25.s64 = -1;
	// addi r23,r11,-4428
	r23.s64 = r11.s64 + -4428;
	// addi r26,r10,1876
	r26.s64 = ctx.r10.s64 + 1876;
	// addi r24,r9,11164
	r24.s64 = ctx.r9.s64 + 11164;
loc_82BD8BCC:
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x82bd8b18
	if (cr6.eq) goto loc_82BD8B18;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// cmplw cr6,r3,r26
	cr6.compare<uint32_t>(ctx.r3.u32, r26.u32, xer);
	// beq cr6,0x82bd8c58
	if (cr6.eq) goto loc_82BD8C58;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x82bd8c58
	if (!cr6.eq) goto loc_82BD8C58;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc59d0
	sub_82BC59D0(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82bd8c44
	if (!cr6.eq) goto loc_82BD8C44;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x830014a8
	sub_830014A8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// bl 0x82cba2f8
	sub_82CBA2F8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
	// cntlzw r10,r11
	ctx.r10.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// xori r30,r9,1
	r30.u64 = ctx.r9.u64 ^ 1;
	// b 0x82bd8d64
	goto loc_82BD8D64;
loc_82BD8C44:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd8990
	sub_82BD8990(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82bd8d64
	goto loc_82BD8D64;
loc_82BD8C58:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bd8cb4
	if (cr6.eq) goto loc_82BD8CB4;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bd8c8c
	if (!cr6.eq) goto loc_82BD8C8C;
	// mr r30,r20
	r30.u64 = r20.u64;
	// b 0x82bd8ccc
	goto loc_82BD8CCC;
loc_82BD8C8C:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd8ca8
	if (cr6.lt) goto loc_82BD8CA8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD8CA8:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
loc_82BD8CB4:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x82bd8ccc
	if (cr0.eq) goto loc_82BD8CCC;
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// cmplwi cr6,r11,42
	cr6.compare<uint32_t>(r11.u32, 42, xer);
	// beq cr6,0x82bd8cdc
	if (cr6.eq) goto loc_82BD8CDC;
loc_82BD8CCC:
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc67f0
	sub_82BC67F0(ctx, base);
loc_82BD8CDC:
	// lbz r11,1(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 1);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,97
	cr6.compare<int32_t>(r11.s32, 97, xer);
	// beq cr6,0x82bd8d50
	if (cr6.eq) goto loc_82BD8D50;
	// cmpwi cr6,r11,108
	cr6.compare<int32_t>(r11.s32, 108, xer);
	// beq cr6,0x82bd8d3c
	if (cr6.eq) goto loc_82BD8D3C;
	// cmpwi cr6,r11,110
	cr6.compare<int32_t>(r11.s32, 110, xer);
	// bne cr6,0x82bd8d74
	if (!cr6.eq) goto loc_82BD8D74;
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x830011f8
	sub_830011F8(ctx, base);
	// cmpwi cr6,r3,1
	cr6.compare<int32_t>(ctx.r3.s32, 1, xer);
	// bne cr6,0x82bd8d34
	if (!cr6.eq) goto loc_82BD8D34;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lfs f0,112(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stw r21,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r21.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// b 0x82bd8d60
	goto loc_82BD8D60;
loc_82BD8D34:
	// mr r30,r20
	r30.u64 = r20.u64;
	// b 0x82bd8d64
	goto loc_82BD8D64;
loc_82BD8D3C:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd8828
	sub_82BD8828(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82bd8d64
	goto loc_82BD8D64;
loc_82BD8D50:
	// mr r5,r25
	ctx.r5.u64 = r25.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd8990
	sub_82BD8990(ctx, base);
loc_82BD8D60:
	// li r30,1
	r30.s64 = 1;
loc_82BD8D64:
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x82bd8bcc
	if (!cr6.eq) goto loc_82BD8BCC;
	// b 0x82bd8b18
	goto loc_82BD8B18;
loc_82BD8D74:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// addi r5,r11,-4404
	ctx.r5.s64 = r11.s64 + -4404;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc67f0
	sub_82BC67F0(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82ca2c18
	return;
loc_82BD8D90:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x82bd8db4
	if (!cr6.eq) goto loc_82BD8DB4;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r20,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r20.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
loc_82BD8DB4:
	// subf r3,r22,r28
	ctx.r3.s64 = r28.s64 - r22.s64;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82ca2c18
	return;
}

PPC_WEAK_FUNC(sub_82BD8AC0) {
	__imp__sub_82BD8AC0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8DC0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd83b0
	sub_82BD83B0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82bd8ac0
	sub_82BD8AC0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD8DC0) {
	__imp__sub_82BD8DC0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8E00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd7d70
	sub_82BD7D70(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,2
	ctx.r5.s64 = 2;
	// bl 0x82bd8ac0
	sub_82BD8AC0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD8E00) {
	__imp__sub_82BD8E00(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8E40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,-10003
	ctx.r4.s64 = -10003;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x822af338
	sub_822AF338(ctx, base);
	// lwz r30,0(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82bd8e74
	if (!cr6.eq) goto loc_82BD8E74;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-4388
	ctx.r4.s64 = r11.s64 + -4388;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BD8E74:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd8828
	sub_82BD8828(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x83001448
	sub_83001448(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bd8ebc
	if (cr6.eq) goto loc_82BD8EBC;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r3,0(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// bl 0x83000f30
	sub_83000F30(ctx, base);
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r11,-6332
	ctx.r4.s64 = r11.s64 + -6332;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c3c
	return;
loc_82BD8EBC:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82bd8ed0
	if (cr6.eq) goto loc_82BD8ED0;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c3c
	return;
loc_82BD8ED0:
	// li r4,-10004
	ctx.r4.s64 = -10004;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5a30
	sub_82BC5A30(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bd8f70
	if (cr6.eq) goto loc_82BD8F70;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bge cr6,0x82bd8f1c
	if (!cr6.lt) goto loc_82BD8F1C;
	// li r10,0
	ctx.r10.s64 = 0;
loc_82BD8EF8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// rotlwi r8,r9,0
	ctx.r8.u64 = rotl32(ctx.r9.u32, 0);
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// lwz r7,12(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplw cr6,r8,r7
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r7.u32, xer);
	// blt cr6,0x82bd8ef8
	if (cr6.lt) goto loc_82BD8EF8;
loc_82BD8F1C:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(0) );
	// lbz r8,7(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 7);
	// cmplwi cr6,r8,1
	cr6.compare<uint32_t>(ctx.r8.u32, 1, xer);
	// blt cr6,0x82bd8f44
	if (cr6.lt) goto loc_82BD8F44;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// b 0x82bd8f4c
	goto loc_82BD8F4C;
loc_82BD8F44:
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r10,r10,1876
	ctx.r10.s64 = ctx.r10.s64 + 1876;
loc_82BD8F4C:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bd7f00
	sub_82BD7F00(ctx, base);
loc_82BD8F70:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BD8E40) {
	__imp__sub_82BD8E40(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD8F80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// stfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// li r31,1
	r31.s64 = 1;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// lwz r10,12(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(12) );
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// srawi r8,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	ctx.r8.s64 = ctx.r9.s32 >> 3;
	// addic. r27,r8,-1
	xer.ca = ctx.r8.u32 > 0;
	r27.s64 = ctx.r8.s64 + -1;
	cr0.compare<int32_t>(r27.s32, 0, xer);
	// beq 0x82bd9060
	if (cr0.eq) goto loc_82BD9060;
	// lis r8,-32246
	ctx.r8.s64 = -2113273856;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32247
	ctx.r9.s64 = -2113339392;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r25,r10,1744
	r25.s64 = ctx.r10.s64 + 1744;
	// lfs f31,-27468(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -27468);
	f31.f64 = double(temp.f32);
	// addi r26,r9,1876
	r26.s64 = ctx.r9.s64 + 1876;
	// addi r23,r11,3920
	r23.s64 = r11.s64 + 3920;
loc_82BD8FD8:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r27,r27,-1
	r27.s64 = r27.s64 + -1;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// cmplw cr6,r3,r26
	cr6.compare<uint32_t>(ctx.r3.u32, r26.u32, xer);
	// beq cr6,0x82bd907c
	if (cr6.eq) goto loc_82BD907C;
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// bne cr6,0x82bd907c
	if (!cr6.eq) goto loc_82BD907C;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x82bd9050
	if (cr6.eq) goto loc_82BD9050;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x82bd9030
	if (cr6.eq) goto loc_82BD9030;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// bl 0x82bcbd48
	sub_82BCBD48(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bd9030
	if (!cr6.eq) goto loc_82BD9030;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = f31.f64;
	// b 0x82bd9034
	goto loc_82BD9034;
loc_82BD9030:
	// lfs f1,0(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
loc_82BD9034:
	// stfd f1,32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82ca7120
	sub_82CA7120(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bgt cr6,0x82bd90d0
	if (cr6.gt) goto loc_82BD90D0;
loc_82BD9050:
	// li r31,0
	r31.s64 = 0;
loc_82BD9054:
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x82bd8fd8
	if (!cr6.eq) goto loc_82BD8FD8;
loc_82BD9060:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bd7aa8
	sub_82BD7AA8(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x82ca2c24
	return;
loc_82BD907C:
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bc5a88
	sub_82BC5A88(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82bd90a8
	if (!cr6.eq) goto loc_82BD90A8;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r5,16(r25)
	ctx.r5.u64 = PPC_LOAD_U32(r25.u32 + int32_t(16) );
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BD90A8:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x82bd9050
	if (cr6.eq) goto loc_82BD9050;
	// lwz r31,80(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca4d60
	sub_82CA4D60(ctx, base);
	// cmplw cr6,r3,r31
	cr6.compare<uint32_t>(ctx.r3.u32, r31.u32, xer);
	// bne cr6,0x82bd9050
	if (!cr6.eq) goto loc_82BD9050;
loc_82BD90D0:
	// li r31,1
	r31.s64 = 1;
	// b 0x82bd9054
	goto loc_82BD9054;
}

PPC_WEAK_FUNC(sub_82BD8F80) {
	__imp__sub_82BD8F80(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD90D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd83b0
	sub_82BD83B0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82bd8f80
	sub_82BD8F80(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD90D8) {
	__imp__sub_82BD90D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9118) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd7d70
	sub_82BD7D70(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,2
	ctx.r5.s64 = 2;
	// bl 0x82bd8f80
	sub_82BD8F80(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD9118) {
	__imp__sub_82BD9118(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9158) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd7d70
	sub_82BD7D70(ctx, base);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r30,r11,568
	r30.s64 = r11.s64 + 568;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r6,r30,12
	ctx.r6.s64 = r30.s64 + 12;
	// addi r5,r10,-4596
	ctx.r5.s64 = ctx.r10.s64 + -4596;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6af8
	sub_82BC6AF8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bge cr6,0x82bd91c4
	if (!cr6.lt) goto loc_82BD91C4;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bd91c4
	if (cr6.eq) goto loc_82BD91C4;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x82bd91cc
	if (cr6.gt) goto loc_82BD91CC;
loc_82BD91C4:
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x82bd91dc
	goto loc_82BD91DC;
loc_82BD91CC:
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6f00
	sub_82BC6F00(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
loc_82BD91DC:
	// rlwinm r11,r28,2,0,29
	r11.u64 = rotl64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwzx r5,r11,r30
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// bl 0x82ca5338
	sub_82CA5338(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bd926c
	if (cr6.eq) goto loc_82BD926C;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// lwz r30,0(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bl 0x83000f30
	sub_83000F30(ctx, base);
	// lis r8,-32245
	ctx.r8.s64 = -2113208320;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r8,-6332
	ctx.r4.s64 = ctx.r8.s64 + -6332;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// extsw r7,r30
	ctx.r7.s64 = r30.s32;
	// lwz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r6,3
	ctx.r6.s64 = 3;
	// std r7,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r7.u64);
	// lfd f0,112(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// li r3,3
	ctx.r3.s64 = 3;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r5)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r5.u32 + 0, temp.u32);
	// stw r6,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r6.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,8
	ctx.r4.s64 = r11.s64 + 8;
	// stw r4,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r4.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BD926C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82ca5670
	sub_82CA5670(ctx, base);
	// extsw r11,r3
	r11.s64 = ctx.r3.s32;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r9,3
	ctx.r9.s64 = 3;
	// std r11,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, r11.u64);
	// lfd f0,112(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// li r3,1
	ctx.r3.s64 = 1;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BD9158) {
	__imp__sub_82BD9158(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD92B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd7d70
	sub_82BD7D70(ctx, base);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r30,r11,596
	r30.s64 = r11.s64 + 596;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r6,r30,12
	ctx.r6.s64 = r30.s64 + 12;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6af8
	sub_82BC6AF8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bd9318
	if (!cr6.lt) goto loc_82BD9318;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bd9318
	if (cr6.eq) goto loc_82BD9318;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x82bd9320
	if (cr6.gt) goto loc_82BD9320;
loc_82BD9318:
	// li r6,512
	ctx.r6.s64 = 512;
	// b 0x82bd9330
	goto loc_82BD9330;
loc_82BD9320:
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6f00
	sub_82BC6F00(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
loc_82BD9330:
	// rlwinm r11,r28,2,0,29
	r11.u64 = rotl64(r28.u32 | (r28.u64 << 32), 2) & 0xFFFFFFFC;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwzx r5,r11,r30
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + r30.u32);
	// bl 0x83001260
	sub_83001260(ctx, base);
	// cntlzw r10,r3
	ctx.r10.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r4,r10,27,31,31
	ctx.r4.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// bl 0x82bd7aa8
	sub_82BD7AA8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BD92B0) {
	__imp__sub_82BD92B0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9360) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd83b0
	sub_82BD83B0(ctx, base);
	// bl 0x82ca5160
	sub_82CA5160(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82bd7aa8
	sub_82BD7AA8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD9360) {
	__imp__sub_82BD9360(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD93A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bd7d70
	sub_82BD7D70(ctx, base);
	// bl 0x82ca5160
	sub_82CA5160(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82bd7aa8
	sub_82BD7AA8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD93A8) {
	__imp__sub_82BD93A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD93F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r4,r11,-4576
	ctx.r4.s64 = r11.s64 + -4576;
	// bl 0x82bc6c30
	sub_82BC6C30(ctx, base);
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r10,-9496
	ctx.r5.s64 = ctx.r10.s64 + -9496;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r8,-8(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(-8) );
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// lwz r7,-4(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(-4) );
	// stw r7,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r7.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r6,r11,8
	ctx.r6.s64 = r11.s64 + 8;
	// stw r6,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r6.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r29,r11,720
	r29.s64 = r11.s64 + 720;
	// mr r30,r29
	r30.u64 = r29.u64;
	// lwz r11,720(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(720) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82bd9488
	if (cr6.eq) goto loc_82BD9488;
loc_82BD9458:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,0(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// addi r30,r30,8
	r30.s64 = r30.s64 + 8;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82bd9458
	if (!cr6.eq) goto loc_82BD9458;
loc_82BD9488:
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc55b8
	sub_82BC55B8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x82bc5cd8
	sub_82BC5CD8(ctx, base);
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc56f8
	sub_82BC56F8(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r29,-96
	ctx.r5.s64 = r29.s64 + -96;
	// addi r4,r11,-4740
	ctx.r4.s64 = r11.s64 + -4740;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc7060
	sub_82BC7060(ctx, base);
	// bl 0x82240578
	sub_82240578(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7dd8
	sub_82BD7DD8(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r30,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r30.u32);
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r8,-8(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(-8) );
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// lwz r7,-4(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(-4) );
	// stw r7,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r7.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r6,r11,8
	ctx.r6.s64 = r11.s64 + 8;
	// stw r6,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r6.u32);
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// lis r5,-32240
	ctx.r5.s64 = -2112880640;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r5,-4364
	ctx.r5.s64 = ctx.r5.s64 + -4364;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// bl 0x82240578
	sub_82240578(ctx, base);
	// addi r30,r3,32
	r30.s64 = ctx.r3.s64 + 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7dd8
	sub_82BD7DD8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r9,-8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-8) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,-4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// lis r6,-32240
	ctx.r6.s64 = -2112880640;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r6,-4356
	ctx.r5.s64 = ctx.r6.s64 + -4356;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// bl 0x82240578
	sub_82240578(ctx, base);
	// addi r30,r3,64
	r30.s64 = ctx.r3.s64 + 64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd7dd8
	sub_82BD7DD8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r10,-4348
	ctx.r5.s64 = ctx.r10.s64 + -4348;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// li r4,-1
	ctx.r4.s64 = -1;
	// addi r5,r9,-4636
	ctx.r5.s64 = ctx.r9.s64 + -4636;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5cd8
	sub_82BC5CD8(ctx, base);
	// lis r8,-32067
	ctx.r8.s64 = -2101542912;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r8,32320
	ctx.r4.s64 = ctx.r8.s64 + 32320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// lis r7,-32240
	ctx.r7.s64 = -2112880640;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r30,r7,-4516
	r30.s64 = ctx.r7.s64 + -4516;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822c06c0
	sub_822C06C0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lis r6,-32067
	ctx.r6.s64 = -2101542912;
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r4,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r4.u32);
	// addi r4,r6,32408
	ctx.r4.s64 = ctx.r6.s64 + 32408;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BD93F0) {
	__imp__sub_82BD93F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9640) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// bl 0x82cab770
	sub_82CAB770(ctx, base);
	// lwz r30,0(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82bd9690
	if (cr6.eq) goto loc_82BD9690;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r11,1
	r11.s64 = 1;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BD9690:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bl 0x83000f30
	sub_83000F30(ctx, base);
	// lis r8,-32240
	ctx.r8.s64 = -2112880640;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// addi r4,r8,-4584
	ctx.r4.s64 = ctx.r8.s64 + -4584;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// extsw r7,r30
	ctx.r7.s64 = r30.s32;
	// lwz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r6,3
	ctx.r6.s64 = 3;
	// std r7,112(r1)
	PPC_STORE_U64(ctx.r1.u32 + 112, ctx.r7.u64);
	// lfd f0,112(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 112);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// li r3,3
	ctx.r3.s64 = 3;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r5)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r5.u32 + 0, temp.u32);
	// stw r6,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r6.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,8
	ctx.r4.s64 = r11.s64 + 8;
	// stw r4,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r4.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BD9640) {
	__imp__sub_82BD9640(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9708) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// li r7,3
	ctx.r7.s64 = 3;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r8,8(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// lfs f0,-27468(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -27468);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r8)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + 0, temp.u32);
	// stw r7,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r7.u32);
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// addi r6,r11,8
	ctx.r6.s64 = r11.s64 + 8;
	// stw r6,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r6.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD9708) {
	__imp__sub_82BD9708(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9738) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd976c
	if (cr6.lt) goto loc_82BD976C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD976C:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bd97c0
	if (cr6.eq) goto loc_82BD97C0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bd9790
	if (!cr6.eq) goto loc_82BD9790;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bd97cc
	goto loc_82BD97CC;
loc_82BD9790:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd97ac
	if (cr6.lt) goto loc_82BD97AC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD97AC:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bd97c0
	if (cr6.lt) goto loc_82BD97C0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD97C0:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bd97e4
	if (!cr0.eq) goto loc_82BD97E4;
loc_82BD97CC:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BD97E4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x83001df8
	sub_83001DF8(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x82bd9640
	sub_82BD9640(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD9738) {
	__imp__sub_82BD9738(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9818) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd9844
	if (cr6.lt) goto loc_82BD9844;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD9844:
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// lis r11,-32247
	r11.s64 = -2113339392;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// addi r28,r11,1744
	r28.s64 = r11.s64 + 1744;
	// beq cr6,0x82bd98a0
	if (cr6.eq) goto loc_82BD98A0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bd9870
	if (!cr6.eq) goto loc_82BD9870;
	// li r29,0
	r29.s64 = 0;
	// b 0x82bd98ac
	goto loc_82BD98AC;
loc_82BD9870:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd988c
	if (cr6.lt) goto loc_82BD988C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD988C:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bd98a0
	if (cr6.lt) goto loc_82BD98A0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD98A0:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r29,r11,16
	xer.ca = r11.u32 > 4294967279;
	r29.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x82bd98bc
	if (!cr0.eq) goto loc_82BD98BC;
loc_82BD98AC:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r5,16(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BD98BC:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,8
	ctx.r4.s64 = r11.s64 + 8;
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd98d4
	if (cr6.lt) goto loc_82BD98D4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD98D4:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bd992c
	if (cr6.eq) goto loc_82BD992C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bd98f8
	if (!cr6.eq) goto loc_82BD98F8;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bd9938
	goto loc_82BD9938;
loc_82BD98F8:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bd9914
	if (cr6.lt) goto loc_82BD9914;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BD9914:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,8
	ctx.r4.s64 = r11.s64 + 8;
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd992c
	if (cr6.lt) goto loc_82BD992C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BD992C:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bd9948
	if (!cr0.eq) goto loc_82BD9948;
loc_82BD9938:
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r5,16(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BD9948:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x83001818
	sub_83001818(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r4,r11,27,31,31
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x82bd9640
	sub_82BD9640(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BD9818) {
	__imp__sub_82BD9818(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9970) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x83000a18
	sub_83000A18(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bd99b8
	if (!cr6.eq) goto loc_82BD99B8;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-4216
	ctx.r4.s64 = r11.s64 + -4216;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BD99B8:
	// addi r11,r1,96
	r11.s64 = ctx.r1.s64 + 96;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_82BD99C0:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82bd99c0
	if (!cr6.eq) goto loc_82BD99C0;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r5,r11,0
	ctx.r5.u64 = rotl32(r11.u32, 0);
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD9970) {
	__imp__sub_82BD9970(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9A00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// stw r8,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r7.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD9A00) {
	__imp__sub_82BD9A00(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9A28) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x821882b0
	sub_821882B0(ctx, base);
	// extsw r11,r3
	r11.s64 = ctx.r3.s32;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// li r8,3
	ctx.r8.s64 = 3;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lfs f0,-27348(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -27348);
	f0.f64 = double(temp.f32);
	// stw r8,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r8.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// fmuls f11,f12,f0
	ctx.f11.f64 = double(float(ctx.f12.f64 * f0.f64));
	// stfs f11,0(r9)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r9.u32 + 0, temp.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD9A28) {
	__imp__sub_82BD9A28(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9A98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// extsw r11,r5
	r11.s64 = ctx.r5.s32;
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(8) );
	// li r9,3
	ctx.r9.s64 = 3;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// li r4,-2
	ctx.r4.s64 = -2;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r8.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BD9A98) {
	__imp__sub_82BD9A98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9AF0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r3,r11,-8
	ctx.r3.s64 = r11.s64 + -8;
	// lwz r11,-4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x82bd9b38
	if (cr6.eq) goto loc_82BD9B38;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// bl 0x82bcbd48
	sub_82BCBD48(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82bd9b58
	if (cr6.eq) goto loc_82BD9B58;
loc_82BD9B38:
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc59d0
	sub_82BC59D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c3c
	return;
loc_82BD9B58:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bge cr6,0x82bd9b7c
	if (!cr6.lt) goto loc_82BD9B7C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,-4176
	ctx.r4.s64 = r11.s64 + -4176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c3c
	return;
loc_82BD9B7C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BD9AF0) {
	__imp__sub_82BD9AF0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9B98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-864(r1)
	ea = -864 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,12872
	ctx.r5.s64 = r11.s64 + 12872;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc6e30
	sub_82BC6E30(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bd9bf0
	if (!cr6.lt) goto loc_82BD9BF0;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bd9bf0
	if (cr6.eq) goto loc_82BD9BF0;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x82bd9c00
	if (cr6.gt) goto loc_82BD9C00;
loc_82BD9BF0:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x83000e70
	sub_83000E70(ctx, base);
	// std r3,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r3.u64);
	// b 0x82bd9c1c
	goto loc_82BD9C1C;
loc_82BD9C00:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821885c0
	sub_821885C0(ctx, base);
	// fctidz f0,f1
	ctx.fpscr.disableFlushMode();
	f0.s64 = (ctx.f1.f64 > double(LLONG_MAX)) ? LLONG_MAX : simd::truncate_f64_to_i64(ctx.f1.f64);
	// stfd f0,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, f0.u64);
	// ld r11,88(r1)
	r11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// std r11,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, r11.u64);
loc_82BD9C1C:
	// lbz r11,0(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// cmplwi cr6,r11,33
	cr6.compare<uint32_t>(r11.u32, 33, xer);
	// bne cr6,0x82bd9c38
	if (!cr6.eq) goto loc_82BD9C38;
	// bl 0x83001d98
	sub_83001D98(ctx, base);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// b 0x82bd9c3c
	goto loc_82BD9C3C;
loc_82BD9C38:
	// bl 0x830021b8
	sub_830021B8(ctx, base);
loc_82BD9C3C:
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82bd9c6c
	if (!cr6.eq) goto loc_82BD9C6C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r1,r1,864
	ctx.r1.s64 = ctx.r1.s64 + 864;
	// b 0x82ca2c3c
	return;
loc_82BD9C6C:
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r11,r29
	r11.u64 = r29.u64;
	// addi r10,r10,-4140
	ctx.r10.s64 = ctx.r10.s64 + -4140;
loc_82BD9C78:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x82bd9c9c
	if (cr6.eq) goto loc_82BD9C9C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82bd9c78
	if (cr6.eq) goto loc_82BD9C78;
loc_82BD9C9C:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x82bd9db8
	if (!cr6.eq) goto loc_82BD9DB8;
	// li r5,9
	ctx.r5.s64 = 9;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5cd8
	sub_82BC5CD8(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,0(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// addi r4,r11,-4136
	ctx.r4.s64 = r11.s64 + -4136;
	// bl 0x82bd9a98
	sub_82BD9A98(ctx, base);
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// addi r4,r10,10152
	ctx.r4.s64 = ctx.r10.s64 + 10152;
	// bl 0x82bd9a98
	sub_82BD9A98(ctx, base);
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,8(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// addi r4,r9,-4132
	ctx.r4.s64 = ctx.r9.s64 + -4132;
	// bl 0x82bd9a98
	sub_82BD9A98(ctx, base);
	// lis r8,-32240
	ctx.r8.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,12(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// addi r4,r8,-4124
	ctx.r4.s64 = ctx.r8.s64 + -4124;
	// bl 0x82bd9a98
	sub_82BD9A98(ctx, base);
	// lwz r11,16(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// lis r7,-32240
	ctx.r7.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r7,-4120
	ctx.r4.s64 = ctx.r7.s64 + -4120;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x82bd9a98
	sub_82BD9A98(ctx, base);
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// lis r6,-32240
	ctx.r6.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r6,-4112
	ctx.r4.s64 = ctx.r6.s64 + -4112;
	// addi r5,r11,1900
	ctx.r5.s64 = r11.s64 + 1900;
	// bl 0x82bd9a98
	sub_82BD9A98(ctx, base);
	// lis r5,-32240
	ctx.r5.s64 = -2112880640;
	// lwz r11,24(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(24) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r5,-4104
	ctx.r4.s64 = ctx.r5.s64 + -4104;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x82bd9a98
	sub_82BD9A98(ctx, base);
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// lis r4,-32240
	ctx.r4.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r4,-4096
	ctx.r4.s64 = ctx.r4.s64 + -4096;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x82bd9a98
	sub_82BD9A98(ctx, base);
	// lwz r11,32(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(32) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82bd9e98
	if (cr6.lt) goto loc_82BD9E98;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r9,1
	ctx.r9.s64 = 1;
	// rlwinm r8,r11,27,31,31
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// lis r7,-32240
	ctx.r7.s64 = -2112880640;
	// xori r6,r8,1
	ctx.r6.u64 = ctx.r8.u64 ^ 1;
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// addi r5,r7,-4088
	ctx.r5.s64 = ctx.r7.s64 + -4088;
	// stw r6,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r6.u32);
	// li r4,-2
	ctx.r4.s64 = -2;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r3,r11,8
	ctx.r3.s64 = r11.s64 + 8;
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,864
	ctx.r1.s64 = ctx.r1.s64 + 864;
	// b 0x82ca2c3c
	return;
loc_82BD9DB8:
	// li r11,0
	r11.s64 = 0;
	// stw r31,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r31.u32);
	// addi r10,r1,108
	ctx.r10.s64 = ctx.r1.s64 + 108;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r11.u32);
	// li r9,37
	ctx.r9.s64 = 37;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// lbz r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// stb r11,82(r1)
	PPC_STORE_U8(ctx.r1.u32 + 82, r11.u8);
	// extsb r11,r8
	r11.s64 = ctx.r8.s8;
	// stb r9,80(r1)
	PPC_STORE_U8(ctx.r1.u32 + 80, ctx.r9.u8);
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bd9e84
	if (cr6.eq) goto loc_82BD9E84;
loc_82BD9DE8:
	// cmpwi cr6,r11,37
	cr6.compare<int32_t>(r11.s32, 37, xer);
	// bne cr6,0x82bd9e30
	if (!cr6.eq) goto loc_82BD9E30;
	// lbz r11,1(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 1);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82bd9e30
	if (cr6.eq) goto loc_82BD9E30;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// stb r11,81(r1)
	PPC_STORE_U8(ctx.r1.u32 + 81, r11.u8);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r3,r1,624
	ctx.r3.s64 = ctx.r1.s64 + 624;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// bl 0x82cb7d80
	sub_82CB7D80(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r1,624
	ctx.r4.s64 = ctx.r1.s64 + 624;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82bc7670
	sub_82BC7670(ctx, base);
	// b 0x82bd9e70
	goto loc_82BD9E70;
loc_82BD9E30:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(96) );
	// addi r10,r1,620
	ctx.r10.s64 = ctx.r1.s64 + 620;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bd9e58
	if (cr6.lt) goto loc_82BD9E58;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82bc7568
	sub_82BC7568(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bd9e58
	if (cr6.eq) goto loc_82BD9E58;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82bc75d8
	sub_82BC75D8(ctx, base);
loc_82BD9E58:
	// lbz r11,0(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(96) );
	// stb r11,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r11.u8);
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(96) );
	// addi r8,r9,1
	ctx.r8.s64 = ctx.r9.s64 + 1;
	// stw r8,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r8.u32);
loc_82BD9E70:
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// lbz r11,0(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 0);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82bd9de8
	if (!cr6.eq) goto loc_82BD9DE8;
loc_82BD9E84:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82bc7568
	sub_82BC7568(ctx, base);
	// lwz r4,100(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(100) );
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(104) );
	// bl 0x82bc6490
	sub_82BC6490(ctx, base);
loc_82BD9E98:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,864
	ctx.r1.s64 = ctx.r1.s64 + 864;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BD9B98) {
	__imp__sub_82BD9B98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BD9EA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bd9ee8
	if (!cr6.lt) goto loc_82BD9EE8;
	// lis r9,-32247
	ctx.r9.s64 = -2113339392;
	// addi r30,r9,1876
	r30.s64 = ctx.r9.s64 + 1876;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bd9ee8
	if (cr6.eq) goto loc_82BD9EE8;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bgt cr6,0x82bd9ef4
	if (cr6.gt) goto loc_82BD9EF4;
loc_82BD9EE8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x83000e70
	sub_83000E70(ctx, base);
	// b 0x82bda068
	goto loc_82BDA068;
loc_82BD9EF4:
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bd9f10
	if (!cr6.lt) goto loc_82BD9F10;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bd9f10
	if (cr6.eq) goto loc_82BD9F10;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bd9f28
	if (cr6.eq) goto loc_82BD9F28;
loc_82BD9F10:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BD9F28:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bge cr6,0x82bd9f64
	if (!cr6.lt) goto loc_82BD9F64;
loc_82BD9F3C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// rotlwi r9,r10,0
	ctx.r9.u64 = rotl32(ctx.r10.u32, 0);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// blt cr6,0x82bd9f3c
	if (cr6.lt) goto loc_82BD9F3C;
loc_82BD9F64:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// addi r4,r10,-4136
	ctx.r4.s64 = ctx.r10.s64 + -4136;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd9af0
	sub_82BD9AF0(ctx, base);
	// stw r3,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r3.u32);
	// lis r8,-32241
	ctx.r8.s64 = -2112946176;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r8,10152
	ctx.r4.s64 = ctx.r8.s64 + 10152;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd9af0
	sub_82BD9AF0(ctx, base);
	// stw r3,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r3.u32);
	// lis r7,-32240
	ctx.r7.s64 = -2112880640;
	// li r5,12
	ctx.r5.s64 = 12;
	// addi r4,r7,-4132
	ctx.r4.s64 = ctx.r7.s64 + -4132;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd9af0
	sub_82BD9AF0(ctx, base);
	// stw r3,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r3.u32);
	// lis r6,-32240
	ctx.r6.s64 = -2112880640;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r6,-4124
	ctx.r4.s64 = ctx.r6.s64 + -4124;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd9af0
	sub_82BD9AF0(ctx, base);
	// stw r3,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r3.u32);
	// lis r4,-32240
	ctx.r4.s64 = -2112880640;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r4,-4120
	ctx.r4.s64 = ctx.r4.s64 + -4120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd9af0
	sub_82BD9AF0(ctx, base);
	// addi r3,r3,-1
	ctx.r3.s64 = ctx.r3.s64 + -1;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// stw r3,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r3.u32);
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r11,-4112
	ctx.r4.s64 = r11.s64 + -4112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bd9af0
	sub_82BD9AF0(ctx, base);
	// addi r10,r3,-1900
	ctx.r10.s64 = ctx.r3.s64 + -1900;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// stw r10,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r10.u32);
	// li r4,-1
	ctx.r4.s64 = -1;
	// addi r5,r9,-4088
	ctx.r5.s64 = ctx.r9.s64 + -4088;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bda040
	if (cr6.eq) goto loc_82BDA040;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82bda040
	if (!cr6.eq) goto loc_82BDA040;
	// li r10,-1
	ctx.r10.s64 = -1;
	// b 0x82bda050
	goto loc_82BDA050;
loc_82BDA040:
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5a30
	sub_82BC5A30(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
loc_82BDA050:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stw r10,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r10.u32);
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x83001b08
	sub_83001B08(ctx, base);
loc_82BDA068:
	// std r3,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r3.u64);
	// cmpdi cr6,r3,-1
	cr6.compare<int64_t>(ctx.r3.s64, -1, xer);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r3,1
	ctx.r3.s64 = 1;
	// bne cr6,0x82bda094
	if (!cr6.eq) goto loc_82BDA094;
	// stw r29,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r29.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c3c
	return;
loc_82BDA094:
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// li r10,3
	ctx.r10.s64 = 3;
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BD9EA8) {
	__imp__sub_82BD9EA8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA0C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bda108
	if (!cr6.lt) goto loc_82BDA108;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bda108
	if (cr6.eq) goto loc_82BDA108;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x82bda114
	if (cr6.gt) goto loc_82BDA114;
loc_82BDA108:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// lfs f31,-27468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -27468);
	f31.f64 = double(temp.f32);
	// b 0x82bda124
	goto loc_82BDA124;
loc_82BDA114:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821885c0
	sub_821885C0(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	f31.f64 = ctx.f1.f64;
loc_82BDA124:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821885c0
	sub_821885C0(ctx, base);
	// fctidz f0,f1
	ctx.fpscr.disableFlushMode();
	f0.s64 = (ctx.f1.f64 > double(LLONG_MAX)) ? LLONG_MAX : simd::truncate_f64_to_i64(ctx.f1.f64);
	// fctidz f13,f31
	ctx.f13.s64 = (f31.f64 > double(LLONG_MAX)) ? LLONG_MAX : simd::truncate_f64_to_i64(f31.f64);
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, f0.u64);
	// stfd f13,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f13.u64);
	// ld r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// ld r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// bl 0x83002218
	sub_83002218(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,3
	ctx.r10.s64 = 3;
	// frsp f12,f1
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f1.f64));
	// li r3,1
	ctx.r3.s64 = 1;
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// lfd f31,-24(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDA0C0) {
	__imp__sub_82BDA0C0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA188) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc6e30
	sub_82BC6E30(ctx, base);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,-32242
	ctx.r10.s64 = -2113011712;
	// addi r30,r11,412
	r30.s64 = r11.s64 + 412;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// addi r6,r30,24
	ctx.r6.s64 = r30.s64 + 24;
	// addi r5,r10,-11820
	ctx.r5.s64 = ctx.r10.s64 + -11820;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6af8
	sub_82BC6AF8(ctx, base);
	// rlwinm r9,r3,2,0,29
	ctx.r9.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwzx r3,r9,r30
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + r30.u32);
	// bl 0x82fffb68
	sub_82FFFB68(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82bda20c
	if (!cr6.eq) goto loc_82BDA20C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BDA20C:
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
loc_82BDA210:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bda210
	if (!cr6.eq) goto loc_82BDA210;
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r5,r11,0
	ctx.r5.u64 = rotl32(r11.u32, 0);
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDA188) {
	__imp__sub_82BDA188(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA240) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// lwz r10,8(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bda278
	if (!cr6.lt) goto loc_82BDA278;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bda278
	if (cr6.eq) goto loc_82BDA278;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x82bda280
	if (cr6.gt) goto loc_82BDA280;
loc_82BDA278:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82bda288
	goto loc_82BDA288;
loc_82BDA280:
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x82bc6f00
	sub_82BC6F00(ctx, base);
loc_82BDA288:
	// bl 0x82ca9798
	sub_82CA9798(ctx, base);
}

PPC_WEAK_FUNC(sub_82BDA240) {
	__imp__sub_82BDA240(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA290) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r5,r11,464
	ctx.r5.s64 = r11.s64 + 464;
	// addi r4,r10,-4744
	ctx.r4.s64 = ctx.r10.s64 + -4744;
	// li r6,0
	ctx.r6.s64 = 0;
	// bl 0x82bc7060
	sub_82BC7060(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDA290) {
	__imp__sub_82BDA290(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA2C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r29,r11,10428
	r29.s64 = r11.s64 + 10428;
	// addi r28,r10,10440
	r28.s64 = ctx.r10.s64 + 10440;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r6,r11,-8
	ctx.r6.s64 = r11.s64 + -8;
	// addi r4,r10,92
	ctx.r4.s64 = ctx.r10.s64 + 92;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// bl 0x821cf320
	sub_821CF320(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bda33c
	if (cr6.eq) goto loc_82BDA33C;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x82bda350
	if (cr6.eq) goto loc_82BDA350;
loc_82BDA33C:
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822af338
	sub_822AF338(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c34
	return;
loc_82BDA350:
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6558
	sub_82BC6558(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// li r4,-10000
	ctx.r4.s64 = -10000;
	// addi r5,r10,10448
	ctx.r5.s64 = ctx.r10.s64 + 10448;
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5ff0
	sub_82BC5FF0(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r4,-10000
	ctx.r4.s64 = -10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r8,-16(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(-16) );
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// lwz r7,-12(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(-12) );
	// stw r7,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r7.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r6,r11,8
	ctx.r6.s64 = r11.s64 + 8;
	// stw r6,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r6.u32);
	// bl 0x82bc5e60
	sub_82BC5E60(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BDA2C8) {
	__imp__sub_82BDA2C8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA3D8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r5,r11,10448
	ctx.r5.s64 = r11.s64 + 10448;
	// bl 0x82bc6ce8
	sub_82BC6CE8(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// li r9,0
	ctx.r9.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDA3D8) {
	__imp__sub_82BDA3D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA418) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bda2c8
	sub_82BDA2C8(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r5,58
	ctx.r5.s64 = 58;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,10368
	ctx.r4.s64 = r11.s64 + 10368;
	// bne cr6,0x82bda468
	if (!cr6.eq) goto loc_82BDA468;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
	// b 0x82bda470
	goto loc_82BDA470;
loc_82BDA468:
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// li r3,2
	ctx.r3.s64 = 2;
loc_82BDA470:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDA418) {
	__imp__sub_82BDA418(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA488) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bda4b4
	if (cr6.lt) goto loc_82BDA4B4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDA4B4:
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// lis r11,-32247
	r11.s64 = -2113339392;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// addi r28,r11,1744
	r28.s64 = r11.s64 + 1744;
	// beq cr6,0x82bda510
	if (cr6.eq) goto loc_82BDA510;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bda4e0
	if (!cr6.eq) goto loc_82BDA4E0;
	// li r29,0
	r29.s64 = 0;
	// b 0x82bda51c
	goto loc_82BDA51C;
loc_82BDA4E0:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bda4fc
	if (cr6.lt) goto loc_82BDA4FC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDA4FC:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bda510
	if (cr6.lt) goto loc_82BDA510;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDA510:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r29,r11,16
	xer.ca = r11.u32 > 4294967279;
	r29.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x82bda52c
	if (!cr0.eq) goto loc_82BDA52C;
loc_82BDA51C:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r5,16(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDA52C:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,8
	ctx.r4.s64 = r11.s64 + 8;
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bda544
	if (cr6.lt) goto loc_82BDA544;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDA544:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bda59c
	if (cr6.eq) goto loc_82BDA59C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bda568
	if (!cr6.eq) goto loc_82BDA568;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bda5a8
	goto loc_82BDA5A8;
loc_82BDA568:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bda584
	if (cr6.lt) goto loc_82BDA584;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDA584:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,8
	ctx.r4.s64 = r11.s64 + 8;
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bda59c
	if (cr6.lt) goto loc_82BDA59C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDA59C:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bda5b8
	if (!cr0.eq) goto loc_82BDA5B8;
loc_82BDA5A8:
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r5,16(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDA5B8:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bda418
	sub_82BDA418(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x82bda5e0
	if (!cr6.eq) goto loc_82BDA5E0;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
loc_82BDA5E0:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bl 0x82bc5690
	sub_82BC5690(ctx, base);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82bda618
	if (!cr6.eq) goto loc_82BDA618;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,10460
	ctx.r4.s64 = r11.s64 + 10460;
	// b 0x82bda620
	goto loc_82BDA620;
loc_82BDA618:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,10468
	ctx.r4.s64 = r11.s64 + 10468;
loc_82BDA620:
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
loc_82BDA624:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bda624
	if (!cr6.eq) goto loc_82BDA624;
	// subf r11,r4,r11
	r11.s64 = r11.s64 - ctx.r4.s64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r5,r11,0
	ctx.r5.u64 = rotl32(r11.u32, 0);
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// li r3,3
	ctx.r3.s64 = 3;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BDA488) {
	__imp__sub_82BDA488(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA658) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r6,r11,3060
	ctx.r6.s64 = r11.s64 + 3060;
	// addi r5,r10,-6348
	ctx.r5.s64 = ctx.r10.s64 + -6348;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc71c0
	sub_82BC71C0(ctx, base);
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// cmpwi cr6,r9,4
	cr6.compare<int32_t>(ctx.r9.s32, 4, xer);
	// beq cr6,0x82bda6e4
	if (cr6.eq) goto loc_82BDA6E4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bda6c0
	if (!cr6.eq) goto loc_82BDA6C0;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bda6f0
	goto loc_82BDA6F0;
loc_82BDA6C0:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bda6dc
	if (cr6.lt) goto loc_82BDA6DC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDA6DC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
loc_82BDA6E4:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bda704
	if (!cr0.eq) goto loc_82BDA704;
loc_82BDA6F0:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r11,10476
	ctx.r4.s64 = r11.s64 + 10476;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BDA704:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,3224
	ctx.r4.s64 = r11.s64 + 3224;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lis r27,-31920
	r27.s64 = -2091909120;
	// li r26,4
	r26.s64 = 4;
	// addi r25,r11,10508
	r25.s64 = r11.s64 + 10508;
	// addi r28,r10,7948
	r28.s64 = ctx.r10.s64 + 7948;
loc_82BDA730:
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// cmplwi cr6,r11,59
	cr6.compare<uint32_t>(r11.u32, 59, xer);
	// bne cr6,0x82bda74c
	if (!cr6.eq) goto loc_82BDA74C;
loc_82BDA73C:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// cmplwi cr6,r11,59
	cr6.compare<uint32_t>(r11.u32, 59, xer);
	// beq cr6,0x82bda73c
	if (cr6.eq) goto loc_82BDA73C;
loc_82BDA74C:
	// lbz r11,0(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82bda8e4
	if (cr6.eq) goto loc_82BDA8E4;
	// li r4,59
	ctx.r4.s64 = 59;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca3980
	sub_82CA3980(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82bda794
	if (!cr6.eq) goto loc_82BDA794;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82BDA774:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bda774
	if (!cr6.eq) goto loc_82BDA774;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rotlwi r11,r11,0
	r11.u64 = rotl32(r11.u32, 0);
	// add r29,r11,r30
	r29.u64 = r11.u64 + r30.u64;
loc_82BDA794:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bda7b0
	if (cr6.lt) goto loc_82BDA7B0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDA7B0:
	// subf r5,r30,r29
	ctx.r5.s64 = r29.s64 - r30.s64;
	// lwz r23,8(r31)
	r23.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// stw r3,0(r23)
	PPC_STORE_U32(r23.u32 + 0, ctx.r3.u32);
	// stw r26,4(r23)
	PPC_STORE_U32(r23.u32 + 4, r26.u32);
	// mr r30,r29
	r30.u64 = r29.u64;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// beq cr6,0x82bda8e4
	if (cr6.eq) goto loc_82BDA8E4;
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// beq cr6,0x82bda830
	if (cr6.eq) goto loc_82BDA830;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bda80c
	if (!cr6.eq) goto loc_82BDA80C;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x82bda838
	goto loc_82BDA838;
loc_82BDA80C:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bda828
	if (cr6.lt) goto loc_82BDA828;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDA828:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
loc_82BDA830:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
loc_82BDA838:
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc71c0
	sub_82BC71C0(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5630
	sub_82BC5630(ctx, base);
	// lwz r11,-18972(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + int32_t(-18972) );
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bda8d8
	if (!cr6.eq) goto loc_82BDA8D8;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5630
	sub_82BC5630(ctx, base);
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bda8a8
	if (cr6.lt) goto loc_82BDA8A8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDA8A8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// srawi r11,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	r11.s64 = ctx.r9.s32 >> 3;
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// bl 0x822ce098
	sub_822CE098(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,-8
	ctx.r8.s64 = r11.s64 + -8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// b 0x82bda730
	goto loc_82BDA730;
loc_82BDA8D8:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c24
	return;
loc_82BDA8E4:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c24
	return;
}

PPC_WEAK_FUNC(sub_82BDA658) {
	__imp__sub_82BDA658(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA8F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
	// lwz r11,-4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bda950
	if (cr6.eq) goto loc_82BDA950;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bda92c
	if (!cr6.eq) goto loc_82BDA92C;
	// li r29,0
	r29.s64 = 0;
	// b 0x82bda958
	goto loc_82BDA958;
loc_82BDA92C:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bda948
	if (cr6.lt) goto loc_82BDA948;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDA948:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
loc_82BDA950:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addi r29,r11,16
	r29.s64 = r11.s64 + 16;
loc_82BDA958:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bda974
	if (cr6.lt) goto loc_82BDA974;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDA974:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bda9c8
	if (cr6.eq) goto loc_82BDA9C8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bda998
	if (!cr6.eq) goto loc_82BDA998;
	// li r5,0
	ctx.r5.s64 = 0;
	// b 0x82bda9d0
	goto loc_82BDA9D0;
loc_82BDA998:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bda9b4
	if (cr6.lt) goto loc_82BDA9B4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDA9B4:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bda9c8
	if (cr6.lt) goto loc_82BDA9C8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDA9C8:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addi r5,r11,16
	ctx.r5.s64 = r11.s64 + 16;
loc_82BDA9D0:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// addi r4,r11,10524
	ctx.r4.s64 = r11.s64 + 10524;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BDA8F0) {
	__imp__sub_82BDA8F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDA9F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdaa24
	if (cr6.lt) goto loc_82BDAA24;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDAA24:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bdaa78
	if (cr6.eq) goto loc_82BDAA78;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdaa48
	if (!cr6.eq) goto loc_82BDAA48;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bdaa84
	goto loc_82BDAA84;
loc_82BDAA48:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdaa64
	if (cr6.lt) goto loc_82BDAA64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDAA64:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bdaa78
	if (cr6.lt) goto loc_82BDAA78;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDAA78:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bdaa9c
	if (!cr0.eq) goto loc_82BDAA9C;
loc_82BDAA84:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDAA9C:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r11,10572
	ctx.r5.s64 = r11.s64 + 10572;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bda658
	sub_82BDA658(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82bdaadc
	if (cr6.eq) goto loc_82BDAADC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc7950
	sub_82BC7950(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdaadc
	if (cr6.eq) goto loc_82BDAADC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bda8f0
	sub_82BDA8F0(ctx, base);
loc_82BDAADC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDA9F0) {
	__imp__sub_82BDA9F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDAAF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,45
	ctx.r4.s64 = 45;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82ca3980
	sub_82CA3980(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82bdab2c
	if (cr6.eq) goto loc_82BDAB2C;
	// addi r31,r3,1
	r31.s64 = ctx.r3.s64 + 1;
loc_82BDAB2C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r6,r11,2924
	ctx.r6.s64 = r11.s64 + 2924;
	// addi r5,r10,-6348
	ctx.r5.s64 = ctx.r10.s64 + -6348;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bc71c0
	sub_82BC71C0(ctx, base);
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r9,10580
	ctx.r4.s64 = ctx.r9.s64 + 10580;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bc5630
	sub_82BC5630(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDAAF8) {
	__imp__sub_82BDAAF8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDAB88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdabb4
	if (cr6.lt) goto loc_82BDABB4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDABB4:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bdac08
	if (cr6.eq) goto loc_82BDAC08;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdabd8
	if (!cr6.eq) goto loc_82BDABD8;
	// li r29,0
	r29.s64 = 0;
	// b 0x82bdac14
	goto loc_82BDAC14;
loc_82BDABD8:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdabf4
	if (cr6.lt) goto loc_82BDABF4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDABF4:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bdac08
	if (cr6.lt) goto loc_82BDAC08;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDAC08:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r29,r11,16
	xer.ca = r11.u32 > 4294967279;
	r29.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x82bdac2c
	if (!cr0.eq) goto loc_82BDAC2C;
loc_82BDAC14:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDAC2C:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r5,r11,10592
	ctx.r5.s64 = r11.s64 + 10592;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bda658
	sub_82BDA658(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82bdac7c
	if (cr6.eq) goto loc_82BDAC7C;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdaaf8
	sub_82BDAAF8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bda418
	sub_82BDA418(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdac7c
	if (cr6.eq) goto loc_82BDAC7C;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bda8f0
	sub_82BDA8F0(ctx, base);
loc_82BDAC7C:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDAB88) {
	__imp__sub_82BDAB88(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDAC88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdacb4
	if (cr6.lt) goto loc_82BDACB4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDACB4:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bdad08
	if (cr6.eq) goto loc_82BDAD08;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdacd8
	if (!cr6.eq) goto loc_82BDACD8;
	// li r29,0
	r29.s64 = 0;
	// b 0x82bdad14
	goto loc_82BDAD14;
loc_82BDACD8:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdacf4
	if (cr6.lt) goto loc_82BDACF4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDACF4:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bdad08
	if (cr6.lt) goto loc_82BDAD08;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BDAD08:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r29,r11,16
	xer.ca = r11.u32 > 4294967279;
	r29.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x82bdad2c
	if (!cr0.eq) goto loc_82BDAD2C;
loc_82BDAD14:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDAD2C:
	// li r4,46
	ctx.r4.s64 = 46;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82ca3980
	sub_82CA3980(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bdad48
	if (!cr6.eq) goto loc_82BDAD48;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c3c
	return;
loc_82BDAD48:
	// subf r5,r29,r3
	ctx.r5.s64 = ctx.r3.s64 - r29.s64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
	// lwz r11,-4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bdada8
	if (cr6.eq) goto loc_82BDADA8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdad84
	if (!cr6.eq) goto loc_82BDAD84;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x82bdadb0
	goto loc_82BDADB0;
loc_82BDAD84:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdada0
	if (cr6.lt) goto loc_82BDADA0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDADA0:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-8
	ctx.r4.s64 = r11.s64 + -8;
loc_82BDADA8:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
loc_82BDADB0:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r11,10592
	ctx.r5.s64 = r11.s64 + 10592;
	// bl 0x82bda658
	sub_82BDA658(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82bdae1c
	if (cr6.eq) goto loc_82BDAE1C;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdaaf8
	sub_82BDAAF8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bda418
	sub_82BDA418(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdae1c
	if (cr6.eq) goto loc_82BDAE1C;
	// cmpwi cr6,r3,2
	cr6.compare<int32_t>(ctx.r3.s32, 2, xer);
	// beq cr6,0x82bdae04
	if (cr6.eq) goto loc_82BDAE04;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bda8f0
	sub_82BDA8F0(ctx, base);
loc_82BDAE04:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// addi r4,r11,10600
	ctx.r4.s64 = r11.s64 + 10600;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
loc_82BDAE1C:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDAC88) {
	__imp__sub_82BDAC88(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDAE28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r29,r11,1876
	r29.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdae54
	if (cr6.lt) goto loc_82BDAE54;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
loc_82BDAE54:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bdaea8
	if (cr6.eq) goto loc_82BDAEA8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdae78
	if (!cr6.eq) goto loc_82BDAE78;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bdaeb4
	goto loc_82BDAEB4;
loc_82BDAE78:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdae94
	if (cr6.lt) goto loc_82BDAE94;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDAE94:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bdaea8
	if (cr6.lt) goto loc_82BDAEA8;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
loc_82BDAEA8:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bdaecc
	if (!cr0.eq) goto loc_82BDAECC;
loc_82BDAEB4:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDAECC:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// addi r5,r11,10632
	ctx.r5.s64 = r11.s64 + 10632;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82bdaefc
	if (cr6.eq) goto loc_82BDAEFC;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdaf0c
	if (cr6.eq) goto loc_82BDAF0C;
loc_82BDAEFC:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,10640
	ctx.r4.s64 = r11.s64 + 10640;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BDAF0C:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82bdaf4c
	if (cr6.eq) goto loc_82BDAF4C;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82bdaf4c
	if (!cr6.eq) goto loc_82BDAF4C;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,10676
	ctx.r4.s64 = r11.s64 + 10676;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5c08
	sub_82BC5C08(ctx, base);
loc_82BDAF4C:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDAE28) {
	__imp__sub_82BDAE28(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDAF58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r25,r11,1876
	r25.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdaf84
	if (cr6.lt) goto loc_82BDAF84;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
loc_82BDAF84:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// li r23,0
	r23.s64 = 0;
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bdafdc
	if (cr6.eq) goto loc_82BDAFDC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdafac
	if (!cr6.eq) goto loc_82BDAFAC;
	// mr r29,r23
	r29.u64 = r23.u64;
	// b 0x82bdafe8
	goto loc_82BDAFE8;
loc_82BDAFAC:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdafc8
	if (cr6.lt) goto loc_82BDAFC8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDAFC8:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bdafdc
	if (cr6.lt) goto loc_82BDAFDC;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
loc_82BDAFDC:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r29,r11,16
	xer.ca = r11.u32 > 4294967279;
	r29.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bne 0x82bdb000
	if (!cr0.eq) goto loc_82BDB000;
loc_82BDAFE8:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDB000:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bge cr6,0x82bdb03c
	if (!cr6.lt) goto loc_82BDB03C;
loc_82BDB014:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// stw r23,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r23.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// rotlwi r9,r10,0
	ctx.r9.u64 = rotl32(ctx.r10.u32, 0);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// blt cr6,0x82bdb014
	if (cr6.lt) goto loc_82BDB014;
loc_82BDB03C:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// li r4,-10000
	ctx.r4.s64 = -10000;
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// addi r5,r10,8136
	ctx.r5.s64 = ctx.r10.s64 + 8136;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,-4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bdb0cc
	if (cr6.eq) goto loc_82BDB0CC;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82bdb090
	if (!cr6.eq) goto loc_82BDB090;
	// lwz r11,-8(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-8) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bdb0cc
	if (cr6.eq) goto loc_82BDB0CC;
loc_82BDB090:
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822af338
	sub_822AF338(ctx, base);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r10,r11,260
	ctx.r10.s64 = r11.s64 + 260;
	// cmplw cr6,r3,r10
	cr6.compare<uint32_t>(ctx.r3.u32, ctx.r10.u32, xer);
	// bne cr6,0x82bdb444
	if (!cr6.eq) goto loc_82BDB444;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r11,10712
	ctx.r4.s64 = r11.s64 + 10712;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c24
	return;
loc_82BDB0CC:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// addi r5,r11,10756
	ctx.r5.s64 = r11.s64 + 10756;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r25
	cr6.compare<uint32_t>(r11.u32, r25.u32, xer);
	// beq cr6,0x82bdb0fc
	if (cr6.eq) goto loc_82BDB0FC;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdb10c
	if (cr6.eq) goto loc_82BDB10C;
loc_82BDB0FC:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,10764
	ctx.r4.s64 = r11.s64 + 10764;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BDB10C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,3224
	ctx.r4.s64 = r11.s64 + 3224;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// li r24,1
	r24.s64 = 1;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r28,r24
	r28.u64 = r24.u64;
	// li r27,4
	r27.s64 = 4;
	// addi r26,r11,10800
	r26.s64 = r11.s64 + 10800;
loc_82BDB134:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r3,-16(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-16) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// addi r10,r11,-8
	ctx.r10.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r25
	cr6.compare<uint32_t>(ctx.r10.u32, r25.u32, xer);
	// beq cr6,0x82bdb1e0
	if (cr6.eq) goto loc_82BDB1E0;
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82bdb1e0
	if (!cr6.eq) goto loc_82BDB1E0;
	// lwz r10,-12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-12) );
	// addi r4,r11,-16
	ctx.r4.s64 = r11.s64 + -16;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// beq cr6,0x82bdb1c8
	if (cr6.eq) goto loc_82BDB1C8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdb1a4
	if (!cr6.eq) goto loc_82BDB1A4;
	// mr r6,r23
	ctx.r6.u64 = r23.u64;
	// b 0x82bdb1d0
	goto loc_82BDB1D0;
loc_82BDB1A4:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdb1c0
	if (cr6.lt) goto loc_82BDB1C0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDB1C0:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r11,-16
	ctx.r4.s64 = r11.s64 + -16;
loc_82BDB1C8:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addi r6,r11,16
	ctx.r6.s64 = r11.s64 + 16;
loc_82BDB1D0:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BDB1E0:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82bdb1f4
	if (!cr6.eq) goto loc_82BDB1F4;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// stw r23,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r23.u32);
	// b 0x82bdb24c
	goto loc_82BDB24C;
loc_82BDB1F4:
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82BDB1F8:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bdb1f8
	if (!cr6.eq) goto loc_82BDB1F8;
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// addi r9,r11,-1
	ctx.r9.s64 = r11.s64 + -1;
	// rotlwi r30,r9,0
	r30.u64 = rotl32(ctx.r9.u32, 0);
	// lwz r8,68(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(68) );
	// lwz r7,64(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(64) );
	// cmplw cr6,r8,r7
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r7.u32, xer);
	// blt cr6,0x82bdb230
	if (cr6.lt) goto loc_82BDB230;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDB230:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// stw r27,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r27.u32);
loc_82BDB24C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r4,r11,-16
	ctx.r4.s64 = r11.s64 + -16;
	// bl 0x8219ee00
	sub_8219EE00(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r25
	cr6.compare<uint32_t>(r11.u32, r25.u32, xer);
	// beq cr6,0x82bdb2f0
	if (cr6.eq) goto loc_82BDB2F0;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,6
	cr6.compare<int32_t>(ctx.r10.s32, 6, xer);
	// beq cr6,0x82bdb2fc
	if (cr6.eq) goto loc_82BDB2FC;
	// cmplw cr6,r11,r25
	cr6.compare<uint32_t>(r11.u32, r25.u32, xer);
	// beq cr6,0x82bdb2f0
	if (cr6.eq) goto loc_82BDB2F0;
	// rotlwi r10,r10,0
	ctx.r10.u64 = rotl32(ctx.r10.u32, 0);
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// beq cr6,0x82bdb2a0
	if (cr6.eq) goto loc_82BDB2A0;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x82bdb2f0
	if (!cr6.eq) goto loc_82BDB2F0;
loc_82BDB2A0:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdb2bc
	if (cr6.lt) goto loc_82BDB2BC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDB2BC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// srawi r11,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	r11.s64 = ctx.r9.s32 >> 3;
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// bl 0x822ce098
	sub_822CE098(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r8,r11,-8
	ctx.r8.s64 = r11.s64 + -8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// b 0x82bdb134
	goto loc_82BDB134;
loc_82BDB2F0:
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// b 0x82bdb134
	goto loc_82BDB134;
loc_82BDB2FC:
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r9,2
	ctx.r9.s64 = 2;
	// addi r30,r11,260
	r30.s64 = r11.s64 + 260;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// stw r30,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r30.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82bdb350
	if (!cr6.eq) goto loc_82BDB350;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// stw r23,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r23.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// b 0x82bdb37c
	goto loc_82BDB37C;
loc_82BDB350:
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82BDB354:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bdb354
	if (!cr6.eq) goto loc_82BDB354;
	// subf r11,r29,r11
	r11.s64 = r11.s64 - r29.s64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r5,r11,0
	ctx.r5.u64 = rotl32(r11.u32, 0);
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
loc_82BDB37C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-16
	ctx.r4.s64 = r11.s64 + -16;
	// bl 0x8219ee00
	sub_8219EE00(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r25
	cr6.compare<uint32_t>(r11.u32, r25.u32, xer);
	// beq cr6,0x82bdb3ac
	if (cr6.eq) goto loc_82BDB3AC;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bdb3bc
	if (cr6.eq) goto loc_82BDB3BC;
loc_82BDB3AC:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
loc_82BDB3BC:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,-4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// beq cr6,0x82bdb3f8
	if (cr6.eq) goto loc_82BDB3F8;
	// cmpwi cr6,r10,7
	cr6.compare<int32_t>(ctx.r10.s32, 7, xer);
	// beq cr6,0x82bdb3ec
	if (cr6.eq) goto loc_82BDB3EC;
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// b 0x82bdb3fc
	goto loc_82BDB3FC;
loc_82BDB3EC:
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// addi r10,r10,24
	ctx.r10.s64 = ctx.r10.s64 + 24;
	// b 0x82bdb3fc
	goto loc_82BDB3FC;
loc_82BDB3F8:
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
loc_82BDB3FC:
	// cmplw cr6,r10,r30
	cr6.compare<uint32_t>(ctx.r10.u32, r30.u32, xer);
	// bne cr6,0x82bdb444
	if (!cr6.eq) goto loc_82BDB444;
	// stw r24,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r24.u32);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// stw r24,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r24.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
loc_82BDB444:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c24
	return;
}

PPC_WEAK_FUNC(sub_82BDAF58) {
	__imp__sub_82BDAF58(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDB450) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r10,-32243
	ctx.r10.s64 = -2113077248;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r10,6552
	ctx.r5.s64 = ctx.r10.s64 + 6552;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r9,-8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,-4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82bdb4c0
	if (!cr6.eq) goto loc_82BDB4C0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// b 0x82bdb4ec
	goto loc_82BDB4EC;
loc_82BDB4C0:
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82BDB4C4:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bdb4c4
	if (!cr6.eq) goto loc_82BDB4C4;
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r5,r11,0
	ctx.r5.u64 = rotl32(r11.u32, 0);
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
loc_82BDB4EC:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r11,10828
	ctx.r5.s64 = r11.s64 + 10828;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// li r4,46
	ctx.r4.s64 = 46;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca70c0
	sub_82CA70C0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r11,r30
	r11.u64 = r30.u64;
	// beq cr6,0x82bdb51c
	if (cr6.eq) goto loc_82BDB51C;
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
loc_82BDB51C:
	// subf r5,r30,r11
	ctx.r5.s64 = r11.s64 - r30.s64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r11,10836
	ctx.r5.s64 = r11.s64 + 10836;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDB450) {
	__imp__sub_82BDB450(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDB558) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r28,r11,1876
	r28.s64 = r11.s64 + 1876;
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r10
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdb584
	if (cr6.lt) goto loc_82BDB584;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
loc_82BDB584:
	// lwz r11,4(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bdb5d8
	if (cr6.eq) goto loc_82BDB5D8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcbdc8
	sub_82BCBDC8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdb5a8
	if (!cr6.eq) goto loc_82BDB5A8;
	// li r30,0
	r30.s64 = 0;
	// b 0x82bdb5e4
	goto loc_82BDB5E4;
loc_82BDB5A8:
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdb5c4
	if (cr6.lt) goto loc_82BDB5C4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDB5C4:
	// lwz r4,12(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r4,r11
	cr6.compare<uint32_t>(ctx.r4.u32, r11.u32, xer);
	// blt cr6,0x82bdb5d8
	if (cr6.lt) goto loc_82BDB5D8;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
loc_82BDB5D8:
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// addic. r30,r11,16
	xer.ca = r11.u32 > 4294967279;
	r30.s64 = r11.s64 + 16;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bne 0x82bdb5fc
	if (!cr0.eq) goto loc_82BDB5FC;
loc_82BDB5E4:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,16(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDB5FC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// li r4,-10000
	ctx.r4.s64 = -10000;
	// addi r5,r10,8136
	ctx.r5.s64 = ctx.r10.s64 + 8136;
	// subf r8,r9,r11
	ctx.r8.s64 = r11.s64 - ctx.r9.s64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// srawi r11,r8,3
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x7) != 0);
	r11.s64 = ctx.r8.s32 >> 3;
	// addi r29,r11,1
	r29.s64 = r11.s64 + 1;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// beq cr6,0x82bdb650
	if (cr6.eq) goto loc_82BDB650;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,5
	cr6.compare<int32_t>(ctx.r10.s32, 5, xer);
	// beq cr6,0x82bdb6b4
	if (cr6.eq) goto loc_82BDB6B4;
loc_82BDB650:
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,-10002
	ctx.r4.s64 = -10002;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc7328
	sub_82BC7328(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82bdb68c
	if (cr6.eq) goto loc_82BDB68C;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,8144
	ctx.r4.s64 = r11.s64 + 8144;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82ca2c38
	return;
loc_82BDB68C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
loc_82BDB6B4:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,-1
	ctx.r4.s64 = -1;
	// addi r5,r11,10828
	ctx.r5.s64 = r11.s64 + 10828;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1408
	sub_821E1408(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// beq cr6,0x82bdb6e4
	if (cr6.eq) goto loc_82BDB6E4;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq cr6,0x82bdb6ec
	if (cr6.eq) goto loc_82BDB6EC;
loc_82BDB6E4:
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x82bdb6fc
	goto loc_82BDB6FC;
loc_82BDB6EC:
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdb450
	sub_82BDB450(ctx, base);
loc_82BDB6FC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// bl 0x82a2b3c0
	sub_82A2B3C0(ctx, base);
	// lis r7,-32241
	ctx.r7.s64 = -2112946176;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r7,8680
	ctx.r4.s64 = ctx.r7.s64 + 8680;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc8cb8
	sub_82BC8CB8(ctx, base);
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,-16(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(-16) );
	// stw r5,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r5.u32);
	// lwz r11,-12(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(-12) );
	// stw r11,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bl 0x822c06c0
	sub_822C06C0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// addi r9,r11,-8
	ctx.r9.s64 = r11.s64 + -8;
	// li r30,2
	r30.s64 = 2;
	// cmpwi cr6,r29,2
	cr6.compare<int32_t>(r29.s32, 2, xer);
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// blt cr6,0x82bdb7f0
	if (cr6.lt) goto loc_82BDB7F0;
loc_82BDB788:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// lwz r7,-16(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-16) );
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// lwz r6,-12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-12) );
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r4,r11,-16
	ctx.r4.s64 = r11.s64 + -16;
	// bl 0x8219ee00
	sub_8219EE00(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r30,r29
	cr6.compare<int32_t>(r30.s32, r29.s32, xer);
	// ble cr6,0x82bdb788
	if (!cr6.gt) goto loc_82BDB788;
loc_82BDB7F0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BDB558) {
	__imp__sub_82BDB558(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDB800) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdb840
	if (!cr6.lt) goto loc_82BDB840;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bdb840
	if (cr6.eq) goto loc_82BDB840;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdb858
	if (cr6.eq) goto loc_82BDB858;
loc_82BDB840:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDB858:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5d40
	sub_82BC5D40(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdb8a8
	if (!cr6.eq) goto loc_82BDB8A8;
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5cd8
	sub_82BC5CD8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// bl 0x82bc5ff0
	sub_82BC5FF0(ctx, base);
loc_82BDB8A8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lwz r9,68(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(68) );
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r10,-9496
	ctx.r5.s64 = ctx.r10.s64 + -9496;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,72(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(72) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDB800) {
	__imp__sub_82BDB800(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDB8F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x82bdb938
	if (!cr6.eq) goto loc_82BDB938;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// b 0x82bdb964
	goto loc_82BDB964;
loc_82BDB938:
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
loc_82BDB93C:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bdb93c
	if (!cr6.eq) goto loc_82BDB93C;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r5,r11,0
	ctx.r5.u64 = rotl32(r11.u32, 0);
	// bl 0x8219cda8
	sub_8219CDA8(ctx, base);
loc_82BDB964:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDB8F8) {
	__imp__sub_82BDB8F8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDB990) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r4,r11,10448
	ctx.r4.s64 = r11.s64 + 10448;
	// bl 0x82bc6c30
	sub_82BC6C30(ctx, base);
	// lis r10,-32066
	ctx.r10.s64 = -2101477376;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r10,-23592
	ctx.r4.s64 = ctx.r10.s64 + -23592;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r9,-9316
	ctx.r5.s64 = ctx.r9.s64 + -9316;
	// li r4,-2
	ctx.r4.s64 = -2;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r8,-32241
	ctx.r8.s64 = -2112946176;
	// addi r29,r11,368
	r29.s64 = r11.s64 + 368;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r29,-24
	ctx.r5.s64 = r29.s64 + -24;
	// addi r4,r8,10848
	ctx.r4.s64 = ctx.r8.s64 + 10848;
	// li r6,0
	ctx.r6.s64 = 0;
	// bl 0x82bc7060
	sub_82BC7060(ctx, base);
	// lwz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r4,-10001
	ctx.r4.s64 = -10001;
	// lwz r6,-8(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(-8) );
	// stw r6,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r6.u32);
	// lwz r5,-4(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(-4) );
	// stw r5,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r5.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x82bc56f8
	sub_82BC56F8(ctx, base);
	// li r5,4
	ctx.r5.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5cd8
	sub_82BC5CD8(ctx, base);
	// lwz r4,24(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + int32_t(24) );
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82bdba74
	if (cr6.eq) goto loc_82BDBA74;
loc_82BDBA40:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// rlwinm r11,r30,2,0,29
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r29,24
	ctx.r10.s64 = r29.s64 + 24;
	// lwzx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82bdba40
	if (!cr6.eq) goto loc_82BDBA40;
loc_82BDBA74:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r11,10756
	ctx.r5.s64 = r11.s64 + 10756;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// lis r8,-32241
	ctx.r8.s64 = -2112946176;
	// addi r6,r10,10856
	ctx.r6.s64 = ctx.r10.s64 + 10856;
	// addi r5,r9,10916
	ctx.r5.s64 = ctx.r9.s64 + 10916;
	// addi r4,r8,10572
	ctx.r4.s64 = ctx.r8.s64 + 10572;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdb8f8
	sub_82BDB8F8(ctx, base);
	// lis r7,-32241
	ctx.r7.s64 = -2112946176;
	// lis r5,-32241
	ctx.r5.s64 = -2112946176;
	// lis r4,-32241
	ctx.r4.s64 = -2112946176;
	// addi r6,r7,10928
	ctx.r6.s64 = ctx.r7.s64 + 10928;
	// addi r5,r5,10960
	ctx.r5.s64 = ctx.r5.s64 + 10960;
	// addi r4,r4,10592
	ctx.r4.s64 = ctx.r4.s64 + 10592;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdb8f8
	sub_82BDB8F8(ctx, base);
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r11,68(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(68) );
	// lwz r10,64(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(64) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdbae4
	if (cr6.lt) goto loc_82BDBAE4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDBAE4:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,9
	ctx.r5.s64 = 9;
	// addi r4,r11,10972
	ctx.r4.s64 = r11.s64 + 10972;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// stw r10,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r10.u32);
	// li r4,-2
	ctx.r4.s64 = -2;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// addi r5,r9,10984
	ctx.r5.s64 = ctx.r9.s64 + 10984;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lis r7,-32241
	ctx.r7.s64 = -2112946176;
	// li r6,2
	ctx.r6.s64 = 2;
	// addi r5,r7,8136
	ctx.r5.s64 = ctx.r7.s64 + 8136;
	// li r4,-10000
	ctx.r4.s64 = -10000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc7328
	sub_82BC7328(ctx, base);
	// lis r6,-32241
	ctx.r6.s64 = -2112946176;
	// li r4,-2
	ctx.r4.s64 = -2;
	// addi r5,r6,10992
	ctx.r5.s64 = ctx.r6.s64 + 10992;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lwz r5,16(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r4,68(r5)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(68) );
	// lwz r3,64(r5)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(64) );
	// cmplw cr6,r4,r3
	cr6.compare<uint32_t>(ctx.r4.u32, ctx.r3.u32, xer);
	// blt cr6,0x82bdbb70
	if (cr6.lt) goto loc_82BDBB70;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDBB70:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bca340
	sub_82BCA340(ctx, base);
	// li r11,5
	r11.s64 = 5;
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// li r4,-2
	ctx.r4.s64 = -2;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r5,r10,10632
	ctx.r5.s64 = ctx.r10.s64 + 10632;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// lwz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r7,68(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(68) );
	// mr r30,r29
	r30.u64 = r29.u64;
	// stw r7,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r7.u32);
	// lwz r6,72(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(72) );
	// stw r6,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r6.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r5,r11,8
	ctx.r5.s64 = r11.s64 + 8;
	// stw r5,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r5.u32);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82bdbc10
	if (cr6.eq) goto loc_82BDBC10;
loc_82BDBBE0:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,4(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227b7e0
	sub_8227B7E0(ctx, base);
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,0(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// bl 0x82bc5eb0
	sub_82BC5EB0(ctx, base);
	// addi r30,r30,8
	r30.s64 = r30.s64 + 8;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82bdbbe0
	if (!cr6.eq) goto loc_82BDBBE0;
loc_82BDBC10:
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc55b8
	sub_82BC55B8(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDB990) {
	__imp__sub_82BDB990(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDBC38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r29,r11,1876
	r29.s64 = r11.s64 + 1876;
	// addi r30,r10,1744
	r30.s64 = ctx.r10.s64 + 1744;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bge cr6,0x82bdbc7c
	if (!cr6.lt) goto loc_82BDBC7C;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82bdbc7c
	if (cr6.eq) goto loc_82BDBC7C;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdbc8c
	if (cr6.eq) goto loc_82BDBC8C;
loc_82BDBC7C:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r5,20(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDBC8C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5b30
	sub_82BC5B30(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdbcc4
	if (!cr6.lt) goto loc_82BDBCC4;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82bdbcc4
	if (cr6.eq) goto loc_82BDBCC4;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x82bdbcd4
	if (cr6.eq) goto loc_82BDBCD4;
loc_82BDBCC4:
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r5,24(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(24) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDBCD4:
	// li r30,1
	r30.s64 = 1;
	// cmpwi cr6,r27,1
	cr6.compare<int32_t>(r27.s32, 1, xer);
	// blt cr6,0x82bdbdbc
	if (cr6.lt) goto loc_82BDBDBC;
	// li r28,3
	r28.s64 = 3;
loc_82BDBCE4:
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdbcfc
	if (cr6.lt) goto loc_82BDBCFC;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_82BDBCFC:
	// extsw r9,r30
	ctx.r9.s64 = r30.s32;
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// lwz r7,4(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r7,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r7.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stw r28,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r28.u32);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdbd50
	if (cr6.lt) goto loc_82BDBD50;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_82BDBD50:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r4,r11,-24
	ctx.r4.s64 = r11.s64 + -24;
	// bl 0x8219ee00
	sub_8219EE00(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82bdbdc8
	if (cr6.eq) goto loc_82BDBDC8;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82bdbdc8
	if (!cr6.eq) goto loc_82BDBDC8;
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmpw cr6,r30,r27
	cr6.compare<int32_t>(r30.s32, r27.s32, xer);
	// ble cr6,0x82bdbce4
	if (!cr6.gt) goto loc_82BDBCE4;
loc_82BDBDBC:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c34
	return;
loc_82BDBDC8:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BDBC38) {
	__imp__sub_82BDBC38(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDBDD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r29,r11,1876
	r29.s64 = r11.s64 + 1876;
	// addi r30,r10,1744
	r30.s64 = ctx.r10.s64 + 1744;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bge cr6,0x82bdbe1c
	if (!cr6.lt) goto loc_82BDBE1C;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82bdbe1c
	if (cr6.eq) goto loc_82BDBE1C;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdbe2c
	if (cr6.eq) goto loc_82BDBE2C;
loc_82BDBE1C:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r5,20(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDBE2C:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdbe54
	if (!cr6.lt) goto loc_82BDBE54;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// beq cr6,0x82bdbe54
	if (cr6.eq) goto loc_82BDBE54;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x82bdbe64
	if (cr6.eq) goto loc_82BDBE64;
loc_82BDBE54:
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r5,24(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(24) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDBE64:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
loc_82BDBE7C:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdbe90
	if (cr6.lt) goto loc_82BDBE90;
	// mr r11,r29
	r11.u64 = r29.u64;
loc_82BDBE90:
	// addi r5,r10,-8
	ctx.r5.s64 = ctx.r10.s64 + -8;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822cdf48
	sub_822CDF48(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdbf54
	if (cr6.eq) goto loc_82BDBF54;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdbec8
	if (cr6.lt) goto loc_82BDBEC8;
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
loc_82BDBEC8:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// lwz r7,-24(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-24) );
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// lwz r6,-20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-20) );
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// lwz r4,-24(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-24) );
	// stw r4,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r4.u32);
	// lwz r10,-20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-20) );
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r4,r11,-24
	ctx.r4.s64 = r11.s64 + -24;
	// bl 0x8219ee00
	sub_8219EE00(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,-8
	ctx.r10.s64 = r11.s64 + -8;
	// cmplw cr6,r10,r29
	cr6.compare<uint32_t>(ctx.r10.u32, r29.u32, xer);
	// beq cr6,0x82bdbf68
	if (cr6.eq) goto loc_82BDBF68;
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82bdbf68
	if (!cr6.eq) goto loc_82BDBF68;
	// addi r11,r11,-16
	r11.s64 = r11.s64 + -16;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x82bdbe7c
	goto loc_82BDBE7C;
loc_82BDBF54:
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BDBF68:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDBDD8) {
	__imp__sub_82BDBDD8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDBF78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, f30.u64);
	// stfd f31,-32(r1)
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r30,r10,1876
	r30.s64 = ctx.r10.s64 + 1876;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lfs f30,-27468(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -27468);
	f30.f64 = double(temp.f32);
	// fmr f31,f30
	f31.f64 = f30.f64;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// bge cr6,0x82bdbfd0
	if (!cr6.lt) goto loc_82BDBFD0;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bdbfd0
	if (cr6.eq) goto loc_82BDBFD0;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdbfe8
	if (cr6.eq) goto loc_82BDBFE8;
loc_82BDBFD0:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDBFE8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
loc_82BDC000:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdc014
	if (cr6.lt) goto loc_82BDC014;
	// mr r11,r30
	r11.u64 = r30.u64;
loc_82BDC014:
	// addi r5,r10,-8
	ctx.r5.s64 = ctx.r10.s64 + -8;
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822cdf48
	sub_822CDF48(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdc088
	if (cr6.eq) goto loc_82BDC088;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r10,-8
	r11.s64 = ctx.r10.s64 + -8;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// beq cr6,0x82bdc000
	if (cr6.eq) goto loc_82BDC000;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x82bdc000
	if (!cr6.eq) goto loc_82BDC000;
	// rotlwi r10,r10,0
	ctx.r10.u64 = rotl32(ctx.r10.u32, 0);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// beq cr6,0x82bdc074
	if (cr6.eq) goto loc_82BDC074;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x82bcbd48
	sub_82BCBD48(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bdc074
	if (!cr6.eq) goto loc_82BDC074;
	// fmr f0,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = f30.f64;
	// b 0x82bdc078
	goto loc_82BDC078;
loc_82BDC074:
	// lfs f0,0(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	f0.f64 = double(temp.f32);
loc_82BDC078:
	// fcmpu cr6,f0,f31
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f31.f64);
	// ble cr6,0x82bdc000
	if (!cr6.gt) goto loc_82BDC000;
	// fmr f31,f0
	f31.f64 = f0.f64;
	// b 0x82bdc000
	goto loc_82BDC000;
loc_82BDC088:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,3
	ctx.r10.s64 = 3;
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stfs f31,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(r11.u32 + 0, temp.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// lfd f30,-40(r1)
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// lfd f31,-32(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDBF78) {
	__imp__sub_82BDBF78(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDC0D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdc110
	if (!cr6.lt) goto loc_82BDC110;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r9,r10,1876
	ctx.r9.s64 = ctx.r10.s64 + 1876;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82bdc110
	if (cr6.eq) goto loc_82BDC110;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdc128
	if (cr6.eq) goto loc_82BDC128;
loc_82BDC110:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDC128:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5b30
	sub_82BC5B30(ctx, base);
	// extsw r11,r3
	r11.s64 = ctx.r3.s32;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r9,3
	ctx.r9.s64 = 3;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// li r3,1
	ctx.r3.s64 = 1;
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDC0D0) {
	__imp__sub_82BDC0D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDC180) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdc1c4
	if (!cr6.lt) goto loc_82BDC1C4;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bdc1c4
	if (cr6.eq) goto loc_82BDC1C4;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdc1dc
	if (cr6.eq) goto loc_82BDC1DC;
loc_82BDC1C4:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDC1DC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-4064
	ctx.r4.s64 = r11.s64 + -4064;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdc200
	if (cr6.lt) goto loc_82BDC200;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
loc_82BDC200:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDC180) {
	__imp__sub_82BDC180(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDC238) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r27,r11,1876
	r27.s64 = r11.s64 + 1876;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdc274
	if (!cr6.lt) goto loc_82BDC274;
	// cmplw cr6,r11,r27
	cr6.compare<uint32_t>(r11.u32, r27.u32, xer);
	// beq cr6,0x82bdc274
	if (cr6.eq) goto loc_82BDC274;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdc28c
	if (cr6.eq) goto loc_82BDC28C;
loc_82BDC274:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDC28C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5b30
	sub_82BC5B30(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r29,r3,1
	r29.s64 = ctx.r3.s64 + 1;
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// srawi r11,r9,3
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x7) != 0);
	r11.s64 = ctx.r9.s32 >> 3;
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// beq cr6,0x82bdc35c
	if (cr6.eq) goto loc_82BDC35C;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82bdc2d4
	if (cr6.eq) goto loc_82BDC2D4;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,9292
	ctx.r4.s64 = r11.s64 + 9292;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c34
	return;
loc_82BDC2D4:
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x82bc6f00
	sub_82BC6F00(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// bge cr6,0x82bdc2f0
	if (!cr6.lt) goto loc_82BDC2F0;
	// mr r29,r28
	r29.u64 = r28.u64;
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
loc_82BDC2F0:
	// ble cr6,0x82bdc360
	if (!cr6.gt) goto loc_82BDC360;
loc_82BDC2F4:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdc308
	if (cr6.lt) goto loc_82BDC308;
	// mr r11,r27
	r11.u64 = r27.u64;
loc_82BDC308:
	// addi r30,r29,-1
	r30.s64 = r29.s64 + -1;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r29,r30
	r29.u64 = r30.u64;
	// cmpw cr6,r30,r28
	cr6.compare<int32_t>(r30.s32, r28.s32, xer);
	// bgt cr6,0x82bdc2f4
	if (cr6.gt) goto loc_82BDC2F4;
	// b 0x82bdc360
	goto loc_82BDC360;
loc_82BDC35C:
	// mr r28,r29
	r28.u64 = r29.u64;
loc_82BDC360:
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BDC238) {
	__imp__sub_82BDC238(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDC380) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r27,r11,1876
	r27.s64 = r11.s64 + 1876;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdc3bc
	if (!cr6.lt) goto loc_82BDC3BC;
	// cmplw cr6,r11,r27
	cr6.compare<uint32_t>(r11.u32, r27.u32, xer);
	// beq cr6,0x82bdc3bc
	if (cr6.eq) goto loc_82BDC3BC;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdc3d4
	if (cr6.eq) goto loc_82BDC3D4;
loc_82BDC3BC:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDC3D4:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5b30
	sub_82BC5B30(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdc40c
	if (!cr6.lt) goto loc_82BDC40C;
	// cmplw cr6,r11,r27
	cr6.compare<uint32_t>(r11.u32, r27.u32, xer);
	// beq cr6,0x82bdc40c
	if (cr6.eq) goto loc_82BDC40C;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x82bdc414
	if (cr6.gt) goto loc_82BDC414;
loc_82BDC40C:
	// mr r29,r28
	r29.u64 = r28.u64;
	// b 0x82bdc424
	goto loc_82BDC424;
loc_82BDC414:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6f00
	sub_82BC6F00(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
loc_82BDC424:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// bne cr6,0x82bdc438
	if (!cr6.eq) goto loc_82BDC438;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
loc_82BDC438:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x821e1548
	sub_821E1548(ctx, base);
	// cmpw cr6,r29,r28
	cr6.compare<int32_t>(r29.s32, r28.s32, xer);
	// bge cr6,0x82bdc4b4
	if (!cr6.lt) goto loc_82BDC4B4;
loc_82BDC450:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdc464
	if (cr6.lt) goto loc_82BDC464;
	// mr r11,r27
	r11.u64 = r27.u64;
loc_82BDC464:
	// addi r30,r29,1
	r30.s64 = r29.s64 + 1;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r29,r30
	r29.u64 = r30.u64;
	// cmpw cr6,r30,r28
	cr6.compare<int32_t>(r30.s32, r28.s32, xer);
	// blt cr6,0x82bdc450
	if (cr6.lt) goto loc_82BDC450;
loc_82BDC4B4:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BDC380) {
	__imp__sub_82BDC380(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDC4E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// stwu r1,-688(r1)
	ea = -688 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// addi r5,r11,3224
	ctx.r5.s64 = r11.s64 + 3224;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bc6e30
	sub_82BC6E30(ctx, base);
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// addi r28,r11,1876
	r28.s64 = r11.s64 + 1876;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdc53c
	if (!cr6.lt) goto loc_82BDC53C;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// beq cr6,0x82bdc53c
	if (cr6.eq) goto loc_82BDC53C;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdc554
	if (cr6.eq) goto loc_82BDC554;
loc_82BDC53C:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r10,r11,1744
	ctx.r10.s64 = r11.s64 + 1744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDC554:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdc57c
	if (!cr6.lt) goto loc_82BDC57C;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// beq cr6,0x82bdc57c
	if (cr6.eq) goto loc_82BDC57C;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x82bdc584
	if (cr6.gt) goto loc_82BDC584;
loc_82BDC57C:
	// li r30,1
	r30.s64 = 1;
	// b 0x82bdc594
	goto loc_82BDC594;
loc_82BDC584:
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6f00
	sub_82BC6F00(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
loc_82BDC594:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,24
	r11.s64 = r11.s64 + 24;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdc5bc
	if (!cr6.lt) goto loc_82BDC5BC;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// beq cr6,0x82bdc5bc
	if (cr6.eq) goto loc_82BDC5BC;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bgt cr6,0x82bdc5cc
	if (cr6.gt) goto loc_82BDC5CC;
loc_82BDC5BC:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5b30
	sub_82BC5B30(ctx, base);
	// b 0x82bdc5d8
	goto loc_82BDC5D8;
loc_82BDC5CC:
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6f00
	sub_82BC6F00(ctx, base);
loc_82BDC5D8:
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r1,108
	r11.s64 = ctx.r1.s64 + 108;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r3,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r3.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// cmpw cr6,r30,r29
	cr6.compare<int32_t>(r30.s32, r29.s32, xer);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// bgt cr6,0x82bdc6a8
	if (cr6.gt) goto loc_82BDC6A8;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// lwz r26,80(r1)
	r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// addi r27,r11,-4044
	r27.s64 = r11.s64 + -4044;
loc_82BDC608:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdc61c
	if (cr6.lt) goto loc_82BDC61C;
	// mr r11,r28
	r11.u64 = r28.u64;
loc_82BDC61C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// addi r10,r11,-8
	ctx.r10.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r28
	cr6.compare<uint32_t>(ctx.r10.u32, r28.u32, xer);
	// beq cr6,0x82bdc668
	if (cr6.eq) goto loc_82BDC668;
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// beq cr6,0x82bdc678
	if (cr6.eq) goto loc_82BDC678;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// beq cr6,0x82bdc678
	if (cr6.eq) goto loc_82BDC678;
loc_82BDC668:
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc67f0
	sub_82BC67F0(ctx, base);
loc_82BDC678:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82bc7748
	sub_82BC7748(ctx, base);
	// cmpw cr6,r30,r29
	cr6.compare<int32_t>(r30.s32, r29.s32, xer);
	// beq cr6,0x82bdc698
	if (cr6.eq) goto loc_82BDC698;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82bc7670
	sub_82BC7670(ctx, base);
loc_82BDC698:
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmpw cr6,r30,r29
	cr6.compare<int32_t>(r30.s32, r29.s32, xer);
	// ble cr6,0x82bdc608
	if (!cr6.gt) goto loc_82BDC608;
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(104) );
loc_82BDC6A8:
	// lwz r11,96(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(96) );
	// addi r10,r1,108
	ctx.r10.s64 = ctx.r1.s64 + 108;
	// subf. r30,r10,r11
	r30.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// beq 0x82bdc718
	if (cr0.eq) goto loc_82BDC718;
	// lwz r11,16(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(16) );
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r10,68(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(68) );
	// lwz r9,64(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(64) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// blt cr6,0x82bdc6d4
	if (cr6.lt) goto loc_82BDC6D4;
	// bl 0x8227b8b8
	sub_8227B8B8(ctx, base);
loc_82BDC6D4:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r30,8(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r1,108
	ctx.r4.s64 = ctx.r1.s64 + 108;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// li r11,4
	r11.s64 = 4;
	// stw r3,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r3.u32);
	// addi r10,r1,108
	ctx.r10.s64 = ctx.r1.s64 + 108;
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// lwz r8,100(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(100) );
	// addi r7,r8,1
	ctx.r7.s64 = ctx.r8.s64 + 1;
	// lwz r3,104(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(104) );
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// stw r7,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r7.u32);
loc_82BDC718:
	// lwz r4,100(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(100) );
	// bl 0x82bc6490
	sub_82BC6490(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,688
	ctx.r1.s64 = ctx.r1.s64 + 688;
	// b 0x82ca2c2c
	return;
}

PPC_WEAK_FUNC(sub_82BDC4E8) {
	__imp__sub_82BDC4E8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDC730) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r9,-32247
	ctx.r9.s64 = -2113339392;
	// addi r30,r9,1876
	r30.s64 = ctx.r9.s64 + 1876;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r10,r11,8
	ctx.r10.s64 = r11.s64 + 8;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bge cr6,0x82bdc778
	if (!cr6.lt) goto loc_82BDC778;
	// cmplw cr6,r10,r30
	cr6.compare<uint32_t>(ctx.r10.u32, r30.u32, xer);
	// beq cr6,0x82bdc770
	if (cr6.eq) goto loc_82BDC770;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82bdc828
	if (cr6.eq) goto loc_82BDC828;
loc_82BDC770:
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdc77c
	if (cr6.lt) goto loc_82BDC77C;
loc_82BDC778:
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
loc_82BDC77C:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// addi r4,r4,-1
	ctx.r4.s64 = ctx.r4.s64 + -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r4,r5,-2
	ctx.r4.s64 = ctx.r5.s64 + -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,0(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(0) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,4(r6)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r8,r11,8
	ctx.r8.s64 = r11.s64 + 8;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r4,0(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// stw r4,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r4.u32);
	// lwz r11,4(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(4) );
	// stw r11,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r11.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r4,r11,-24
	ctx.r4.s64 = r11.s64 + -24;
	// bl 0x8219ee00
	sub_8219EE00(ctx, base);
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5a30
	sub_82BC5A30(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r10,r11,-8
	ctx.r10.s64 = r11.s64 + -8;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BDC828:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5448
	sub_82BC5448(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// cmplw cr6,r29,r30
	cr6.compare<uint32_t>(r29.u32, r30.u32, xer);
	// beq cr6,0x82bdc868
	if (cr6.eq) goto loc_82BDC868;
	// cmplw cr6,r5,r30
	cr6.compare<uint32_t>(ctx.r5.u32, r30.u32, xer);
	// beq cr6,0x82bdc868
	if (cr6.eq) goto loc_82BDC868;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x822ab768
	sub_822AB768(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BDC868:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDC730) {
	__imp__sub_82BDC730(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDC878) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd8
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpw cr6,r27,r26
	cr6.compare<int32_t>(r27.s32, r26.s32, xer);
	// bge cr6,0x82bdcdc8
	if (!cr6.lt) goto loc_82BDCDC8;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// addi r25,r11,1876
	r25.s64 = r11.s64 + 1876;
	// addi r24,r10,9388
	r24.s64 = ctx.r10.s64 + 9388;
loc_82BDC8A8:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdc8bc
	if (cr6.lt) goto loc_82BDC8BC;
	// mr r11,r25
	r11.u64 = r25.u64;
loc_82BDC8BC:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdc8f8
	if (cr6.lt) goto loc_82BDC8F8;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_82BDC8F8:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,-2
	ctx.r5.s64 = -2;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bdc730
	sub_82BDC730(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdc964
	if (cr6.eq) goto loc_82BDC964;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// b 0x82bdc970
	goto loc_82BDC970;
loc_82BDC964:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-16
	r11.s64 = r11.s64 + -16;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
loc_82BDC970:
	// subf r29,r27,r26
	r29.s64 = r26.s64 - r27.s64;
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// beq cr6,0x82bdcdc8
	if (cr6.eq) goto loc_82BDCDC8;
	// add r10,r27,r26
	ctx.r10.u64 = r27.u64 + r26.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// srawi r8,r10,1
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1) != 0);
	ctx.r8.s64 = ctx.r10.s32 >> 1;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// addze r30,r8
	temp.s64 = ctx.r8.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r8.u32;
	r30.s64 = temp.s64;
	// blt cr6,0x82bdc99c
	if (cr6.lt) goto loc_82BDC99C;
	// mr r11,r25
	r11.u64 = r25.u64;
loc_82BDC99C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdc9d8
	if (cr6.lt) goto loc_82BDC9D8;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_82BDC9D8:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,-2
	ctx.r4.s64 = -2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bdc730
	sub_82BDC730(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdca44
	if (cr6.eq) goto loc_82BDCA44;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// b 0x82bdcad8
	goto loc_82BDCAD8;
loc_82BDCA44:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdca60
	if (cr6.lt) goto loc_82BDCA60;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_82BDCA60:
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,-2
	ctx.r5.s64 = -2;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bdc730
	sub_82BDC730(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdcacc
	if (cr6.eq) goto loc_82BDCACC;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// b 0x82bdcad8
	goto loc_82BDCAD8;
loc_82BDCACC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-16
	r11.s64 = r11.s64 + -16;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
loc_82BDCAD8:
	// cmpwi cr6,r29,2
	cr6.compare<int32_t>(r29.s32, 2, xer);
	// beq cr6,0x82bdcdc8
	if (cr6.eq) goto loc_82BDCDC8;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdcaf4
	if (cr6.lt) goto loc_82BDCAF4;
	// mr r11,r25
	r11.u64 = r25.u64;
loc_82BDCAF4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// rotlwi r8,r11,0
	ctx.r8.u64 = rotl32(r11.u32, 0);
	// lwz r7,-8(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// stw r7,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r7.u32);
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// stw r6,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r6.u32);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdcb50
	if (cr6.lt) goto loc_82BDCB50;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_82BDCB50:
	// addi r28,r26,-1
	r28.s64 = r26.s64 + -1;
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r30,r27
	r30.u64 = r27.u64;
	// mr r29,r28
	r29.u64 = r28.u64;
loc_82BDCBAC:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdcbc4
	if (cr6.lt) goto loc_82BDCBC4;
	// mr r11,r25
	r11.u64 = r25.u64;
loc_82BDCBC4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,-2
	ctx.r5.s64 = -2;
	// li r4,-1
	ctx.r4.s64 = -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bdc730
	sub_82BDC730(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdcc30
	if (cr6.eq) goto loc_82BDCC30;
	// cmpw cr6,r30,r26
	cr6.compare<int32_t>(r30.s32, r26.s32, xer);
	// ble cr6,0x82bdcc20
	if (!cr6.gt) goto loc_82BDCC20;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BDCC20:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x82bdcbac
	goto loc_82BDCBAC;
loc_82BDCC30:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r29,r29,-1
	r29.s64 = r29.s64 + -1;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// blt cr6,0x82bdcc48
	if (cr6.lt) goto loc_82BDCC48;
	// mr r11,r25
	r11.u64 = r25.u64;
loc_82BDCC48:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,-1
	ctx.r5.s64 = -1;
	// li r4,-3
	ctx.r4.s64 = -3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bdc730
	sub_82BDC730(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82bdccb4
	if (cr6.eq) goto loc_82BDCCB4;
	// cmpw cr6,r29,r27
	cr6.compare<int32_t>(r29.s32, r27.s32, xer);
	// bge cr6,0x82bdcca4
	if (!cr6.lt) goto loc_82BDCCA4;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BDCCA4:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,-8
	r11.s64 = r11.s64 + -8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// b 0x82bdcc30
	goto loc_82BDCC30;
loc_82BDCCB4:
	// cmpw cr6,r29,r30
	cr6.compare<int32_t>(r29.s32, r30.s32, xer);
	// blt cr6,0x82bdcce0
	if (cr6.lt) goto loc_82BDCCE0;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// b 0x82bdcbac
	goto loc_82BDCBAC;
loc_82BDCCE0:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r11,r11,-24
	r11.s64 = r11.s64 + -24;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// mr r11,r25
	r11.u64 = r25.u64;
	// bge cr6,0x82bdcd00
	if (!cr6.lt) goto loc_82BDCD00;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82BDCD00:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// blt cr6,0x82bdcd3c
	if (cr6.lt) goto loc_82BDCD3C;
	// mr r10,r25
	ctx.r10.u64 = r25.u64;
loc_82BDCD3C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// bl 0x821e1498
	sub_821E1498(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r7,r11,8
	ctx.r7.s64 = r11.s64 + 8;
	// stw r7,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r7.u32);
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5f48
	sub_82BC5F48(ctx, base);
	// subf r6,r30,r26
	ctx.r6.s64 = r26.s64 - r30.s64;
	// subf r5,r27,r30
	ctx.r5.s64 = r30.s64 - r27.s64;
	// cmpw cr6,r5,r6
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r6.s32, xer);
	// bge cr6,0x82bdcdac
	if (!cr6.lt) goto loc_82BDCDAC;
	// addi r5,r30,-1
	ctx.r5.s64 = r30.s64 + -1;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// addi r27,r5,2
	r27.s64 = ctx.r5.s64 + 2;
	// b 0x82bdcdb8
	goto loc_82BDCDB8;
loc_82BDCDAC:
	// addi r4,r30,1
	ctx.r4.s64 = r30.s64 + 1;
	// mr r5,r26
	ctx.r5.u64 = r26.u64;
	// addi r26,r4,-2
	r26.s64 = ctx.r4.s64 + -2;
loc_82BDCDB8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdc878
	sub_82BDC878(ctx, base);
	// cmpw cr6,r27,r26
	cr6.compare<int32_t>(r27.s32, r26.s32, xer);
	// blt cr6,0x82bdc8a8
	if (cr6.lt) goto loc_82BDC8A8;
loc_82BDCDC8:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c28
	return;
}

PPC_WEAK_FUNC(sub_82BDC878) {
	__imp__sub_82BDC878(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDCDD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r30,r11,1876
	r30.s64 = r11.s64 + 1876;
	// addi r29,r10,1744
	r29.s64 = ctx.r10.s64 + 1744;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bge cr6,0x82bdce14
	if (!cr6.lt) goto loc_82BDCE14;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bdce14
	if (cr6.eq) goto loc_82BDCE14;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// beq cr6,0x82bdce24
	if (cr6.eq) goto loc_82BDCE24;
loc_82BDCE14:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r5,20(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + int32_t(20) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDCE24:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5b30
	sub_82BC5B30(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r4,40
	ctx.r4.s64 = 40;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc5510
	sub_82BC5510(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82bdce60
	if (!cr6.eq) goto loc_82BDCE60;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// addi r5,r11,3224
	ctx.r5.s64 = r11.s64 + 3224;
	// addi r4,r10,8100
	ctx.r4.s64 = ctx.r10.s64 + 8100;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc6a18
	sub_82BC6A18(ctx, base);
loc_82BDCE60:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdceb4
	if (!cr6.lt) goto loc_82BDCEB4;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bdceb4
	if (cr6.eq) goto loc_82BDCEB4;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// ble cr6,0x82bdceb4
	if (!cr6.gt) goto loc_82BDCEB4;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bge cr6,0x82bdcea4
	if (!cr6.lt) goto loc_82BDCEA4;
	// cmplw cr6,r11,r30
	cr6.compare<uint32_t>(r11.u32, r30.u32, xer);
	// beq cr6,0x82bdcea4
	if (cr6.eq) goto loc_82BDCEA4;
	// rotlwi r11,r9,0
	r11.u64 = rotl32(ctx.r9.u32, 0);
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// beq cr6,0x82bdceb4
	if (cr6.eq) goto loc_82BDCEB4;
loc_82BDCEA4:
	// li r4,2
	ctx.r4.s64 = 2;
	// lwz r5,24(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + int32_t(24) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bc68f0
	sub_82BC68F0(ctx, base);
loc_82BDCEB4:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,16
	ctx.r9.s64 = r11.s64 + 16;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bge cr6,0x82bdcef4
	if (!cr6.lt) goto loc_82BDCEF4;
	// li r10,0
	ctx.r10.s64 = 0;
loc_82BDCECC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r9,r11,8
	ctx.r9.s64 = r11.s64 + 8;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// rotlwi r8,r9,0
	ctx.r8.u64 = rotl32(ctx.r9.u32, 0);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r7,r11,16
	ctx.r7.s64 = r11.s64 + 16;
	// cmplw cr6,r8,r7
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r7.u32, xer);
	// blt cr6,0x82bdcecc
	if (cr6.lt) goto loc_82BDCECC;
loc_82BDCEF4:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// bl 0x82bdc878
	sub_82BDC878(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BDCDD0) {
	__imp__sub_82BDCDD0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDCF20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// lwz r31,4(r27)
	r31.u64 = PPC_LOAD_U32(r27.u32 + int32_t(4) );
	// beq cr6,0x82bdcfc8
	if (cr6.eq) goto loc_82BDCFC8;
loc_82BDCF44:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82bdcf78
	if (!cr6.eq) goto loc_82BDCF78;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcd8a8
	sub_82BCD8A8(ctx, base);
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x82bdcfd0
	if (cr6.eq) goto loc_82BDCFD0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// addi r9,r11,-1
	ctx.r9.s64 = r11.s64 + -1;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
loc_82BDCF78:
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lbz r11,0(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 0);
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x82bdcfd0
	if (cr6.eq) goto loc_82BDCFD0;
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmplw cr6,r29,r30
	cr6.compare<uint32_t>(r29.u32, r30.u32, xer);
	// bgt cr6,0x82bdcf98
	if (cr6.gt) goto loc_82BDCF98;
	// mr r30,r29
	r30.u64 = r29.u64;
loc_82BDCF98:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// subf. r29,r30,r29
	r29.s64 = r29.s64 - r30.s64;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// subf r9,r30,r10
	ctx.r9.s64 = ctx.r10.s64 - r30.s64;
	// add r28,r30,r28
	r28.u64 = r30.u64 + r28.u64;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// bne 0x82bdcf44
	if (!cr0.eq) goto loc_82BDCF44;
loc_82BDCFC8:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c34
	return;
loc_82BDCFD0:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82bdcfc8
	if (cr6.eq) goto loc_82BDCFC8;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r27)
	ctx.r5.u64 = PPC_LOAD_U32(r27.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// addi r6,r11,14044
	ctx.r6.s64 = r11.s64 + 14044;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
}

PPC_WEAK_FUNC(sub_82BDCF20) {
	__imp__sub_82BDCF20(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDD000) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mullw r5,r31,r29
	ctx.r5.s64 = int64_t(r31.s32) * int64_t(r29.s32);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82bdcf20
	sub_82BDCF20(ctx, base);
	// lwz r11,16(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bdd09c
	if (cr6.eq) goto loc_82BDD09C;
	// addi r10,r29,-1
	ctx.r10.s64 = r29.s64 + -1;
	// mr r11,r30
	r11.u64 = r30.u64;
	// cmplwi cr6,r10,7
	cr6.compare<uint32_t>(ctx.r10.u32, 7, xer);
	// bgt cr6,0x82bdd144
	if (cr6.gt) goto loc_82BDD144;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,-12200
	r12.s64 = r12.s64 + -12200;
	// rlwinm r0,r10,2,0,29
	r0.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_82BDD09C;
	case 1:
		goto loc_82BDD078;
	case 2:
		goto loc_82BDD144;
	case 3:
		goto loc_82BDD0A4;
	case 4:
		goto loc_82BDD144;
	case 5:
		goto loc_82BDD144;
	case 6:
		goto loc_82BDD144;
	case 7:
		goto loc_82BDD0E4;
	default:
		__builtin_unreachable();
	}
	// lwz r21,-12132(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-12132) );
	// lwz r21,-12168(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-12168) );
	// lwz r21,-11964(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11964) );
	// lwz r21,-12124(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-12124) );
	// lwz r21,-11964(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11964) );
	// lwz r21,-11964(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11964) );
	// lwz r21,-11964(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11964) );
	// lwz r21,-12060(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-12060) );
loc_82BDD078:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x82bdd09c
	if (cr6.eq) goto loc_82BDD09C;
loc_82BDD080:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addic. r31,r31,-1
	xer.ca = r31.u32 > 0;
	r31.s64 = r31.s64 + -1;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// lbz r9,1(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// stb r10,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r10.u8);
	// stb r9,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r9.u8);
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// bne 0x82bdd080
	if (!cr0.eq) goto loc_82BDD080;
loc_82BDD09C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BDD0A4:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x82bdd09c
	if (cr6.eq) goto loc_82BDD09C;
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
loc_82BDD0B0:
	// lbz r10,-1(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + -1);
	// addic. r31,r31,-1
	xer.ca = r31.u32 > 0;
	r31.s64 = r31.s64 + -1;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// lbz r9,2(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// lbz r8,1(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// lbz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// stb r10,2(r11)
	PPC_STORE_U8(r11.u32 + 2, ctx.r10.u8);
	// stb r9,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r9.u8);
	// stb r8,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r8.u8);
	// stb r7,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r7.u8);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// bne 0x82bdd0b0
	if (!cr0.eq) goto loc_82BDD0B0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BDD0E4:
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x82bdd09c
	if (cr6.eq) goto loc_82BDD09C;
	// addi r11,r30,1
	r11.s64 = r30.s64 + 1;
loc_82BDD0F0:
	// lbz r10,-1(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + -1);
	// addic. r31,r31,-1
	xer.ca = r31.u32 > 0;
	r31.s64 = r31.s64 + -1;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// lbz r9,6(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 6);
	// lbz r8,5(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 5);
	// lbz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U8(r11.u32 + 4);
	// lbz r6,3(r11)
	ctx.r6.u64 = PPC_LOAD_U8(r11.u32 + 3);
	// lbz r5,0(r11)
	ctx.r5.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r4,1(r11)
	ctx.r4.u64 = PPC_LOAD_U8(r11.u32 + 1);
	// lbz r3,2(r11)
	ctx.r3.u64 = PPC_LOAD_U8(r11.u32 + 2);
	// stb r10,6(r11)
	PPC_STORE_U8(r11.u32 + 6, ctx.r10.u8);
	// stb r9,-1(r11)
	PPC_STORE_U8(r11.u32 + -1, ctx.r9.u8);
	// stb r8,0(r11)
	PPC_STORE_U8(r11.u32 + 0, ctx.r8.u8);
	// stb r5,5(r11)
	PPC_STORE_U8(r11.u32 + 5, ctx.r5.u8);
	// stb r7,1(r11)
	PPC_STORE_U8(r11.u32 + 1, ctx.r7.u8);
	// stb r4,4(r11)
	PPC_STORE_U8(r11.u32 + 4, ctx.r4.u8);
	// stb r6,2(r11)
	PPC_STORE_U8(r11.u32 + 2, ctx.r6.u8);
	// stb r3,3(r11)
	PPC_STORE_U8(r11.u32 + 3, ctx.r3.u8);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bne 0x82bdd0f0
	if (!cr0.eq) goto loc_82BDD0F0;
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BDD144:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// addi r6,r11,14060
	ctx.r6.s64 = r11.s64 + 14060;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
}

PPC_WEAK_FUNC(sub_82BDD000) {
	__imp__sub_82BDD000(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDD170) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lwz r3,112(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(112) );
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge cr6,0x82bdd1c8
	if (!cr6.lt) goto loc_82BDD1C8;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r6,r11,14072
	ctx.r6.s64 = r11.s64 + 14072;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDD1C8:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDD170) {
	__imp__sub_82BDD170(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDD1E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lwz r30,80(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82bdd218
	if (!cr6.eq) goto loc_82BDD218;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
loc_82BDD218:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bcd930
	sub_82BCD930(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdcf20
	sub_82BDCF20(ctx, base);
	// addi r5,r30,-1
	ctx.r5.s64 = r30.s64 + -1;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDD1E0) {
	__imp__sub_82BDD1E0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDD258) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bcc
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// bl 0x82bdd170
	sub_82BDD170(ctx, base);
	// lis r11,8191
	r11.s64 = 536805376;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// ori r9,r11,65535
	ctx.r9.u64 = r11.u64 | 65535;
	// addi r10,r27,1
	ctx.r10.s64 = r27.s64 + 1;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r30,0
	r30.s64 = 0;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// addi r21,r11,11760
	r21.s64 = r11.s64 + 11760;
	// bgt cr6,0x82bdd2ac
	if (cr6.gt) goto loc_82BDD2AC;
	// rlwinm r6,r27,3,0,28
	ctx.r6.u64 = rotl64(r27.u32 | (r27.u64 << 32), 3) & 0xFFFFFFF8;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// b 0x82bdd2b8
	goto loc_82BDD2B8;
loc_82BDD2AC:
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_82BDD2B8:
	// stw r27,40(r25)
	PPC_STORE_U32(r25.u32 + 40, r27.u32);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// stw r3,8(r25)
	PPC_STORE_U32(r25.u32 + 8, ctx.r3.u32);
	// ble cr6,0x82bdd2e8
	if (!cr6.gt) goto loc_82BDD2E8;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// mr r11,r27
	r11.u64 = r27.u64;
loc_82BDD2D0:
	// lwz r9,8(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + int32_t(8) );
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r30,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, r30.u32);
	// bne 0x82bdd2d0
	if (!cr0.eq) goto loc_82BDD2D0;
loc_82BDD2E8:
	// mr r28,r30
	r28.u64 = r30.u64;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x82bdd3d0
	if (!cr6.gt) goto loc_82BDD3D0;
	// mr r29,r30
	r29.u64 = r30.u64;
	// li r22,1
	r22.s64 = 1;
	// li r23,3
	r23.s64 = 3;
	// li r24,4
	r24.s64 = 4;
loc_82BDD304:
	// lwz r11,8(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + int32_t(8) );
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// add r31,r29,r11
	r31.u64 = r29.u64 + r11.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lbz r11,112(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 112);
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmplwi cr6,r11,4
	cr6.compare<uint32_t>(r11.u32, 4, xer);
	// bgt cr6,0x82bdd418
	if (cr6.gt) goto loc_82BDD418;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,-11448
	r12.s64 = r12.s64 + -11448;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BDD35C;
	case 1:
		goto loc_82BDD364;
	case 2:
		goto loc_82BDD418;
	case 3:
		goto loc_82BDD38C;
	case 4:
		goto loc_82BDD3B0;
	default:
		__builtin_unreachable();
	}
	// lwz r21,-11428(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11428) );
	// lwz r21,-11420(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11420) );
	// lwz r21,-11240(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11240) );
	// lwz r21,-11380(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11380) );
	// lwz r21,-11344(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-11344) );
loc_82BDD35C:
	// stw r30,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r30.u32);
	// b 0x82bdd3c0
	goto loc_82BDD3C0;
loc_82BDD364:
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,113
	ctx.r4.s64 = ctx.r1.s64 + 113;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lbz r11,113(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 113);
	// stw r22,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r22.u32);
	// extsb r10,r11
	ctx.r10.s64 = r11.s8;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// b 0x82bdd3c0
	goto loc_82BDD3C0;
loc_82BDD38C:
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lfs f0,116(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	f0.f64 = double(temp.f32);
	// stfs f0,0(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 0, temp.u32);
	// stw r23,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r23.u32);
	// b 0x82bdd3c0
	goto loc_82BDD3C0;
loc_82BDD3B0:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82bdd1e0
	sub_82BDD1E0(ctx, base);
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// stw r24,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r24.u32);
loc_82BDD3C0:
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// addi r29,r29,8
	r29.s64 = r29.s64 + 8;
	// cmpw cr6,r28,r27
	cr6.compare<int32_t>(r28.s32, r27.s32, xer);
	// blt cr6,0x82bdd304
	if (cr6.lt) goto loc_82BDD304;
loc_82BDD3D0:
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lwz r31,116(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(116) );
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// bge cr6,0x82bdd440
	if (!cr6.lt) goto loc_82BDD440;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r26)
	ctx.r5.u64 = PPC_LOAD_U32(r26.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// addi r6,r11,14072
	ctx.r6.s64 = r11.s64 + 14072;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDD418:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r26)
	ctx.r5.u64 = PPC_LOAD_U32(r26.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// addi r6,r11,14084
	ctx.r6.s64 = r11.s64 + 14084;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDD440:
	// lis r11,16383
	r11.s64 = 1073676288;
	// addi r10,r31,1
	ctx.r10.s64 = r31.s64 + 1;
	// ori r9,r11,65535
	ctx.r9.u64 = r11.u64 | 65535;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bgt cr6,0x82bdd4a8
	if (cr6.gt) goto loc_82BDD4A8;
	// lwz r27,0(r26)
	r27.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// rlwinm r28,r31,2,0,29
	r28.u64 = rotl64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r29,16(r27)
	r29.u64 = PPC_LOAD_U32(r27.u32 + int32_t(16) );
	// lwz r3,16(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + int32_t(16) );
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(12) );
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bdd498
	if (!cr6.eq) goto loc_82BDD498;
	// cmplwi cr6,r28,0
	cr6.compare<uint32_t>(r28.u32, 0, xer);
	// beq cr6,0x82bdd498
	if (cr6.eq) goto loc_82BDD498;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDD498:
	// lwz r11,68(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(68) );
	// add r11,r28,r11
	r11.u64 = r28.u64 + r11.u64;
	// stw r11,68(r29)
	PPC_STORE_U32(r29.u32 + 68, r11.u32);
	// b 0x82bdd4b8
	goto loc_82BDD4B8;
loc_82BDD4A8:
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// lwz r3,0(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
loc_82BDD4B8:
	// stw r31,52(r25)
	PPC_STORE_U32(r25.u32 + 52, r31.u32);
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// stw r3,16(r25)
	PPC_STORE_U32(r25.u32 + 16, ctx.r3.u32);
	// ble cr6,0x82bdd50c
	if (!cr6.gt) goto loc_82BDD50C;
	// mr r10,r30
	ctx.r10.u64 = r30.u64;
	// mr r11,r31
	r11.u64 = r31.u64;
loc_82BDD4D0:
	// lwz r9,16(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + int32_t(16) );
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stwx r30,r10,r9
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, r30.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bne 0x82bdd4d0
	if (!cr0.eq) goto loc_82BDD4D0;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// ble cr6,0x82bdd50c
	if (!cr6.gt) goto loc_82BDD50C;
loc_82BDD4EC:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r4,32(r25)
	ctx.r4.u64 = PPC_LOAD_U32(r25.u32 + int32_t(32) );
	// bl 0x82bdd8a8
	sub_82BDD8A8(ctx, base);
	// lwz r11,16(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + int32_t(16) );
	// addic. r31,r31,-1
	xer.ca = r31.u32 > 0;
	r31.s64 = r31.s64 + -1;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// stwx r3,r30,r11
	PPC_STORE_U32(r30.u32 + r11.u32, ctx.r3.u32);
	// addi r30,r30,4
	r30.s64 = r30.s64 + 4;
	// bne 0x82bdd4ec
	if (!cr0.eq) goto loc_82BDD4EC;
loc_82BDD50C:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82ca2c1c
	return;
}

PPC_WEAK_FUNC(sub_82BDD258) {
	__imp__sub_82BDD258(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDD518) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd0
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// bl 0x82bdd170
	sub_82BDD170(ctx, base);
	// lis r11,16383
	r11.s64 = 1073676288;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// ori r24,r11,65535
	r24.u64 = r11.u64 | 65535;
	// addi r10,r30,1
	ctx.r10.s64 = r30.s64 + 1;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r23,0
	r23.s64 = 0;
	// cmplw cr6,r10,r24
	cr6.compare<uint32_t>(ctx.r10.u32, r24.u32, xer);
	// addi r25,r11,11760
	r25.s64 = r11.s64 + 11760;
	// bgt cr6,0x82bdd570
	if (cr6.gt) goto loc_82BDD570;
	// rlwinm r6,r30,2,0,29
	ctx.r6.u64 = rotl64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// b 0x82bdd57c
	goto loc_82BDD57C;
loc_82BDD570:
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
loc_82BDD57C:
	// stw r4,20(r26)
	PPC_STORE_U32(r26.u32 + 20, ctx.r4.u32);
	// li r6,4
	ctx.r6.s64 = 4;
	// stw r30,48(r26)
	PPC_STORE_U32(r26.u32 + 48, r30.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd170
	sub_82BDD170(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// lis r11,5461
	r11.s64 = 357892096;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r10,r27,1
	ctx.r10.s64 = r27.s64 + 1;
	// ori r9,r11,21845
	ctx.r9.u64 = r11.u64 | 21845;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bgt cr6,0x82bdd5d4
	if (cr6.gt) goto loc_82BDD5D4;
	// rlwinm r11,r27,1,0,30
	r11.u64 = rotl64(r27.u32 | (r27.u64 << 32), 1) & 0xFFFFFFFE;
	// li r5,0
	ctx.r5.s64 = 0;
	// add r11,r27,r11
	r11.u64 = r27.u64 + r11.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// b 0x82bdd5e0
	goto loc_82BDD5E0;
loc_82BDD5D4:
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
loc_82BDD5E0:
	// stw r27,56(r26)
	PPC_STORE_U32(r26.u32 + 56, r27.u32);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// stw r3,24(r26)
	PPC_STORE_U32(r26.u32 + 24, ctx.r3.u32);
	// ble cr6,0x82bdd60c
	if (!cr6.gt) goto loc_82BDD60C;
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// mr r11,r27
	r11.u64 = r27.u64;
loc_82BDD5F8:
	// lwz r9,24(r26)
	ctx.r9.u64 = PPC_LOAD_U32(r26.u32 + int32_t(24) );
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stwx r23,r10,r9
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, r23.u32);
	// addi r10,r10,12
	ctx.r10.s64 = ctx.r10.s64 + 12;
	// bne 0x82bdd5f8
	if (!cr0.eq) goto loc_82BDD5F8;
loc_82BDD60C:
	// mr r28,r23
	r28.u64 = r23.u64;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x82bdd6ec
	if (!cr6.gt) goto loc_82BDD6EC;
	// mr r30,r23
	r30.u64 = r23.u64;
loc_82BDD61C:
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lwz r29,112(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(112) );
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// bne cr6,0x82bdd644
	if (!cr6.eq) goto loc_82BDD644;
	// mr r11,r23
	r11.u64 = r23.u64;
	// b 0x82bdd67c
	goto loc_82BDD67C;
loc_82BDD644:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bcd930
	sub_82BCD930(ctx, base);
	// mr r22,r3
	r22.u64 = ctx.r3.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdcf20
	sub_82BDCF20(ctx, base);
	// addi r5,r29,-1
	ctx.r5.s64 = r29.s64 + -1;
	// mr r4,r22
	ctx.r4.u64 = r22.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
loc_82BDD67C:
	// lwz r10,24(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + int32_t(24) );
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stwx r11,r30,r10
	PPC_STORE_U32(r30.u32 + ctx.r10.u32, r11.u32);
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lwz r10,116(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(116) );
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// blt cr6,0x82bdd734
	if (cr6.lt) goto loc_82BDD734;
	// lwz r11,24(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(24) );
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// add r11,r30,r11
	r11.u64 = r30.u64 + r11.u64;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lwz r11,120(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(120) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82bdd75c
	if (cr6.lt) goto loc_82BDD75C;
	// lwz r10,24(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + int32_t(24) );
	// addi r28,r28,1
	r28.s64 = r28.s64 + 1;
	// add r10,r30,r10
	ctx.r10.u64 = r30.u64 + ctx.r10.u64;
	// addi r30,r30,12
	r30.s64 = r30.s64 + 12;
	// cmpw cr6,r28,r27
	cr6.compare<int32_t>(r28.s32, r27.s32, xer);
	// stw r11,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, r11.u32);
	// blt cr6,0x82bdd61c
	if (cr6.lt) goto loc_82BDD61C;
loc_82BDD6EC:
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lwz r27,120(r1)
	r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(120) );
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bge cr6,0x82bdd784
	if (!cr6.lt) goto loc_82BDD784;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r6,r11,14072
	ctx.r6.s64 = r11.s64 + 14072;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDD734:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r6,r11,14072
	ctx.r6.s64 = r11.s64 + 14072;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDD75C:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r6,r11,14072
	ctx.r6.s64 = r11.s64 + 14072;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDD784:
	// addi r11,r27,1
	r11.s64 = r27.s64 + 1;
	// cmplw cr6,r11,r24
	cr6.compare<uint32_t>(r11.u32, r24.u32, xer);
	// bgt cr6,0x82bdd7e4
	if (cr6.gt) goto loc_82BDD7E4;
	// lwz r28,0(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// rlwinm r29,r27,2,0,29
	r29.u64 = rotl64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,16(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// lwz r3,16(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bdd7d4
	if (!cr6.eq) goto loc_82BDD7D4;
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82bdd7d4
	if (cr6.eq) goto loc_82BDD7D4;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDD7D4:
	// lwz r11,68(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(68) );
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r11,68(r30)
	PPC_STORE_U32(r30.u32 + 68, r11.u32);
	// b 0x82bdd7f4
	goto loc_82BDD7F4;
loc_82BDD7E4:
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
loc_82BDD7F4:
	// stw r27,36(r26)
	PPC_STORE_U32(r26.u32 + 36, r27.u32);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// stw r3,28(r26)
	PPC_STORE_U32(r26.u32 + 28, ctx.r3.u32);
	// ble cr6,0x82bdd8a0
	if (!cr6.gt) goto loc_82BDD8A0;
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// mr r11,r27
	r11.u64 = r27.u64;
loc_82BDD80C:
	// lwz r9,28(r26)
	ctx.r9.u64 = PPC_LOAD_U32(r26.u32 + int32_t(28) );
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stwx r23,r10,r9
	PPC_STORE_U32(ctx.r10.u32 + ctx.r9.u32, r23.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bne 0x82bdd80c
	if (!cr0.eq) goto loc_82BDD80C;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// ble cr6,0x82bdd8a0
	if (!cr6.gt) goto loc_82BDD8A0;
	// mr r28,r23
	r28.u64 = r23.u64;
	// mr r29,r27
	r29.u64 = r27.u64;
loc_82BDD830:
	// li r6,4
	ctx.r6.s64 = 4;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,120
	ctx.r4.s64 = ctx.r1.s64 + 120;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lwz r30,120(r1)
	r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(120) );
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82bdd858
	if (!cr6.eq) goto loc_82BDD858;
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// b 0x82bdd88c
	goto loc_82BDD88C;
loc_82BDD858:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bcd930
	sub_82BCD930(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdcf20
	sub_82BDCF20(ctx, base);
	// addi r5,r30,-1
	ctx.r5.s64 = r30.s64 + -1;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
loc_82BDD88C:
	// lwz r11,28(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(28) );
	// addic. r29,r29,-1
	xer.ca = r29.u32 > 0;
	r29.s64 = r29.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// stwx r3,r28,r11
	PPC_STORE_U32(r28.u32 + r11.u32, ctx.r3.u32);
	// addi r28,r28,4
	r28.s64 = r28.s64 + 4;
	// bne 0x82bdd830
	if (!cr0.eq) goto loc_82BDD830;
loc_82BDD8A0:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82ca2c20
	return;
}

PPC_WEAK_FUNC(sub_82BDD518) {
	__imp__sub_82BDD518(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDD8A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bcc888
	sub_82BCC888(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r10,9
	ctx.r10.s64 = 9;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// stw r30,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r30.u32);
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r8,28(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(28) );
	// lwz r7,8(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(8) );
	// subf r6,r7,r8
	ctx.r6.s64 = ctx.r8.s64 - ctx.r7.s64;
	// cmpwi cr6,r6,8
	cr6.compare<int32_t>(ctx.r6.s32, 8, xer);
	// bgt cr6,0x82bdd90c
	if (cr6.gt) goto loc_82BDD90C;
	// lwz r11,44(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(44) );
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// rlwinm r4,r11,1,0,30
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// bge cr6,0x82bdd908
	if (!cr6.lt) goto loc_82BDD908;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
loc_82BDD908:
	// bl 0x82bccd58
	sub_82BCCD58(ctx, base);
loc_82BDD90C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// addi r10,r10,8
	ctx.r10.s64 = ctx.r10.s64 + 8;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// bl 0x82bdd1e0
	sub_82BDD1E0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r3,32(r30)
	PPC_STORE_U32(r30.u32 + 32, ctx.r3.u32);
	// bne cr6,0x82bdd934
	if (!cr6.eq) goto loc_82BDD934;
	// stw r29,32(r30)
	PPC_STORE_U32(r30.u32 + 32, r29.u32);
loc_82BDD934:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd170
	sub_82BDD170(ctx, base);
	// stw r3,60(r30)
	PPC_STORE_U32(r30.u32 + 60, ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd170
	sub_82BDD170(ctx, base);
	// stw r3,64(r30)
	PPC_STORE_U32(r30.u32 + 64, ctx.r3.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lbz r11,112(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 112);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,113
	ctx.r4.s64 = ctx.r1.s64 + 113;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r11,72(r30)
	PPC_STORE_U8(r30.u32 + 72, r11.u8);
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lbz r10,113(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 113);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r10,73(r30)
	PPC_STORE_U8(r30.u32 + 73, ctx.r10.u8);
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lbz r9,112(r1)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r1.u32 + 112);
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r1,113
	ctx.r4.s64 = ctx.r1.s64 + 113;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r9,74(r30)
	PPC_STORE_U8(r30.u32 + 74, ctx.r9.u8);
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// lbz r8,113(r1)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r1.u32 + 113);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stb r8,75(r30)
	PPC_STORE_U8(r30.u32 + 75, ctx.r8.u8);
	// bl 0x82bdd170
	sub_82BDD170(ctx, base);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lis r7,16383
	ctx.r7.s64 = 1073676288;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r6,r29,1
	ctx.r6.s64 = r29.s64 + 1;
	// ori r5,r7,65535
	ctx.r5.u64 = ctx.r7.u64 | 65535;
	// cmplw cr6,r6,r5
	cr6.compare<uint32_t>(ctx.r6.u32, ctx.r5.u32, xer);
	// bgt cr6,0x82bdd9f8
	if (cr6.gt) goto loc_82BDD9F8;
	// rlwinm r6,r29,2,0,29
	ctx.r6.u64 = rotl64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// b 0x82bdda08
	goto loc_82BDDA08;
loc_82BDD9F8:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,11760
	ctx.r4.s64 = r11.s64 + 11760;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
loc_82BDDA08:
	// stw r4,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r4.u32);
	// li r6,4
	ctx.r6.s64 = 4;
	// stw r29,44(r30)
	PPC_STORE_U32(r30.u32 + 44, r29.u32);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd000
	sub_82BDD000(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd258
	sub_82BDD258(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdd518
	sub_82BDD518(ctx, base);
	// li r5,255
	ctx.r5.s64 = 255;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,44(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(44) );
	// bl 0x82bc8dd0
	sub_82BC8DD0(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bdda78
	if (!cr6.eq) goto loc_82BDDA78;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r6,r11,14116
	ctx.r6.s64 = r11.s64 + 14116;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDDA78:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// addi r10,r10,-8
	ctx.r10.s64 = ctx.r10.s64 + -8;
	// stw r10,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r10.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDD8A8) {
	__imp__sub_82BDD8A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDA98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// li r11,4
	r11.s64 = 4;
	// li r31,0
	r31.s64 = 0;
	// li r9,81
	ctx.r9.s64 = 81;
	// stb r11,119(r1)
	PPC_STORE_U8(ctx.r1.u32 + 119, r11.u8);
	// li r5,12
	ctx.r5.s64 = 12;
	// stb r31,117(r1)
	PPC_STORE_U8(ctx.r1.u32 + 117, r31.u8);
	// lwz r10,11952(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(11952) );
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// stb r9,116(r1)
	PPC_STORE_U8(ctx.r1.u32 + 116, ctx.r9.u8);
	// stb r31,118(r1)
	PPC_STORE_U8(ctx.r1.u32 + 118, r31.u8);
	// stb r11,120(r1)
	PPC_STORE_U8(ctx.r1.u32 + 120, r11.u8);
	// stb r11,121(r1)
	PPC_STORE_U8(ctx.r1.u32 + 121, r11.u8);
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// stb r11,122(r1)
	PPC_STORE_U8(ctx.r1.u32 + 122, r11.u8);
	// stb r31,123(r1)
	PPC_STORE_U8(ctx.r1.u32 + 123, r31.u8);
	// bl 0x82bdcf20
	sub_82BDCF20(ctx, base);
	// lbz r7,134(r1)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r1.u32 + 134);
	// addi r11,r1,112
	r11.s64 = ctx.r1.s64 + 112;
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// stb r31,134(r1)
	PPC_STORE_U8(ctx.r1.u32 + 134, r31.u8);
	// extsb r6,r7
	ctx.r6.s64 = ctx.r7.s8;
	// addi r8,r11,12
	ctx.r8.s64 = r11.s64 + 12;
	// cntlzw r5,r6
	ctx.r5.u64 = ctx.r6.u32 == 0 ? 32 : __builtin_clz(ctx.r6.u32);
	// rlwinm r4,r5,27,31,31
	ctx.r4.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 27) & 0x1;
	// xori r3,r4,1
	ctx.r3.u64 = ctx.r4.u64 ^ 1;
	// stw r3,16(r30)
	PPC_STORE_U32(r30.u32 + 16, ctx.r3.u32);
loc_82BDDB1C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// subf. r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82bddb3c
	if (!cr0.eq) goto loc_82BDDB3C;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// bne cr6,0x82bddb1c
	if (!cr6.eq) goto loc_82BDDB1C;
loc_82BDDB3C:
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82bddb6c
	if (cr6.eq) goto loc_82BDDB6C;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// addi r6,r11,14128
	ctx.r6.s64 = r11.s64 + 14128;
	// addi r4,r10,14016
	ctx.r4.s64 = ctx.r10.s64 + 14016;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDDB6C:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDDA98) {
	__imp__sub_82BDDA98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDB88) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,0(r6)
	r11.u64 = PPC_LOAD_U8(ctx.r6.u32 + 0);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// cmpwi cr6,r11,64
	cr6.compare<int32_t>(r11.s32, 64, xer);
	// beq cr6,0x82bddbd4
	if (cr6.eq) goto loc_82BDDBD4;
	// cmpwi cr6,r11,61
	cr6.compare<int32_t>(r11.s32, 61, xer);
	// beq cr6,0x82bddbd4
	if (cr6.eq) goto loc_82BDDBD4;
	// cmpwi cr6,r11,27
	cr6.compare<int32_t>(r11.s32, 27, xer);
	// bne cr6,0x82bddbcc
	if (!cr6.eq) goto loc_82BDDBCC;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r10,r11,14140
	ctx.r10.s64 = r11.s64 + 14140;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// b 0x82bddbdc
	goto loc_82BDDBDC;
loc_82BDDBCC:
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// b 0x82bddbdc
	goto loc_82BDDBDC;
loc_82BDDBD4:
	// addi r11,r6,1
	r11.s64 = ctx.r6.s64 + 1;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
loc_82BDDBDC:
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r31.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stw r4,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r4.u32);
	// stw r5,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r5.u32);
	// bl 0x82bdda98
	sub_82BDDA98(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r4,r11,14156
	ctx.r4.s64 = r11.s64 + 14156;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82bdd8a8
	sub_82BDD8A8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDDB88) {
	__imp__sub_82BDDB88(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDC28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r5,60(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(60) );
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// bne cr6,0x82bddc74
	if (!cr6.eq) goto loc_82BDDC74;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// mr r6,r7
	ctx.r6.u64 = ctx.r7.u64;
	// addi r4,r10,13420
	ctx.r4.s64 = ctx.r10.s64 + 13420;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// b 0x82bddc84
	goto loc_82BDDC84;
loc_82BDDC74:
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// mr r6,r11
	ctx.r6.u64 = r11.u64;
	// addi r4,r10,13456
	ctx.r4.s64 = ctx.r10.s64 + 13456;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
loc_82BDDC84:
	// lwz r31,12(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// bl 0x82a2ed70
	sub_82A2ED70(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r7,r30
	ctx.r7.u64 = r30.u64;
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// addi r4,r11,11748
	ctx.r4.s64 = r11.s64 + 11748;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
}

PPC_WEAK_FUNC(sub_82BDDC28) {
	__imp__sub_82BDDC28(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDCC8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpw cr6,r11,r4
	cr6.compare<int32_t>(r11.s32, ctx.r4.s32, xer);
	// beq cr6,0x82bddd10
	if (cr6.eq) goto loc_82BDDD10;
	// bl 0x82bcda68
	sub_82BCDA68(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// addi r4,r11,13404
	ctx.r4.s64 = r11.s64 + 13404;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDDD10:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDDCC8) {
	__imp__sub_82BDDCC8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDD28) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// bne cr6,0x82bddd58
	if (!cr6.eq) goto loc_82BDDD58;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BDDD58:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// bne cr6,0x82bddd90
	if (!cr6.eq) goto loc_82BDDD90;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82bcda68
	sub_82BCDA68(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// addi r4,r11,13404
	ctx.r4.s64 = r11.s64 + 13404;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDDD90:
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// bl 0x82bcda68
	sub_82BCDA68(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcda68
	sub_82BCDA68(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// addi r4,r11,13496
	ctx.r4.s64 = r11.s64 + 13496;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
}

PPC_WEAK_FUNC(sub_82BDDD28) {
	__imp__sub_82BDDD28(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDDD8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,4
	r31.s64 = 4;
	// stw r5,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r5.u32);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r3,28(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(28) );
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x82be1c40
	sub_82BE1C40(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// stw r3,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r3.u32);
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
	// stw r11,16(r30)
	PPC_STORE_U32(r30.u32 + 16, r11.u32);
	// stw r31,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r31.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDDDD8) {
	__imp__sub_82BDDDD8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDE38) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// lwz r28,28(r27)
	r28.u64 = PPC_LOAD_U32(r27.u32 + int32_t(28) );
	// lwz r30,0(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lhz r11,48(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 48);
	// addi r29,r30,56
	r29.s64 = r30.s64 + 56;
	// extsh r11,r11
	r11.s64 = r11.s16;
	// lwz r31,56(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(56) );
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// cmpw cr6,r10,r31
	cr6.compare<int32_t>(ctx.r10.s32, r31.s32, xer);
	// ble cr6,0x82bdde94
	if (!cr6.gt) goto loc_82BDDE94;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r3,32(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + int32_t(32) );
	// li r7,32767
	ctx.r7.s64 = 32767;
	// lwz r4,24(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(24) );
	// addi r8,r11,13540
	ctx.r8.s64 = r11.s64 + 13540;
	// li r6,12
	ctx.r6.s64 = 12;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x82bcf850
	sub_82BCF850(ctx, base);
	// stw r3,24(r30)
	PPC_STORE_U32(r30.u32 + 24, ctx.r3.u32);
loc_82BDDE94:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bge cr6,0x82bddecc
	if (!cr6.lt) goto loc_82BDDECC;
	// rlwinm r11,r31,1,0,30
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// li r10,0
	ctx.r10.s64 = 0;
	// add r11,r31,r11
	r11.u64 = r31.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
loc_82BDDEB0:
	// lwz r9,24(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(24) );
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// stwx r10,r9,r11
	PPC_STORE_U32(ctx.r9.u32 + r11.u32, ctx.r10.u32);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// lwz r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpw cr6,r31,r8
	cr6.compare<int32_t>(r31.s32, ctx.r8.s32, xer);
	// blt cr6,0x82bddeb0
	if (cr6.lt) goto loc_82BDDEB0;
loc_82BDDECC:
	// lhz r11,48(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 48);
	// lwz r9,24(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(24) );
	// extsh r11,r11
	r11.s64 = r11.s16;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r8,r11,r10
	ctx.r8.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r26,r7,r9
	PPC_STORE_U32(ctx.r7.u32 + ctx.r9.u32, r26.u32);
	// lbz r6,5(r26)
	ctx.r6.u64 = PPC_LOAD_U8(r26.u32 + 5);
	// clrlwi r5,r6,30
	ctx.r5.u64 = ctx.r6.u32 & 0x3;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82bddf3c
	if (cr6.eq) goto loc_82BDDF3C;
	// lbz r11,5(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 5);
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82bddf3c
	if (cr6.eq) goto loc_82BDDF3C;
	// lwz r10,32(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + int32_t(32) );
	// lwz r3,16(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// lbz r9,21(r3)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r3.u32 + 21);
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// bne cr6,0x82bddf28
	if (!cr6.eq) goto loc_82BDDF28;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82bca7d8
	sub_82BCA7D8(ctx, base);
	// b 0x82bddf3c
	goto loc_82BDDF3C;
loc_82BDDF28:
	// lbz r10,20(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 20);
	// rlwimi r10,r11,0,24,28
	ctx.r10.u64 = (rotl32(r11.u32, 0) & 0xF8) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFF07);
	// clrlwi r9,r10,24
	ctx.r9.u64 = ctx.r10.u32 & 0xFF;
	// rlwinm r9,r9,0,30,28
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// stb r9,5(r30)
	PPC_STORE_U8(r30.u32 + 5, ctx.r9.u8);
loc_82BDDF3C:
	// lhz r11,48(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 48);
	// extsh r3,r11
	ctx.r3.s64 = r11.s16;
	// addi r10,r3,1
	ctx.r10.s64 = ctx.r3.s64 + 1;
	// sth r10,48(r28)
	PPC_STORE_U16(r28.u32 + 48, ctx.r10.u16);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BDDE38) {
	__imp__sub_82BDDE38(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDF58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r31,28(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(28) );
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lbz r11,50(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,200
	cr6.compare<int32_t>(r11.s32, 200, xer);
	// ble cr6,0x82bddf9c
	if (!cr6.gt) goto loc_82BDDF9C;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r5,r11,13568
	ctx.r5.s64 = r11.s64 + 13568;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddc28
	sub_82BDDC28(ctx, base);
loc_82BDDF9C:
	// bl 0x82bdde38
	sub_82BDDE38(ctx, base);
	// lbz r11,50(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r9,r11,86
	ctx.r9.s64 = r11.s64 + 86;
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// sthx r3,r8,r31
	PPC_STORE_U16(ctx.r8.u32 + r31.u32, ctx.r3.u16);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDDF58) {
	__imp__sub_82BDDF58(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDDFD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r26,0
	r26.s64 = 0;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// lwz r31,0(r28)
	r31.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// addi r29,r31,36
	r29.s64 = r31.s64 + 36;
	// lbz r10,72(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// lwz r30,36(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// ble cr6,0x82bde040
	if (!cr6.gt) goto loc_82BDE040;
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// addi r11,r28,52
	r11.s64 = r28.s64 + 52;
loc_82BDE010:
	// lbz r8,-1(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + -1);
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// bne cr6,0x82bde02c
	if (!cr6.eq) goto loc_82BDE02C;
	// lbz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// lwz r7,4(r27)
	ctx.r7.u64 = PPC_LOAD_U32(r27.u32 + int32_t(4) );
	// cmpw cr6,r8,r7
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r7.s32, xer);
	// beq cr6,0x82bde154
	if (cr6.eq) goto loc_82BDE154;
loc_82BDE02C:
	// lbz r8,72(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// cmpw cr6,r3,r8
	cr6.compare<int32_t>(ctx.r3.s32, ctx.r8.s32, xer);
	// blt cr6,0x82bde010
	if (cr6.lt) goto loc_82BDE010;
loc_82BDE040:
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r11,60
	cr6.compare<int32_t>(r11.s32, 60, xer);
	// ble cr6,0x82bde060
	if (!cr6.gt) goto loc_82BDE060;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,60
	ctx.r4.s64 = 60;
	// addi r5,r11,13584
	ctx.r5.s64 = r11.s64 + 13584;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82bddc28
	sub_82BDDC28(ctx, base);
loc_82BDE060:
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// ble cr6,0x82bde090
	if (!cr6.gt) goto loc_82BDE090;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// lwz r3,16(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// lis r7,32767
	ctx.r7.s64 = 2147418112;
	// lwz r4,28(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// addi r8,r11,3224
	ctx.r8.s64 = r11.s64 + 3224;
	// ori r7,r7,65533
	ctx.r7.u64 = ctx.r7.u64 | 65533;
	// li r6,4
	ctx.r6.s64 = 4;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x82bcf850
	sub_82BCF850(ctx, base);
	// stw r3,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r3.u32);
loc_82BDE090:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// bge cr6,0x82bde0bc
	if (!cr6.lt) goto loc_82BDE0BC;
	// rlwinm r11,r30,2,0,29
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
loc_82BDE0A0:
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stwx r26,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, r26.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpw cr6,r30,r9
	cr6.compare<int32_t>(r30.s32, ctx.r9.s32, xer);
	// blt cr6,0x82bde0a0
	if (cr6.lt) goto loc_82BDE0A0;
loc_82BDE0BC:
	// lbz r11,72(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// rotlwi r9,r11,2
	ctx.r9.u64 = rotl32(r11.u32, 2);
	// stwx r25,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r25.u32);
	// lbz r8,5(r25)
	ctx.r8.u64 = PPC_LOAD_U8(r25.u32 + 5);
	// clrlwi r7,r8,30
	ctx.r7.u64 = ctx.r8.u32 & 0x3;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82bde120
	if (cr6.eq) goto loc_82BDE120;
	// lbz r11,5(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82bde120
	if (cr6.eq) goto loc_82BDE120;
	// lwz r10,16(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// lwz r3,16(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// lbz r9,21(r3)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r3.u32 + 21);
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// bne cr6,0x82bde10c
	if (!cr6.eq) goto loc_82BDE10C;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// bl 0x82bca7d8
	sub_82BCA7D8(ctx, base);
	// b 0x82bde120
	goto loc_82BDE120;
loc_82BDE10C:
	// lbz r10,20(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 20);
	// rlwimi r10,r11,0,24,28
	ctx.r10.u64 = (rotl32(r11.u32, 0) & 0xF8) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFF07);
	// clrlwi r9,r10,24
	ctx.r9.u64 = ctx.r10.u32 & 0xFF;
	// rlwinm r9,r9,0,30,28
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// stb r9,5(r31)
	PPC_STORE_U8(r31.u32 + 5, ctx.r9.u8);
loc_82BDE120:
	// lbz r11,72(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// rotlwi r11,r11,1
	r11.u64 = rotl32(r11.u32, 1);
	// add r8,r11,r28
	ctx.r8.u64 = r11.u64 + r28.u64;
	// stb r10,51(r8)
	PPC_STORE_U8(ctx.r8.u32 + 51, ctx.r10.u8);
	// lwz r7,4(r27)
	ctx.r7.u64 = PPC_LOAD_U32(r27.u32 + int32_t(4) );
	// lbz r11,72(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// addi r6,r11,26
	ctx.r6.s64 = r11.s64 + 26;
	// rlwinm r5,r6,1,0,30
	ctx.r5.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// stbx r7,r5,r28
	PPC_STORE_U8(ctx.r5.u32 + r28.u32, ctx.r7.u8);
	// lbz r3,72(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 72);
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// stb r11,72(r31)
	PPC_STORE_U8(r31.u32 + 72, r11.u8);
loc_82BDE154:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c2c
	return;
}

PPC_WEAK_FUNC(sub_82BDDFD0) {
	__imp__sub_82BDDFD0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDE160) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82bde1a8
	if (!cr6.eq) goto loc_82BDE1A8;
	// li r11,-1
	r11.s64 = -1;
	// li r10,8
	ctx.r10.s64 = 8;
	// li r9,255
	ctx.r9.s64 = 255;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
	// li r3,8
	ctx.r3.s64 = 8;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BDE1A8:
	// lbz r11,50(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// addic. r8,r11,-1
	xer.ca = r11.u32 > 0;
	ctx.r8.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt 0x82bde1f0
	if (cr0.lt) goto loc_82BDE1F0;
	// lwz r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// addi r7,r8,86
	ctx.r7.s64 = ctx.r8.s64 + 86;
	// rlwinm r11,r7,1,0,30
	r11.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r11,r30
	ctx.r10.u64 = r11.u64 + r30.u64;
	// lwz r7,24(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(24) );
loc_82BDE1C8:
	// lhz r11,0(r10)
	r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + 0);
	// rotlwi r9,r11,1
	ctx.r9.u64 = rotl32(r11.u32, 1);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r5,r9,r7
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	// cmplw cr6,r29,r5
	cr6.compare<uint32_t>(r29.u32, ctx.r5.u32, xer);
	// beq cr6,0x82bde214
	if (cr6.eq) goto loc_82BDE214;
	// addic. r8,r8,-1
	xer.ca = ctx.r8.u32 > 0;
	ctx.r8.s64 = ctx.r8.s64 + -1;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// addi r10,r10,-2
	ctx.r10.s64 = ctx.r10.s64 + -2;
	// bge 0x82bde1c8
	if (!cr0.lt) goto loc_82BDE1C8;
loc_82BDE1F0:
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r3,8(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82bde160
	sub_82BDE160(ctx, base);
	// cmpwi cr6,r3,8
	cr6.compare<int32_t>(ctx.r3.s32, 8, xer);
	// bne cr6,0x82bde280
	if (!cr6.eq) goto loc_82BDE280;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BDE214:
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// blt cr6,0x82bde1f0
	if (cr6.lt) goto loc_82BDE1F0;
	// li r11,-1
	r11.s64 = -1;
	// stw r8,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r8.u32);
	// li r10,6
	ctx.r10.s64 = 6;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// cmpwi cr6,r6,0
	cr6.compare<int32_t>(ctx.r6.s32, 0, xer);
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// bne cr6,0x82bde274
	if (!cr6.eq) goto loc_82BDE274;
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82bde274
	if (cr6.eq) goto loc_82BDE274;
loc_82BDE248:
	// lbz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 8);
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// ble cr6,0x82bde26c
	if (!cr6.gt) goto loc_82BDE26C;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82bde248
	if (!cr6.eq) goto loc_82BDE248;
	// li r3,6
	ctx.r3.s64 = 6;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BDE26C:
	// li r10,1
	ctx.r10.s64 = 1;
	// stb r10,9(r11)
	PPC_STORE_U8(r11.u32 + 9, ctx.r10.u8);
loc_82BDE274:
	// li r3,6
	ctx.r3.s64 = 6;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BDE280:
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddfd0
	sub_82BDDFD0(ctx, base);
	// li r11,7
	r11.s64 = 7;
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// li r3,7
	ctx.r3.s64 = 7;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDE160) {
	__imp__sub_82BDE160(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDE2A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// li r4,285
	ctx.r4.s64 = 285;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r30,16(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r31
	ctx.r5.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r29,28(r29)
	r29.u64 = PPC_LOAD_U32(r29.u32 + int32_t(28) );
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bde160
	sub_82BDE160(ctx, base);
	// cmpwi cr6,r3,8
	cr6.compare<int32_t>(ctx.r3.s32, 8, xer);
	// bne cr6,0x82bde310
	if (!cr6.eq) goto loc_82BDE310;
	// li r11,4
	r11.s64 = 4;
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r30.u32);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be1c40
	sub_82BE1C40(ctx, base);
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
loc_82BDE310:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDE2A8) {
	__imp__sub_82BDE2A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDE318) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,0(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(0) );
	// subf r30,r5,r4
	r30.s64 = ctx.r4.s64 - ctx.r5.s64;
	// lwz r31,28(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(28) );
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// beq cr6,0x82bde3b8
	if (cr6.eq) goto loc_82BDE3B8;
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// beq cr6,0x82bde3b8
	if (cr6.eq) goto loc_82BDE3B8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bde35c
	if (cr6.eq) goto loc_82BDE35C;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
loc_82BDE35C:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// ble cr6,0x82bde424
	if (!cr6.gt) goto loc_82BDE424;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r4,36(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// add r11,r4,r30
	r11.u64 = ctx.r4.u64 + r30.u64;
	// lbz r9,75(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82bde39c
	if (!cr6.gt) goto loc_82BDE39C;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82bde398
	if (cr6.lt) goto loc_82BDE398;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDE398:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BDE39C:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// bl 0x82be17b0
	sub_82BE17B0(ctx, base);
	// b 0x82bde424
	goto loc_82BDE424;
loc_82BDE3B8:
	// addic. r30,r30,1
	xer.ca = r30.u32 > 4294967294;
	r30.s64 = r30.s64 + 1;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// bge 0x82bde3c4
	if (!cr0.lt) goto loc_82BDE3C4;
	// li r30,0
	r30.s64 = 0;
loc_82BDE3C4:
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1dd0
	sub_82BE1DD0(ctx, base);
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// ble cr6,0x82bde424
	if (!cr6.gt) goto loc_82BDE424;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r9,r30,-1
	ctx.r9.s64 = r30.s64 + -1;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lbz r8,75(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r8
	cr6.compare<int32_t>(r11.s32, ctx.r8.s32, xer);
	// ble cr6,0x82bde418
	if (!cr6.gt) goto loc_82BDE418;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82bde414
	if (cr6.lt) goto loc_82BDE414;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDE414:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BDE418:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BDE424:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDE318) {
	__imp__sub_82BDE318(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDE440) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lhz r10,52(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 52);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// sth r10,52(r11)
	PPC_STORE_U16(r11.u32 + 52, ctx.r10.u16);
	// lwz r8,32(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lhz r7,52(r8)
	ctx.r7.u64 = PPC_LOAD_U16(ctx.r8.u32 + 52);
	// cmplwi cr6,r7,200
	cr6.compare<uint32_t>(ctx.r7.u32, 200, xer);
	// ble cr6,0x82bde4b4
	if (!cr6.gt) goto loc_82BDE4B4;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// bl 0x82a2ed70
	sub_82A2ED70(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// addi r7,r11,13596
	ctx.r7.s64 = r11.s64 + 13596;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// addi r4,r10,11748
	ctx.r4.s64 = ctx.r10.s64 + 11748;
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// bl 0x82bccb88
	sub_82BCCB88(ctx, base);
loc_82BDE4B4:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDE440) {
	__imp__sub_82BDE440(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDE4C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,20(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// lwz r11,28(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(28) );
	// lbz r7,8(r30)
	ctx.r7.u64 = PPC_LOAD_U8(r30.u32 + 8);
	// lbz r9,50(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 50);
	// cmpw cr6,r9,r7
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r7.s32, xer);
	// ble cr6,0x82bde54c
	if (!cr6.gt) goto loc_82BDE54C;
loc_82BDE504:
	// lbz r10,50(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 50);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// addi r8,r10,255
	ctx.r8.s64 = ctx.r10.s64 + 255;
	// lwz r6,24(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// clrlwi r10,r8,24
	ctx.r10.u64 = ctx.r8.u32 & 0xFF;
	// stb r10,50(r11)
	PPC_STORE_U8(r11.u32 + 50, ctx.r10.u8);
	// addi r5,r10,86
	ctx.r5.s64 = ctx.r10.s64 + 86;
	// lwz r9,24(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(24) );
	// rlwinm r4,r5,1,0,30
	ctx.r4.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r10,r4,r11
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r4.u32 + r11.u32);
	// rotlwi r8,r10,1
	ctx.r8.u64 = rotl32(ctx.r10.u32, 1);
	// add r3,r10,r8
	ctx.r3.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r6,8(r10)
	PPC_STORE_U32(ctx.r10.u32 + 8, ctx.r6.u32);
	// lbz r9,50(r11)
	ctx.r9.u64 = PPC_LOAD_U8(r11.u32 + 50);
	// cmpw cr6,r9,r7
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r7.s32, xer);
	// bgt cr6,0x82bde504
	if (cr6.gt) goto loc_82BDE504;
loc_82BDE54C:
	// lbz r11,9(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 9);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82bde574
	if (cr6.eq) goto loc_82BDE574;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// li r4,35
	ctx.r4.s64 = 35;
	// lbz r11,8(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 8);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwimi r4,r11,6,0,25
	ctx.r4.u64 = (rotl32(r11.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
loc_82BDE574:
	// lbz r11,50(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// stw r10,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r10.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDE4C8) {
	__imp__sub_82BDE4C8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDE5B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// lwz r31,28(r24)
	r31.u64 = PPC_LOAD_U32(r24.u32 + int32_t(28) );
	// lwz r28,0(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// addi r27,r28,52
	r27.s64 = r28.s64 + 52;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r30,52(r28)
	r30.u64 = PPC_LOAD_U32(r28.u32 + int32_t(52) );
	// cmpw cr6,r11,r30
	cr6.compare<int32_t>(r11.s32, r30.s32, xer);
	// ble cr6,0x82bde610
	if (!cr6.gt) goto loc_82BDE610;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r3,32(r24)
	ctx.r3.u64 = PPC_LOAD_U32(r24.u32 + int32_t(32) );
	// lis r7,3
	ctx.r7.s64 = 196608;
	// lwz r4,16(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// addi r8,r11,13632
	ctx.r8.s64 = r11.s64 + 13632;
	// ori r7,r7,65535
	ctx.r7.u64 = ctx.r7.u64 | 65535;
	// li r6,4
	ctx.r6.s64 = 4;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// bl 0x82bcf850
	sub_82BCF850(ctx, base);
	// stw r3,16(r28)
	PPC_STORE_U32(r28.u32 + 16, ctx.r3.u32);
loc_82BDE610:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// li r29,0
	r29.s64 = 0;
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// bge cr6,0x82bde640
	if (!cr6.lt) goto loc_82BDE640;
	// rlwinm r11,r30,2,0,29
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
loc_82BDE624:
	// lwz r10,16(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// stwx r29,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, r29.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// cmpw cr6,r30,r9
	cr6.compare<int32_t>(r30.s32, ctx.r9.s32, xer);
	// blt cr6,0x82bde624
	if (cr6.lt) goto loc_82BDE624;
loc_82BDE640:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// lwz r10,16(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// lwz r9,0(r26)
	ctx.r9.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r9,r10,r8
	PPC_STORE_U32(ctx.r10.u32 + ctx.r8.u32, ctx.r9.u32);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// addi r7,r11,1
	ctx.r7.s64 = r11.s64 + 1;
	// stw r7,44(r31)
	PPC_STORE_U32(r31.u32 + 44, ctx.r7.u32);
	// lwz r4,0(r26)
	ctx.r4.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// lbz r6,5(r4)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r4.u32 + 5);
	// clrlwi r5,r6,30
	ctx.r5.u64 = ctx.r6.u32 & 0x3;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82bde6b4
	if (cr6.eq) goto loc_82BDE6B4;
	// lbz r11,5(r28)
	r11.u64 = PPC_LOAD_U8(r28.u32 + 5);
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82bde6b4
	if (cr6.eq) goto loc_82BDE6B4;
	// lwz r10,32(r24)
	ctx.r10.u64 = PPC_LOAD_U32(r24.u32 + int32_t(32) );
	// lwz r3,16(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// lbz r9,21(r3)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r3.u32 + 21);
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// bne cr6,0x82bde6a0
	if (!cr6.eq) goto loc_82BDE6A0;
	// bl 0x82bca7d8
	sub_82BCA7D8(ctx, base);
	// b 0x82bde6b4
	goto loc_82BDE6B4;
loc_82BDE6A0:
	// lbz r10,20(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 20);
	// rlwimi r10,r11,0,24,28
	ctx.r10.u64 = (rotl32(r11.u32, 0) & 0xF8) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFF07);
	// clrlwi r9,r10,24
	ctx.r9.u64 = ctx.r10.u32 & 0xFF;
	// rlwinm r9,r9,0,30,28
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// stb r9,5(r28)
	PPC_STORE_U8(r28.u32 + 5, ctx.r9.u8);
loc_82BDE6B4:
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// li r4,36
	ctx.r4.s64 = 36;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// rlwimi r4,r11,14,0,17
	ctx.r4.u64 = (rotl32(r11.u32, 14) & 0xFFFFC000) | (ctx.r4.u64 & 0xFFFFFFFF00003FFF);
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// stw r3,4(r25)
	PPC_STORE_U32(r25.u32 + 4, ctx.r3.u32);
	// li r9,11
	ctx.r9.s64 = 11;
	// stw r11,12(r25)
	PPC_STORE_U32(r25.u32 + 12, r11.u32);
	// stw r11,16(r25)
	PPC_STORE_U32(r25.u32 + 16, r11.u32);
	// stw r9,0(r25)
	PPC_STORE_U32(r25.u32 + 0, ctx.r9.u32);
	// lwz r8,0(r26)
	ctx.r8.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// lbz r7,72(r8)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r8.u32 + 72);
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82bde748
	if (cr6.eq) goto loc_82BDE748;
	// addi r30,r26,52
	r30.s64 = r26.s64 + 52;
loc_82BDE700:
	// lbz r11,-1(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + -1);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U8(r30.u32 + 0);
	// addi r9,r11,-6
	ctx.r9.s64 = r11.s64 + -6;
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// rotlwi r7,r10,23
	ctx.r7.u64 = rotl32(ctx.r10.u32, 23);
	// cntlzw r6,r9
	ctx.r6.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// rlwinm r4,r6,29,29,29
	ctx.r4.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 29) & 0x4;
	// lwz r5,8(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(8) );
	// xori r11,r4,4
	r11.u64 = ctx.r4.u64 ^ 4;
	// or r4,r11,r7
	ctx.r4.u64 = r11.u64 | ctx.r7.u64;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lwz r10,0(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + int32_t(0) );
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r30,r30,2
	r30.s64 = r30.s64 + 2;
	// lbz r9,72(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 72);
	// cmpw cr6,r29,r9
	cr6.compare<int32_t>(r29.s32, ctx.r9.s32, xer);
	// blt cr6,0x82bde700
	if (cr6.lt) goto loc_82BDE700;
loc_82BDE748:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c28
	return;
}

PPC_WEAK_FUNC(sub_82BDE5B0) {
	__imp__sub_82BDE5B0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDE750) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lwz r31,32(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + int32_t(32) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcc888
	sub_82BCC888(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r11,0
	r11.s64 = 0;
	// stw r30,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r30.u32);
	// li r10,-1
	ctx.r10.s64 = -1;
	// lwz r9,28(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + int32_t(28) );
	// li r8,2
	ctx.r8.s64 = 2;
	// stw r9,8(r28)
	PPC_STORE_U32(r28.u32 + 8, ctx.r9.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r29,12(r28)
	PPC_STORE_U32(r28.u32 + 12, r29.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r31,16(r28)
	PPC_STORE_U32(r28.u32 + 16, r31.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r28,28(r29)
	PPC_STORE_U32(r29.u32 + 28, r28.u32);
	// stw r11,24(r28)
	PPC_STORE_U32(r28.u32 + 24, r11.u32);
	// stw r10,28(r28)
	PPC_STORE_U32(r28.u32 + 28, ctx.r10.u32);
	// stw r10,32(r28)
	PPC_STORE_U32(r28.u32 + 32, ctx.r10.u32);
	// stw r11,36(r28)
	PPC_STORE_U32(r28.u32 + 36, r11.u32);
	// stw r11,40(r28)
	PPC_STORE_U32(r28.u32 + 40, r11.u32);
	// stw r11,44(r28)
	PPC_STORE_U32(r28.u32 + 44, r11.u32);
	// sth r11,48(r28)
	PPC_STORE_U16(r28.u32 + 48, r11.u16);
	// stb r11,50(r28)
	PPC_STORE_U8(r28.u32 + 50, r11.u8);
	// stw r11,20(r28)
	PPC_STORE_U32(r28.u32 + 20, r11.u32);
	// lwz r7,44(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + int32_t(44) );
	// stw r7,32(r30)
	PPC_STORE_U32(r30.u32 + 32, ctx.r7.u32);
	// stb r8,75(r30)
	PPC_STORE_U8(r30.u32 + 75, ctx.r8.u8);
	// bl 0x82bca340
	sub_82BCA340(ctx, base);
	// stw r3,4(r28)
	PPC_STORE_U32(r28.u32 + 4, ctx.r3.u32);
	// lwz r5,8(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r6,5
	ctx.r6.s64 = 5;
	// stw r3,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r3.u32);
	// stw r6,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, ctx.r6.u32);
	// lwz r4,28(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// subf r11,r3,r4
	r11.s64 = ctx.r4.s64 - ctx.r3.s64;
	// cmpwi cr6,r11,8
	cr6.compare<int32_t>(r11.s32, 8, xer);
	// bgt cr6,0x82bde81c
	if (cr6.gt) goto loc_82BDE81C;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// rlwinm r4,r11,1,0,30
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// bge cr6,0x82bde818
	if (!cr6.lt) goto loc_82BDE818;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
loc_82BDE818:
	// bl 0x82bccd58
	sub_82BCCD58(ctx, base);
loc_82BDE81C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r10,9
	ctx.r10.s64 = 9;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r8,28(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// cmpwi cr6,r7,8
	cr6.compare<int32_t>(ctx.r7.s32, 8, xer);
	// bgt cr6,0x82bde864
	if (cr6.gt) goto loc_82BDE864;
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// rlwinm r4,r11,1,0,30
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// bge cr6,0x82bde860
	if (!cr6.lt) goto loc_82BDE860;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
loc_82BDE860:
	// bl 0x82bccd58
	sub_82BCCD58(ctx, base);
loc_82BDE864:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BDE750) {
	__imp__sub_82BDE750(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDE878) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// lwz r31,28(r26)
	r31.u64 = PPC_LOAD_U32(r26.u32 + int32_t(28) );
	// lwz r29,32(r26)
	r29.u64 = PPC_LOAD_U32(r26.u32 + int32_t(32) );
	// lbz r11,50(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82bde8e8
	if (cr6.eq) goto loc_82BDE8E8;
loc_82BDE8A0:
	// lbz r11,50(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r9,r11,255
	ctx.r9.s64 = r11.s64 + 255;
	// lwz r8,24(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// clrlwi r11,r9,24
	r11.u64 = ctx.r9.u32 & 0xFF;
	// stb r11,50(r31)
	PPC_STORE_U8(r31.u32 + 50, r11.u8);
	// addi r7,r11,86
	ctx.r7.s64 = r11.s64 + 86;
	// lwz r10,24(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// rlwinm r6,r7,1,0,30
	ctx.r6.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r6,r31
	r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + r31.u32);
	// rotlwi r9,r11,1
	ctx.r9.u64 = rotl32(r11.u32, 1);
	// add r5,r11,r9
	ctx.r5.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r5,2,0,29
	r11.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// stw r8,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r8.u32);
	// lbz r3,50(r31)
	ctx.r3.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82bde8a0
	if (!cr6.eq) goto loc_82BDE8A0;
loc_82BDE8E8:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r4,128
	ctx.r4.s64 = 8388608;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// ori r4,r4,30
	ctx.r4.u64 = ctx.r4.u64 | 30;
	// lwz r5,8(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lis r10,16383
	ctx.r10.s64 = 1073676288;
	// addi r27,r11,11760
	r27.s64 = r11.s64 + 11760;
	// ori r28,r10,65535
	r28.u64 = ctx.r10.u64 | 65535;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// cmplw cr6,r9,r28
	cr6.compare<uint32_t>(ctx.r9.u32, r28.u32, xer);
	// bgt cr6,0x82bde93c
	if (cr6.gt) goto loc_82BDE93C;
	// lwz r10,44(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(44) );
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r4,12(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// rlwinm r5,r10,2,0,29
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// b 0x82bde948
	goto loc_82BDE948;
loc_82BDE93C:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BDE948:
	// stw r3,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r3.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// stw r11,44(r30)
	PPC_STORE_U32(r30.u32 + 44, r11.u32);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// cmplw cr6,r10,r28
	cr6.compare<uint32_t>(ctx.r10.u32, r28.u32, xer);
	// bgt cr6,0x82bde984
	if (cr6.gt) goto loc_82BDE984;
	// lwz r10,48(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(48) );
	// rotlwi r11,r11,0
	r11.u64 = rotl32(r11.u32, 0);
	// lwz r4,20(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r10,2,0,29
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// b 0x82bde990
	goto loc_82BDE990;
loc_82BDE984:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BDE990:
	// stw r3,20(r30)
	PPC_STORE_U32(r30.u32 + 20, ctx.r3.u32);
	// lis r11,8191
	r11.s64 = 536805376;
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r10,48(r30)
	PPC_STORE_U32(r30.u32 + 48, ctx.r10.u32);
	// ori r9,r11,65535
	ctx.r9.u64 = r11.u64 | 65535;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// cmplw cr6,r8,r9
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r9.u32, xer);
	// bgt cr6,0x82bde9d0
	if (cr6.gt) goto loc_82BDE9D0;
	// lwz r10,40(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(40) );
	// rlwinm r6,r11,3,0,28
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r4,8(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// rlwinm r5,r10,3,0,28
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// b 0x82bde9dc
	goto loc_82BDE9DC;
loc_82BDE9D0:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BDE9DC:
	// stw r3,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r3.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// stw r11,40(r30)
	PPC_STORE_U32(r30.u32 + 40, r11.u32);
	// lwz r11,44(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// cmplw cr6,r10,r28
	cr6.compare<uint32_t>(ctx.r10.u32, r28.u32, xer);
	// bgt cr6,0x82bdea14
	if (cr6.gt) goto loc_82BDEA14;
	// lwz r10,52(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(52) );
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// rlwinm r5,r10,2,0,29
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// b 0x82bdea20
	goto loc_82BDEA20;
loc_82BDEA14:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BDEA20:
	// stw r3,16(r30)
	PPC_STORE_U32(r30.u32 + 16, ctx.r3.u32);
	// lis r11,5461
	r11.s64 = 357892096;
	// lwz r9,44(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(44) );
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// stw r9,52(r30)
	PPC_STORE_U32(r30.u32 + 52, ctx.r9.u32);
	// ori r10,r11,21845
	ctx.r10.u64 = r11.u64 | 21845;
	// lhz r8,48(r31)
	ctx.r8.u64 = PPC_LOAD_U16(r31.u32 + 48);
	// extsh r11,r8
	r11.s64 = ctx.r8.s16;
	// addi r7,r11,1
	ctx.r7.s64 = r11.s64 + 1;
	// cmplw cr6,r7,r10
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r10.u32, xer);
	// bgt cr6,0x82bdea74
	if (cr6.gt) goto loc_82BDEA74;
	// lwz r10,56(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(56) );
	// rlwinm r8,r11,1,0,30
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r4,24(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(24) );
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r11,r8
	r11.u64 = r11.u64 + ctx.r8.u64;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r5,r10,2,0,29
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// b 0x82bdea80
	goto loc_82BDEA80;
loc_82BDEA74:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BDEA80:
	// stw r3,24(r30)
	PPC_STORE_U32(r30.u32 + 24, ctx.r3.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lbz r11,72(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 72);
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// cmplw cr6,r10,r28
	cr6.compare<uint32_t>(ctx.r10.u32, r28.u32, xer);
	// lhz r9,48(r31)
	ctx.r9.u64 = PPC_LOAD_U16(r31.u32 + 48);
	// extsh r8,r9
	ctx.r8.s64 = ctx.r9.s16;
	// stw r8,56(r30)
	PPC_STORE_U32(r30.u32 + 56, ctx.r8.u32);
	// bgt cr6,0x82bdeabc
	if (cr6.gt) goto loc_82BDEABC;
	// lwz r10,36(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// rlwinm r6,r11,2,0,29
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r4,28(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// rlwinm r5,r10,2,0,29
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x8227bb58
	sub_8227BB58(ctx, base);
	// b 0x82bdeac8
	goto loc_82BDEAC8;
loc_82BDEABC:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// bl 0x82bc9860
	sub_82BC9860(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BDEAC8:
	// lbz r11,72(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 72);
	// stw r3,28(r30)
	PPC_STORE_U32(r30.u32 + 28, ctx.r3.u32);
	// stw r11,36(r30)
	PPC_STORE_U32(r30.u32 + 36, r11.u32);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// stw r10,28(r26)
	PPC_STORE_U32(r26.u32 + 28, ctx.r10.u32);
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// addi r9,r11,-16
	ctx.r9.s64 = r11.s64 + -16;
	// stw r9,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r9.u32);
	// lwz r11,12(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(12) );
	// cmpwi cr6,r11,285
	cr6.compare<int32_t>(r11.s32, 285, xer);
	// beq cr6,0x82bdeafc
	if (cr6.eq) goto loc_82BDEAFC;
	// cmpwi cr6,r11,286
	cr6.compare<int32_t>(r11.s32, 286, xer);
	// bne cr6,0x82bdeb10
	if (!cr6.eq) goto loc_82BDEB10;
loc_82BDEAFC:
	// lwz r11,16(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(16) );
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// lwz r5,12(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
loc_82BDEB10:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BDE878) {
	__imp__sub_82BDE878(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDEB18) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-752(r1)
	ea = -752 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r5,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r5.u32);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
loc_82BDEB3C:
	// lbz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 0);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bdeb3c
	if (!cr6.eq) goto loc_82BDEB3C;
	// subf r11,r6,r11
	r11.s64 = r11.s64 - ctx.r6.s64;
	// mr r4,r6
	ctx.r4.u64 = ctx.r6.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rotlwi r5,r11,0
	ctx.r5.u64 = rotl32(r11.u32, 0);
	// bl 0x8227ba30
	sub_8227BA30(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdd18
	sub_82BCDD18(ctx, base);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82bde750
	sub_82BDE750(ctx, base);
	// lwz r9,144(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(144) );
	// li r10,2
	ctx.r10.s64 = 2;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// stb r10,74(r9)
	PPC_STORE_U8(ctx.r9.u32 + 74, ctx.r10.u8);
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82be1720
	sub_82BE1720(ctx, base);
	// li r4,287
	ctx.r4.s64 = 287;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82bde878
	sub_82BDE878(ctx, base);
	// lwz r3,144(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(144) );
	// addi r1,r1,752
	ctx.r1.s64 = ctx.r1.s64 + 752;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDEB18) {
	__imp__sub_82BDEB18(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDEBD0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r29,28(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r4,285
	ctx.r4.s64 = 285;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r28,16(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdddd8
	sub_82BDDDD8(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// li r11,9
	r11.s64 = 9;
	// stw r3,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r3.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BDEBD0) {
	__imp__sub_82BDEBD0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDEC40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x82bdec90
	if (cr6.eq) goto loc_82BDEC90;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// b 0x82bdec94
	goto loc_82BDEC94;
loc_82BDEC90:
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
loc_82BDEC94:
	// li r4,93
	ctx.r4.s64 = 93;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDEC40) {
	__imp__sub_82BDEC40(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDECC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// cmpwi cr6,r11,285
	cr6.compare<int32_t>(r11.s32, 285, xer);
	// lwz r28,36(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// bne cr6,0x82bded38
	if (!cr6.eq) goto loc_82BDED38;
	// lis r11,32767
	r11.s64 = 2147418112;
	// lwz r10,24(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(24) );
	// ori r4,r11,65533
	ctx.r4.u64 = r11.u64 | 65533;
	// cmpw cr6,r10,r4
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r4.s32, xer);
	// ble cr6,0x82bded0c
	if (!cr6.gt) goto loc_82BDED0C;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r11,13656
	ctx.r5.s64 = r11.s64 + 13656;
	// bl 0x82bddc28
	sub_82BDDC28(ctx, base);
loc_82BDED0C:
	// li r4,285
	ctx.r4.s64 = 285;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r27,16(r30)
	r27.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdddd8
	sub_82BDDDD8(ctx, base);
	// b 0x82bded44
	goto loc_82BDED44;
loc_82BDED38:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdec40
	sub_82BDEC40(ctx, base);
loc_82BDED44:
	// lwz r11,24(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(24) );
	// li r4,61
	ctx.r4.s64 = 61;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,24(r29)
	PPC_STORE_U32(r29.u32 + 24, r11.u32);
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// lwz r10,20(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(20) );
	// rlwinm r9,r27,9,0,22
	ctx.r9.u64 = rotl64(r27.u32 | (r27.u64 << 32), 9) & 0xFFFFFE00;
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// li r4,9
	ctx.r4.s64 = 9;
	// or r7,r9,r3
	ctx.r7.u64 = ctx.r9.u64 | ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r6,4(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// rlwinm r11,r7,8,0,23
	r11.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 8) & 0xFFFFFF00;
	// lwz r5,8(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(8) );
	// or r10,r11,r6
	ctx.r10.u64 = r11.u64 | ctx.r6.u64;
	// rlwimi r4,r10,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r10.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// stw r28,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r28.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BDECC0) {
	__imp__sub_82BDECC0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDEDD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// lis r10,32767
	ctx.r10.s64 = 2147418112;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// ori r4,r10,65533
	ctx.r4.u64 = ctx.r10.u64 | 65533;
	// cmpw cr6,r11,r4
	cr6.compare<int32_t>(r11.s32, ctx.r4.s32, xer);
	// ble cr6,0x82bdee18
	if (!cr6.gt) goto loc_82BDEE18;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// addi r5,r11,13656
	ctx.r5.s64 = r11.s64 + 13656;
	// bl 0x82bddc28
	sub_82BDDC28(ctx, base);
loc_82BDEE18:
	// lwz r10,32(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// stw r10,32(r31)
	PPC_STORE_U32(r31.u32 + 32, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDEDD0) {
	__imp__sub_82BDEDD0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDEE48) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// li r4,10
	ctx.r4.s64 = 10;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lwz r28,4(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// lwz r5,8(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r29,0
	r29.s64 = 0;
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, r26.u32);
	// li r11,-1
	r11.s64 = -1;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r29.u32);
	// li r10,11
	ctx.r10.s64 = 11;
	// stw r11,12(r26)
	PPC_STORE_U32(r26.u32 + 12, r11.u32);
	// stw r27,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r27.u32);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// stw r11,16(r26)
	PPC_STORE_U32(r26.u32 + 16, r11.u32);
	// stw r10,0(r26)
	PPC_STORE_U32(r26.u32 + 0, ctx.r10.u32);
	// stw r29,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, r29.u32);
	// stw r29,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, r29.u32);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r29.u32);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r29.u32);
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r4,123
	ctx.r4.s64 = 123;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
loc_82BDEED0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,125
	cr6.compare<int32_t>(r11.s32, 125, xer);
	// beq cr6,0x82bdef8c
	if (cr6.eq) goto loc_82BDEF8C;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bdef28
	if (cr6.eq) goto loc_82BDEF28;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(112) );
	// stw r29,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r29.u32);
	// cmpwi cr6,r11,50
	cr6.compare<int32_t>(r11.s32, 50, xer);
	// bne cr6,0x82bdef28
	if (!cr6.eq) goto loc_82BDEF28;
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(100) );
	// li r6,50
	ctx.r6.s64 = 50;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r5,108(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(108) );
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// bl 0x82be34f8
	sub_82BE34F8(ctx, base);
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r29.u32);
loc_82BDEF28:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,91
	cr6.compare<int32_t>(r11.s32, 91, xer);
	// beq cr6,0x82bdef70
	if (cr6.eq) goto loc_82BDEF70;
	// cmpwi cr6,r11,285
	cr6.compare<int32_t>(r11.s32, 285, xer);
	// beq cr6,0x82bdef4c
	if (cr6.eq) goto loc_82BDEF4C;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x82bdedd0
	sub_82BDEDD0(ctx, base);
	// b 0x82bdef78
	goto loc_82BDEF78;
loc_82BDEF4C:
	// addi r4,r31,24
	ctx.r4.s64 = r31.s64 + 24;
	// bl 0x82bcee60
	sub_82BCEE60(ctx, base);
	// stw r3,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r3.u32);
	// cmpwi cr6,r3,61
	cr6.compare<int32_t>(ctx.r3.s32, 61, xer);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82bdef74
	if (cr6.eq) goto loc_82BDEF74;
	// bl 0x82bdedd0
	sub_82BDEDD0(ctx, base);
	// b 0x82bdef78
	goto loc_82BDEF78;
loc_82BDEF70:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
loc_82BDEF74:
	// bl 0x82bdecc0
	sub_82BDECC0(ctx, base);
loc_82BDEF78:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,44
	cr6.compare<int32_t>(r11.s32, 44, xer);
	// beq cr6,0x82bdeed0
	if (cr6.eq) goto loc_82BDEED0;
	// cmpwi cr6,r11,59
	cr6.compare<int32_t>(r11.s32, 59, xer);
	// beq cr6,0x82bdeed0
	if (cr6.eq) goto loc_82BDEED0;
loc_82BDEF8C:
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// li r5,123
	ctx.r5.s64 = 123;
	// li r4,125
	ctx.r4.s64 = 125;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
	// lwz r11,112(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(112) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bdf024
	if (cr6.eq) goto loc_82BDF024;
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// beq cr6,0x82bdeff0
	if (cr6.eq) goto loc_82BDEFF0;
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// beq cr6,0x82bdeff0
	if (cr6.eq) goto loc_82BDEFF0;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bdefd4
	if (cr6.eq) goto loc_82BDEFD4;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
loc_82BDEFD4:
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(100) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r6,112(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(112) );
	// lwz r5,108(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(108) );
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// bl 0x82be34f8
	sub_82BE34F8(ctx, base);
	// b 0x82bdf024
	goto loc_82BDF024;
loc_82BDEFF0:
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be1dd0
	sub_82BE1DD0(ctx, base);
	// lwz r11,100(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(100) );
	// li r6,-1
	ctx.r6.s64 = -1;
	// lwz r5,108(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(108) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// bl 0x82be34f8
	sub_82BE34F8(ctx, base);
	// lwz r10,108(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(108) );
	// addi r9,r10,-1
	ctx.r9.s64 = ctx.r10.s64 + -1;
	// stw r9,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r9.u32);
loc_82BDF024:
	// lwz r11,108(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(108) );
	// mr r10,r29
	ctx.r10.u64 = r29.u64;
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// blt cr6,0x82bdf048
	if (cr6.lt) goto loc_82BDF048;
loc_82BDF034:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// rlwinm r11,r11,31,1,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// bge cr6,0x82bdf034
	if (!cr6.lt) goto loc_82BDF034;
loc_82BDF048:
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bge cr6,0x82bdf058
	if (!cr6.lt) goto loc_82BDF058;
	// mr r8,r11
	ctx.r8.u64 = r11.u64;
	// b 0x82bdf068
	goto loc_82BDF068;
loc_82BDF058:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// addi r9,r11,-8
	ctx.r9.s64 = r11.s64 + -8;
	// rlwinm r8,r10,3,0,28
	ctx.r8.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// or r8,r8,r9
	ctx.r8.u64 = ctx.r8.u64 | ctx.r9.u64;
loc_82BDF068:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// rlwinm r10,r27,2,0,29
	ctx.r10.u64 = rotl64(r27.u32 | (r27.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r9,r29
	ctx.r9.u64 = r29.u64;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// lwzx r7,r11,r10
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// rlwimi r7,r8,23,0,8
	ctx.r7.u64 = (rotl32(ctx.r8.u32, 23) & 0xFF800000) | (ctx.r7.u64 & 0xFFFFFFFF007FFFFF);
	// stwx r7,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r7.u32);
	// lwz r11,104(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(104) );
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// blt cr6,0x82bdf0a4
	if (cr6.lt) goto loc_82BDF0A4;
loc_82BDF090:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// rlwinm r11,r11,31,1,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// cmplwi cr6,r11,16
	cr6.compare<uint32_t>(r11.u32, 16, xer);
	// bge cr6,0x82bdf090
	if (!cr6.lt) goto loc_82BDF090;
loc_82BDF0A4:
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// blt cr6,0x82bdf0bc
	if (cr6.lt) goto loc_82BDF0BC;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r8,r11,-8
	ctx.r8.s64 = r11.s64 + -8;
	// rlwinm r7,r9,3,0,28
	ctx.r7.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// or r11,r7,r8
	r11.u64 = ctx.r7.u64 | ctx.r8.u64;
loc_82BDF0BC:
	// lwz r9,0(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// lwz r9,12(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(12) );
	// lwzx r8,r9,r10
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// rlwimi r8,r11,14,9,17
	ctx.r8.u64 = (rotl32(r11.u32, 14) & 0x7FC000) | (ctx.r8.u64 & 0xFFFFFFFFFF803FFF);
	// stwx r8,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, ctx.r8.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BDEE48) {
	__imp__sub_82BDEE48(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDF0D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lwz r28,28(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lwz r29,0(r28)
	r29.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// stb r30,74(r29)
	PPC_STORE_U8(r29.u32 + 74, r30.u8);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,41
	cr6.compare<int32_t>(r11.s32, 41, xer);
	// beq cr6,0x82bdf1ac
	if (cr6.eq) goto loc_82BDF1AC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r26,7
	r26.s64 = 7;
	// addi r27,r11,-4016
	r27.s64 = r11.s64 + -4016;
loc_82BDF110:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,279
	cr6.compare<int32_t>(r11.s32, 279, xer);
	// beq cr6,0x82bdf144
	if (cr6.eq) goto loc_82BDF144;
	// cmpwi cr6,r11,285
	cr6.compare<int32_t>(r11.s32, 285, xer);
	// bne cr6,0x82bdf198
	if (!cr6.eq) goto loc_82BDF198;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r25,16(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// b 0x82bdf170
	goto loc_82BDF170;
loc_82BDF144:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// stb r26,74(r29)
	PPC_STORE_U8(r29.u32 + 74, r26.u8);
loc_82BDF170:
	// lbz r11,74(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 74);
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82bdf1ac
	if (!cr6.eq) goto loc_82BDF1AC;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,44
	cr6.compare<int32_t>(r11.s32, 44, xer);
	// bne cr6,0x82bdf1ac
	if (!cr6.eq) goto loc_82BDF1AC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// b 0x82bdf110
	goto loc_82BDF110;
loc_82BDF198:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,13680
	ctx.r4.s64 = r11.s64 + 13680;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDF1AC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82a32768
	sub_82A32768(ctx, base);
	// lbz r11,74(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 74);
	// lbz r10,50(r28)
	ctx.r10.u64 = PPC_LOAD_U8(r28.u32 + 50);
	// clrlwi r9,r11,31
	ctx.r9.u64 = r11.u32 & 0x1;
	// subf r8,r9,r10
	ctx.r8.s64 = ctx.r10.s64 - ctx.r9.s64;
	// stb r8,73(r29)
	PPC_STORE_U8(r29.u32 + 73, ctx.r8.u8);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lwz r11,36(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(36) );
	// lbz r9,50(r28)
	ctx.r9.u64 = PPC_LOAD_U8(r28.u32 + 50);
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// lbz r6,75(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r6
	cr6.compare<int32_t>(r11.s32, ctx.r6.s32, xer);
	// ble cr6,0x82bdf208
	if (!cr6.gt) goto loc_82BDF208;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82bdf204
	if (cr6.lt) goto loc_82BDF204;
	// lwz r3,12(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDF204:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BDF208:
	// lwz r11,36(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(36) );
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// stw r11,36(r28)
	PPC_STORE_U32(r28.u32 + 36, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c2c
	return;
}

PPC_WEAK_FUNC(sub_82BDF0D8) {
	__imp__sub_82BDF0D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDF220) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-704(r1)
	ea = -704 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// bl 0x82bde750
	sub_82BDE750(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r4,40
	ctx.r4.s64 = 40;
	// stw r30,60(r11)
	PPC_STORE_U32(r11.u32 + 60, r30.u32);
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82bdf2cc
	if (cr6.eq) goto loc_82BDF2CC;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r4,r11,3488
	ctx.r4.s64 = r11.s64 + 3488;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// lwz r10,28(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lbz r11,50(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 50);
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// lwz r7,24(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// clrlwi r11,r8,24
	r11.u64 = ctx.r8.u32 & 0xFF;
	// stb r11,50(r10)
	PPC_STORE_U8(ctx.r10.u32 + 50, r11.u8);
	// addi r6,r11,85
	ctx.r6.s64 = r11.s64 + 85;
	// rlwinm r5,r6,1,0,30
	ctx.r5.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,24(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(24) );
	// lhzx r11,r5,r10
	r11.u64 = PPC_LOAD_U16(ctx.r5.u32 + ctx.r10.u32);
	// rotlwi r10,r11,1
	ctx.r10.u64 = rotl32(r11.u32, 1);
	// add r4,r11,r10
	ctx.r4.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r4,2,0,29
	r11.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r9
	ctx.r3.u64 = r11.u64 + ctx.r9.u64;
	// stw r7,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r7.u32);
loc_82BDF2CC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdf0d8
	sub_82BDF0D8(ctx, base);
	// li r4,41
	ctx.r4.s64 = 41;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1720
	sub_82BE1720(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r5,265
	ctx.r5.s64 = 265;
	// li r4,262
	ctx.r4.s64 = 262;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,64(r10)
	PPC_STORE_U32(ctx.r10.u32 + 64, r11.u32);
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde878
	sub_82BDE878(ctx, base);
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde5b0
	sub_82BDE5B0(ctx, base);
	// addi r1,r1,704
	ctx.r1.s64 = ctx.r1.s64 + 704;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BDF220) {
	__imp__sub_82BDF220(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDF330) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r29,1
	r29.s64 = 1;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
loc_82BDF350:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,44
	cr6.compare<int32_t>(r11.s32, 44, xer);
	// bne cr6,0x82bdf388
	if (!cr6.eq) goto loc_82BDF388;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// b 0x82bdf350
	goto loc_82BDF350;
loc_82BDF388:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BDF330) {
	__imp__sub_82BDF330(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDF398) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r5,12(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// lwz r27,4(r30)
	r27.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// cmpwi cr6,r5,40
	cr6.compare<int32_t>(ctx.r5.s32, 40, xer);
	// beq cr6,0x82bdf400
	if (cr6.eq) goto loc_82BDF400;
	// cmpwi cr6,r5,123
	cr6.compare<int32_t>(ctx.r5.s32, 123, xer);
	// beq cr6,0x82bdf3f4
	if (cr6.eq) goto loc_82BDF3F4;
	// cmpwi cr6,r5,286
	cr6.compare<int32_t>(ctx.r5.s32, 286, xer);
	// beq cr6,0x82bdf3dc
	if (cr6.eq) goto loc_82BDF3DC;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,13760
	ctx.r4.s64 = r11.s64 + 13760;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDF3DC:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r5,16(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// bl 0x82bdddd8
	sub_82BDDDD8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// b 0x82bdf468
	goto loc_82BDF468;
loc_82BDF3F4:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x82bdee48
	sub_82BDEE48(ctx, base);
	// b 0x82bdf468
	goto loc_82BDF468;
loc_82BDF400:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmpw cr6,r27,r11
	cr6.compare<int32_t>(r27.s32, r11.s32, xer);
	// beq cr6,0x82bdf41c
	if (cr6.eq) goto loc_82BDF41C;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,13708
	ctx.r4.s64 = r11.s64 + 13708;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDF41C:
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// cmpwi cr6,r11,41
	cr6.compare<int32_t>(r11.s32, 41, xer);
	// bne cr6,0x82bdf438
	if (!cr6.eq) goto loc_82BDF438;
	// li r11,0
	r11.s64 = 0;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// b 0x82bdf454
	goto loc_82BDF454;
loc_82BDF438:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdf330
	sub_82BDF330(ctx, base);
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1dd0
	sub_82BE1DD0(ctx, base);
loc_82BDF454:
	// mr r6,r27
	ctx.r6.u64 = r27.u64;
	// li r5,40
	ctx.r5.s64 = 40;
	// li r4,41
	ctx.r4.s64 = 41;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
loc_82BDF468:
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// li r28,-1
	r28.s64 = -1;
	// lwz r30,4(r29)
	r30.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// beq cr6,0x82bdf4a8
	if (cr6.eq) goto loc_82BDF4A8;
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// beq cr6,0x82bdf4a8
	if (cr6.eq) goto loc_82BDF4A8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82bdf498
	if (cr6.eq) goto loc_82BDF498;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
loc_82BDF498:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// b 0x82bdf4ac
	goto loc_82BDF4AC;
loc_82BDF4A8:
	// mr r11,r28
	r11.u64 = r28.u64;
loc_82BDF4AC:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// rlwinm r9,r30,6,0,25
	ctx.r9.u64 = rotl64(r30.u32 | (r30.u64 << 32), 6) & 0xFFFFFFC0;
	// rlwinm r8,r11,23,0,8
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0xFF800000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// or r7,r8,r9
	ctx.r7.u64 = ctx.r8.u64 | ctx.r9.u64;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// ori r4,r7,32796
	ctx.r4.u64 = ctx.r7.u64 | 32796;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r6,13
	ctx.r6.s64 = 13;
	// stw r3,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r3.u32);
	// addi r5,r30,1
	ctx.r5.s64 = r30.s64 + 1;
	// stw r28,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r28.u32);
	// stw r28,16(r29)
	PPC_STORE_U32(r29.u32 + 16, r28.u32);
	// stw r6,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r6.u32);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// rlwinm r10,r3,2,0,29
	ctx.r10.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,20(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(20) );
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// stw r27,-4(r11)
	PPC_STORE_U32(r11.u32 + -4, r27.u32);
	// stw r5,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r5.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BDF398) {
	__imp__sub_82BDF398(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDF510) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r29,28(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// cmpwi cr6,r5,40
	cr6.compare<int32_t>(ctx.r5.s32, 40, xer);
	// beq cr6,0x82bdf554
	if (cr6.eq) goto loc_82BDF554;
	// cmpwi cr6,r5,285
	cr6.compare<int32_t>(ctx.r5.s32, 285, xer);
	// beq cr6,0x82bdf548
	if (cr6.eq) goto loc_82BDF548;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,13788
	ctx.r4.s64 = r11.s64 + 13788;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDF548:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82bde2a8
	sub_82BDE2A8(ctx, base);
	// b 0x82bdf58c
	goto loc_82BDF58C;
loc_82BDF554:
	// lwz r28,4(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// li r5,40
	ctx.r5.s64 = 40;
	// li r4,41
	ctx.r4.s64 = 41;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
loc_82BDF58C:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r11,r11,-40
	r11.s64 = r11.s64 + -40;
	// cmplwi cr6,r11,246
	cr6.compare<uint32_t>(r11.u32, 246, xer);
	// bgt cr6,0x82bdfa60
	if (cr6.gt) goto loc_82BDFA60;
	// li r26,9
	r26.s64 = 9;
	// li r27,4
	r27.s64 = 4;
	// li r28,-1
	r28.s64 = -1;
loc_82BDF5A8:
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,-2624
	r12.s64 = r12.s64 + -2624;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BDFA38;
	case 1:
		goto loc_82BDFA60;
	case 2:
		goto loc_82BDFA60;
	case 3:
		goto loc_82BDFA60;
	case 4:
		goto loc_82BDFA60;
	case 5:
		goto loc_82BDFA60;
	case 6:
		goto loc_82BDF99C;
	case 7:
		goto loc_82BDFA60;
	case 8:
		goto loc_82BDFA60;
	case 9:
		goto loc_82BDFA60;
	case 10:
		goto loc_82BDFA60;
	case 11:
		goto loc_82BDFA60;
	case 12:
		goto loc_82BDFA60;
	case 13:
		goto loc_82BDFA60;
	case 14:
		goto loc_82BDFA60;
	case 15:
		goto loc_82BDFA60;
	case 16:
		goto loc_82BDFA60;
	case 17:
		goto loc_82BDFA60;
	case 18:
		goto loc_82BDF9DC;
	case 19:
		goto loc_82BDFA60;
	case 20:
		goto loc_82BDFA60;
	case 21:
		goto loc_82BDFA60;
	case 22:
		goto loc_82BDFA60;
	case 23:
		goto loc_82BDFA60;
	case 24:
		goto loc_82BDFA60;
	case 25:
		goto loc_82BDFA60;
	case 26:
		goto loc_82BDFA60;
	case 27:
		goto loc_82BDFA60;
	case 28:
		goto loc_82BDFA60;
	case 29:
		goto loc_82BDFA60;
	case 30:
		goto loc_82BDFA60;
	case 31:
		goto loc_82BDFA60;
	case 32:
		goto loc_82BDFA60;
	case 33:
		goto loc_82BDFA60;
	case 34:
		goto loc_82BDFA60;
	case 35:
		goto loc_82BDFA60;
	case 36:
		goto loc_82BDFA60;
	case 37:
		goto loc_82BDFA60;
	case 38:
		goto loc_82BDFA60;
	case 39:
		goto loc_82BDFA60;
	case 40:
		goto loc_82BDFA60;
	case 41:
		goto loc_82BDFA60;
	case 42:
		goto loc_82BDFA60;
	case 43:
		goto loc_82BDFA60;
	case 44:
		goto loc_82BDFA60;
	case 45:
		goto loc_82BDFA60;
	case 46:
		goto loc_82BDFA60;
	case 47:
		goto loc_82BDFA60;
	case 48:
		goto loc_82BDFA60;
	case 49:
		goto loc_82BDFA60;
	case 50:
		goto loc_82BDFA60;
	case 51:
		goto loc_82BDF9AC;
	case 52:
		goto loc_82BDFA60;
	case 53:
		goto loc_82BDFA60;
	case 54:
		goto loc_82BDFA60;
	case 55:
		goto loc_82BDFA60;
	case 56:
		goto loc_82BDFA60;
	case 57:
		goto loc_82BDFA60;
	case 58:
		goto loc_82BDFA60;
	case 59:
		goto loc_82BDFA60;
	case 60:
		goto loc_82BDFA60;
	case 61:
		goto loc_82BDFA60;
	case 62:
		goto loc_82BDFA60;
	case 63:
		goto loc_82BDFA60;
	case 64:
		goto loc_82BDFA60;
	case 65:
		goto loc_82BDFA60;
	case 66:
		goto loc_82BDFA60;
	case 67:
		goto loc_82BDFA60;
	case 68:
		goto loc_82BDFA60;
	case 69:
		goto loc_82BDFA60;
	case 70:
		goto loc_82BDFA60;
	case 71:
		goto loc_82BDFA60;
	case 72:
		goto loc_82BDFA60;
	case 73:
		goto loc_82BDFA60;
	case 74:
		goto loc_82BDFA60;
	case 75:
		goto loc_82BDFA60;
	case 76:
		goto loc_82BDFA60;
	case 77:
		goto loc_82BDFA60;
	case 78:
		goto loc_82BDFA60;
	case 79:
		goto loc_82BDFA60;
	case 80:
		goto loc_82BDFA60;
	case 81:
		goto loc_82BDFA60;
	case 82:
		goto loc_82BDFA60;
	case 83:
		goto loc_82BDFA38;
	case 84:
		goto loc_82BDFA60;
	case 85:
		goto loc_82BDFA60;
	case 86:
		goto loc_82BDFA60;
	case 87:
		goto loc_82BDFA60;
	case 88:
		goto loc_82BDFA60;
	case 89:
		goto loc_82BDFA60;
	case 90:
		goto loc_82BDFA60;
	case 91:
		goto loc_82BDFA60;
	case 92:
		goto loc_82BDFA60;
	case 93:
		goto loc_82BDFA60;
	case 94:
		goto loc_82BDFA60;
	case 95:
		goto loc_82BDFA60;
	case 96:
		goto loc_82BDFA60;
	case 97:
		goto loc_82BDFA60;
	case 98:
		goto loc_82BDFA60;
	case 99:
		goto loc_82BDFA60;
	case 100:
		goto loc_82BDFA60;
	case 101:
		goto loc_82BDFA60;
	case 102:
		goto loc_82BDFA60;
	case 103:
		goto loc_82BDFA60;
	case 104:
		goto loc_82BDFA60;
	case 105:
		goto loc_82BDFA60;
	case 106:
		goto loc_82BDFA60;
	case 107:
		goto loc_82BDFA60;
	case 108:
		goto loc_82BDFA60;
	case 109:
		goto loc_82BDFA60;
	case 110:
		goto loc_82BDFA60;
	case 111:
		goto loc_82BDFA60;
	case 112:
		goto loc_82BDFA60;
	case 113:
		goto loc_82BDFA60;
	case 114:
		goto loc_82BDFA60;
	case 115:
		goto loc_82BDFA60;
	case 116:
		goto loc_82BDFA60;
	case 117:
		goto loc_82BDFA60;
	case 118:
		goto loc_82BDFA60;
	case 119:
		goto loc_82BDFA60;
	case 120:
		goto loc_82BDFA60;
	case 121:
		goto loc_82BDFA60;
	case 122:
		goto loc_82BDFA60;
	case 123:
		goto loc_82BDFA60;
	case 124:
		goto loc_82BDFA60;
	case 125:
		goto loc_82BDFA60;
	case 126:
		goto loc_82BDFA60;
	case 127:
		goto loc_82BDFA60;
	case 128:
		goto loc_82BDFA60;
	case 129:
		goto loc_82BDFA60;
	case 130:
		goto loc_82BDFA60;
	case 131:
		goto loc_82BDFA60;
	case 132:
		goto loc_82BDFA60;
	case 133:
		goto loc_82BDFA60;
	case 134:
		goto loc_82BDFA60;
	case 135:
		goto loc_82BDFA60;
	case 136:
		goto loc_82BDFA60;
	case 137:
		goto loc_82BDFA60;
	case 138:
		goto loc_82BDFA60;
	case 139:
		goto loc_82BDFA60;
	case 140:
		goto loc_82BDFA60;
	case 141:
		goto loc_82BDFA60;
	case 142:
		goto loc_82BDFA60;
	case 143:
		goto loc_82BDFA60;
	case 144:
		goto loc_82BDFA60;
	case 145:
		goto loc_82BDFA60;
	case 146:
		goto loc_82BDFA60;
	case 147:
		goto loc_82BDFA60;
	case 148:
		goto loc_82BDFA60;
	case 149:
		goto loc_82BDFA60;
	case 150:
		goto loc_82BDFA60;
	case 151:
		goto loc_82BDFA60;
	case 152:
		goto loc_82BDFA60;
	case 153:
		goto loc_82BDFA60;
	case 154:
		goto loc_82BDFA60;
	case 155:
		goto loc_82BDFA60;
	case 156:
		goto loc_82BDFA60;
	case 157:
		goto loc_82BDFA60;
	case 158:
		goto loc_82BDFA60;
	case 159:
		goto loc_82BDFA60;
	case 160:
		goto loc_82BDFA60;
	case 161:
		goto loc_82BDFA60;
	case 162:
		goto loc_82BDFA60;
	case 163:
		goto loc_82BDFA60;
	case 164:
		goto loc_82BDFA60;
	case 165:
		goto loc_82BDFA60;
	case 166:
		goto loc_82BDFA60;
	case 167:
		goto loc_82BDFA60;
	case 168:
		goto loc_82BDFA60;
	case 169:
		goto loc_82BDFA60;
	case 170:
		goto loc_82BDFA60;
	case 171:
		goto loc_82BDFA60;
	case 172:
		goto loc_82BDFA60;
	case 173:
		goto loc_82BDFA60;
	case 174:
		goto loc_82BDFA60;
	case 175:
		goto loc_82BDFA60;
	case 176:
		goto loc_82BDFA60;
	case 177:
		goto loc_82BDFA60;
	case 178:
		goto loc_82BDFA60;
	case 179:
		goto loc_82BDFA60;
	case 180:
		goto loc_82BDFA60;
	case 181:
		goto loc_82BDFA60;
	case 182:
		goto loc_82BDFA60;
	case 183:
		goto loc_82BDFA60;
	case 184:
		goto loc_82BDFA60;
	case 185:
		goto loc_82BDFA60;
	case 186:
		goto loc_82BDFA60;
	case 187:
		goto loc_82BDFA60;
	case 188:
		goto loc_82BDFA60;
	case 189:
		goto loc_82BDFA60;
	case 190:
		goto loc_82BDFA60;
	case 191:
		goto loc_82BDFA60;
	case 192:
		goto loc_82BDFA60;
	case 193:
		goto loc_82BDFA60;
	case 194:
		goto loc_82BDFA60;
	case 195:
		goto loc_82BDFA60;
	case 196:
		goto loc_82BDFA60;
	case 197:
		goto loc_82BDFA60;
	case 198:
		goto loc_82BDFA60;
	case 199:
		goto loc_82BDFA60;
	case 200:
		goto loc_82BDFA60;
	case 201:
		goto loc_82BDFA60;
	case 202:
		goto loc_82BDFA60;
	case 203:
		goto loc_82BDFA60;
	case 204:
		goto loc_82BDFA60;
	case 205:
		goto loc_82BDFA60;
	case 206:
		goto loc_82BDFA60;
	case 207:
		goto loc_82BDFA60;
	case 208:
		goto loc_82BDFA60;
	case 209:
		goto loc_82BDFA60;
	case 210:
		goto loc_82BDFA60;
	case 211:
		goto loc_82BDFA60;
	case 212:
		goto loc_82BDFA60;
	case 213:
		goto loc_82BDFA60;
	case 214:
		goto loc_82BDFA60;
	case 215:
		goto loc_82BDFA60;
	case 216:
		goto loc_82BDFA60;
	case 217:
		goto loc_82BDFA60;
	case 218:
		goto loc_82BDFA60;
	case 219:
		goto loc_82BDFA60;
	case 220:
		goto loc_82BDFA60;
	case 221:
		goto loc_82BDFA60;
	case 222:
		goto loc_82BDFA60;
	case 223:
		goto loc_82BDFA60;
	case 224:
		goto loc_82BDFA60;
	case 225:
		goto loc_82BDFA60;
	case 226:
		goto loc_82BDFA60;
	case 227:
		goto loc_82BDFA60;
	case 228:
		goto loc_82BDFA60;
	case 229:
		goto loc_82BDFA60;
	case 230:
		goto loc_82BDFA60;
	case 231:
		goto loc_82BDFA60;
	case 232:
		goto loc_82BDFA60;
	case 233:
		goto loc_82BDFA60;
	case 234:
		goto loc_82BDFA60;
	case 235:
		goto loc_82BDFA60;
	case 236:
		goto loc_82BDFA60;
	case 237:
		goto loc_82BDFA60;
	case 238:
		goto loc_82BDFA60;
	case 239:
		goto loc_82BDFA60;
	case 240:
		goto loc_82BDFA60;
	case 241:
		goto loc_82BDFA60;
	case 242:
		goto loc_82BDFA60;
	case 243:
		goto loc_82BDFA60;
	case 244:
		goto loc_82BDFA60;
	case 245:
		goto loc_82BDFA60;
	case 246:
		goto loc_82BDFA38;
	default:
		__builtin_unreachable();
	}
	// lwz r21,-1480(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1480) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1636(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1636) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1572(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1572) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1620(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1620) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1480(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1480) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1440(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1440) );
	// lwz r21,-1480(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-1480) );
loc_82BDF99C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdebd0
	sub_82BDEBD0(ctx, base);
	// b 0x82bdfa50
	goto loc_82BDFA50;
loc_82BDF9AC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdec40
	sub_82BDEC40(ctx, base);
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// stw r3,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r3.u32);
	// stw r26,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r26.u32);
	// b 0x82bdfa50
	goto loc_82BDFA50;
loc_82BDF9DC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,285
	cr6.compare<int32_t>(r11.s32, 285, xer);
	// bne cr6,0x82bdfa68
	if (!cr6.eq) goto loc_82BDFA68;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r25,16(r31)
	r25.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// stw r25,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r25.u32);
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// stw r28,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r28.u32);
	// stw r28,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r28.u32);
	// stw r27,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r27.u32);
	// bl 0x82be1c40
	sub_82BE1C40(ctx, base);
	// stw r3,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r3.u32);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be2758
	sub_82BE2758(ctx, base);
	// b 0x82bdfa44
	goto loc_82BDFA44;
loc_82BDFA38:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
loc_82BDFA44:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdf398
	sub_82BDF398(ctx, base);
loc_82BDFA50:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r11,r11,-40
	r11.s64 = r11.s64 + -40;
	// cmplwi cr6,r11,246
	cr6.compare<uint32_t>(r11.u32, 246, xer);
	// ble cr6,0x82bdf5a8
	if (!cr6.gt) goto loc_82BDF5A8;
loc_82BDFA60:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82ca2c2c
	return;
loc_82BDFA68:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// addi r9,r11,1616
	ctx.r9.s64 = r11.s64 + 1616;
	// addi r4,r10,13404
	ctx.r4.s64 = ctx.r10.s64 + 13404;
	// lwz r5,112(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(112) );
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
}

PPC_WEAK_FUNC(sub_82BDF510) {
	__imp__sub_82BDF510(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDFA98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r5,12(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// addi r11,r5,-123
	r11.s64 = ctx.r5.s64 + -123;
	// cmplwi cr6,r11,163
	cr6.compare<uint32_t>(r11.u32, 163, xer);
	// bgt cr6,0x82bdfe90
	if (cr6.gt) goto loc_82BDFE90;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,-1316
	r12.s64 = r12.s64 + -1316;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BDFE60;
	case 1:
		goto loc_82BDFE90;
	case 2:
		goto loc_82BDFE90;
	case 3:
		goto loc_82BDFE90;
	case 4:
		goto loc_82BDFE90;
	case 5:
		goto loc_82BDFE90;
	case 6:
		goto loc_82BDFE90;
	case 7:
		goto loc_82BDFE90;
	case 8:
		goto loc_82BDFE90;
	case 9:
		goto loc_82BDFE90;
	case 10:
		goto loc_82BDFE90;
	case 11:
		goto loc_82BDFE90;
	case 12:
		goto loc_82BDFE90;
	case 13:
		goto loc_82BDFE90;
	case 14:
		goto loc_82BDFE90;
	case 15:
		goto loc_82BDFE90;
	case 16:
		goto loc_82BDFE90;
	case 17:
		goto loc_82BDFE90;
	case 18:
		goto loc_82BDFE90;
	case 19:
		goto loc_82BDFE90;
	case 20:
		goto loc_82BDFE90;
	case 21:
		goto loc_82BDFE90;
	case 22:
		goto loc_82BDFE90;
	case 23:
		goto loc_82BDFE90;
	case 24:
		goto loc_82BDFE90;
	case 25:
		goto loc_82BDFE90;
	case 26:
		goto loc_82BDFE90;
	case 27:
		goto loc_82BDFE90;
	case 28:
		goto loc_82BDFE90;
	case 29:
		goto loc_82BDFE90;
	case 30:
		goto loc_82BDFE90;
	case 31:
		goto loc_82BDFE90;
	case 32:
		goto loc_82BDFE90;
	case 33:
		goto loc_82BDFE90;
	case 34:
		goto loc_82BDFE90;
	case 35:
		goto loc_82BDFE90;
	case 36:
		goto loc_82BDFE90;
	case 37:
		goto loc_82BDFE90;
	case 38:
		goto loc_82BDFE90;
	case 39:
		goto loc_82BDFE90;
	case 40:
		goto loc_82BDFE90;
	case 41:
		goto loc_82BDFE90;
	case 42:
		goto loc_82BDFE90;
	case 43:
		goto loc_82BDFE90;
	case 44:
		goto loc_82BDFE90;
	case 45:
		goto loc_82BDFE90;
	case 46:
		goto loc_82BDFE90;
	case 47:
		goto loc_82BDFE90;
	case 48:
		goto loc_82BDFE90;
	case 49:
		goto loc_82BDFE90;
	case 50:
		goto loc_82BDFE90;
	case 51:
		goto loc_82BDFE90;
	case 52:
		goto loc_82BDFE90;
	case 53:
		goto loc_82BDFE90;
	case 54:
		goto loc_82BDFE90;
	case 55:
		goto loc_82BDFE90;
	case 56:
		goto loc_82BDFE90;
	case 57:
		goto loc_82BDFE90;
	case 58:
		goto loc_82BDFE90;
	case 59:
		goto loc_82BDFE90;
	case 60:
		goto loc_82BDFE90;
	case 61:
		goto loc_82BDFE90;
	case 62:
		goto loc_82BDFE90;
	case 63:
		goto loc_82BDFE90;
	case 64:
		goto loc_82BDFE90;
	case 65:
		goto loc_82BDFE90;
	case 66:
		goto loc_82BDFE90;
	case 67:
		goto loc_82BDFE90;
	case 68:
		goto loc_82BDFE90;
	case 69:
		goto loc_82BDFE90;
	case 70:
		goto loc_82BDFE90;
	case 71:
		goto loc_82BDFE90;
	case 72:
		goto loc_82BDFE90;
	case 73:
		goto loc_82BDFE90;
	case 74:
		goto loc_82BDFE90;
	case 75:
		goto loc_82BDFE90;
	case 76:
		goto loc_82BDFE90;
	case 77:
		goto loc_82BDFE90;
	case 78:
		goto loc_82BDFE90;
	case 79:
		goto loc_82BDFE90;
	case 80:
		goto loc_82BDFE90;
	case 81:
		goto loc_82BDFE90;
	case 82:
		goto loc_82BDFE90;
	case 83:
		goto loc_82BDFE90;
	case 84:
		goto loc_82BDFE90;
	case 85:
		goto loc_82BDFE90;
	case 86:
		goto loc_82BDFE90;
	case 87:
		goto loc_82BDFE90;
	case 88:
		goto loc_82BDFE90;
	case 89:
		goto loc_82BDFE90;
	case 90:
		goto loc_82BDFE90;
	case 91:
		goto loc_82BDFE90;
	case 92:
		goto loc_82BDFE90;
	case 93:
		goto loc_82BDFE90;
	case 94:
		goto loc_82BDFE90;
	case 95:
		goto loc_82BDFE90;
	case 96:
		goto loc_82BDFE90;
	case 97:
		goto loc_82BDFE90;
	case 98:
		goto loc_82BDFE90;
	case 99:
		goto loc_82BDFE90;
	case 100:
		goto loc_82BDFE90;
	case 101:
		goto loc_82BDFE90;
	case 102:
		goto loc_82BDFE90;
	case 103:
		goto loc_82BDFE90;
	case 104:
		goto loc_82BDFE90;
	case 105:
		goto loc_82BDFE90;
	case 106:
		goto loc_82BDFE90;
	case 107:
		goto loc_82BDFE90;
	case 108:
		goto loc_82BDFE90;
	case 109:
		goto loc_82BDFE90;
	case 110:
		goto loc_82BDFE90;
	case 111:
		goto loc_82BDFE90;
	case 112:
		goto loc_82BDFE90;
	case 113:
		goto loc_82BDFE90;
	case 114:
		goto loc_82BDFE90;
	case 115:
		goto loc_82BDFE90;
	case 116:
		goto loc_82BDFE90;
	case 117:
		goto loc_82BDFE90;
	case 118:
		goto loc_82BDFE90;
	case 119:
		goto loc_82BDFE90;
	case 120:
		goto loc_82BDFE90;
	case 121:
		goto loc_82BDFE90;
	case 122:
		goto loc_82BDFE90;
	case 123:
		goto loc_82BDFE90;
	case 124:
		goto loc_82BDFE90;
	case 125:
		goto loc_82BDFE90;
	case 126:
		goto loc_82BDFE90;
	case 127:
		goto loc_82BDFE90;
	case 128:
		goto loc_82BDFE90;
	case 129:
		goto loc_82BDFE90;
	case 130:
		goto loc_82BDFE90;
	case 131:
		goto loc_82BDFE90;
	case 132:
		goto loc_82BDFE90;
	case 133:
		goto loc_82BDFE90;
	case 134:
		goto loc_82BDFE90;
	case 135:
		goto loc_82BDFE90;
	case 136:
		goto loc_82BDFE90;
	case 137:
		goto loc_82BDFE90;
	case 138:
		goto loc_82BDFE90;
	case 139:
		goto loc_82BDFE90;
	case 140:
		goto loc_82BDFDE0;
	case 141:
		goto loc_82BDFE90;
	case 142:
		goto loc_82BDFE70;
	case 143:
		goto loc_82BDFE90;
	case 144:
		goto loc_82BDFE90;
	case 145:
		goto loc_82BDFE90;
	case 146:
		goto loc_82BDFDB8;
	case 147:
		goto loc_82BDFE90;
	case 148:
		goto loc_82BDFE90;
	case 149:
		goto loc_82BDFE90;
	case 150:
		goto loc_82BDFE90;
	case 151:
		goto loc_82BDFE90;
	case 152:
		goto loc_82BDFDCC;
	case 153:
		goto loc_82BDFE90;
	case 154:
		goto loc_82BDFE90;
	case 155:
		goto loc_82BDFE90;
	case 156:
		goto loc_82BDFDF4;
	case 157:
		goto loc_82BDFE90;
	case 158:
		goto loc_82BDFE90;
	case 159:
		goto loc_82BDFE90;
	case 160:
		goto loc_82BDFE90;
	case 161:
		goto loc_82BDFD6C;
	case 162:
		goto loc_82BDFE90;
	case 163:
		goto loc_82BDFD9C;
	default:
		__builtin_unreachable();
	}
	// lwz r21,-416(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-416) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-544(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-544) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-400(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-400) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-584(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-584) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-564(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-564) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-524(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-524) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-660(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-660) );
	// lwz r21,-368(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-368) );
	// lwz r21,-612(r29)
	r21.u64 = PPC_LOAD_U32(r29.u32 + int32_t(-612) );
loc_82BDFD6C:
	// li r11,-1
	r11.s64 = -1;
	// li r10,5
	ctx.r10.s64 = 5;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// lfs f0,16(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r30.u32 + 16);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// b 0x82bdfe9c
	goto loc_82BDFE9C;
loc_82BDFD9C:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r5,16(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdddd8
	sub_82BDDDD8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// b 0x82bdfe9c
	goto loc_82BDFE9C;
loc_82BDFDB8:
	// li r10,1
	ctx.r10.s64 = 1;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// b 0x82bdfe48
	goto loc_82BDFE48;
loc_82BDFDCC:
	// li r10,2
	ctx.r10.s64 = 2;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// b 0x82bdfe48
	goto loc_82BDFE48;
loc_82BDFDE0:
	// li r10,3
	ctx.r10.s64 = 3;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// b 0x82bdfe48
	goto loc_82BDFE48;
loc_82BDFDF4:
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lbz r10,74(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 74);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82bdfe18
	if (!cr6.eq) goto loc_82BDFE18;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r4,r11,13808
	ctx.r4.s64 = r11.s64 + 13808;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BDFE18:
	// lbz r10,74(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 74);
	// lis r4,128
	ctx.r4.s64 = 8388608;
	// clrlwi r9,r10,24
	ctx.r9.u64 = ctx.r10.u32 & 0xFF;
	// ori r4,r4,37
	ctx.r4.u64 = ctx.r4.u64 | 37;
	// rlwinm r9,r9,0,30,28
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// stb r9,74(r11)
	PPC_STORE_U8(r11.u32 + 74, ctx.r9.u8);
	// lwz r8,12(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// lwz r5,8(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r7,14
	ctx.r7.s64 = 14;
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// stw r7,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r7.u32);
loc_82BDFE48:
	// li r11,-1
	r11.s64 = -1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// b 0x82bdfe9c
	goto loc_82BDFE9C;
loc_82BDFE60:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdee48
	sub_82BDEE48(ctx, base);
	// b 0x82bdfe9c
	goto loc_82BDFE9C;
loc_82BDFE70:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r6,4(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdf220
	sub_82BDF220(ctx, base);
	// b 0x82bdfe9c
	goto loc_82BDFE9C;
loc_82BDFE90:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdf510
	sub_82BDF510(ctx, base);
loc_82BDFE9C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BDFA98) {
	__imp__sub_82BDFA98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BDFEB8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// bl 0x82bde440
	sub_82BDE440(ctx, base);
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(12) );
	// cmpwi cr6,r11,35
	cr6.compare<int32_t>(r11.s32, 35, xer);
	// beq cr6,0x82bdff00
	if (cr6.eq) goto loc_82BDFF00;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x82bdfef8
	if (cr6.eq) goto loc_82BDFEF8;
	// cmpwi cr6,r11,270
	cr6.compare<int32_t>(r11.s32, 270, xer);
	// bne cr6,0x82bdffb8
	if (!cr6.eq) goto loc_82BDFFB8;
	// li r28,1
	r28.s64 = 1;
	// b 0x82bdff04
	goto loc_82BDFF04;
loc_82BDFEF8:
	// li r28,0
	r28.s64 = 0;
	// b 0x82bdff04
	goto loc_82BDFF04;
loc_82BDFF00:
	// li r28,2
	r28.s64 = 2;
loc_82BDFF04:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,8
	ctx.r5.s64 = 8;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// li r11,-1
	r11.s64 = -1;
	// li r9,5
	ctx.r9.s64 = 5;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// cmplwi cr6,r28,1
	cr6.compare<uint32_t>(r28.u32, 1, xer);
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// lfs f0,-27468(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -27468);
	f0.f64 = double(temp.f32);
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// stfs f0,84(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lwz r31,28(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + int32_t(28) );
	// blt cr6,0x82bdff88
	if (cr6.lt) goto loc_82BDFF88;
	// beq cr6,0x82bdff78
	if (cr6.eq) goto loc_82BDFF78;
	// cmplwi cr6,r28,3
	cr6.compare<uint32_t>(r28.u32, 3, xer);
	// bge cr6,0x82bdffc4
	if (!cr6.lt) goto loc_82BDFFC4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,20
	ctx.r4.s64 = 20;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// b 0x82bdffc4
	goto loc_82BDFFC4;
loc_82BDFF78:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2be0
	sub_82BE2BE0(ctx, base);
	// b 0x82bdffc4
	goto loc_82BDFFC4;
loc_82BDFF88:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// bne cr6,0x82bdffa0
	if (!cr6.eq) goto loc_82BDFFA0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
loc_82BDFFA0:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,18
	ctx.r4.s64 = 18;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// b 0x82bdffc4
	goto loc_82BDFFC4;
loc_82BDFFB8:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bdfa98
	sub_82BDFA98(ctx, base);
loc_82BDFFC4:
	// lwz r3,12(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + int32_t(12) );
	// bl 0x82a34680
	sub_82A34680(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,15
	cr6.compare<int32_t>(r31.s32, 15, xer);
	// beq cr6,0x82be00dc
	if (cr6.eq) goto loc_82BE00DC;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r27,r11,32
	r27.s64 = r11.s64 + 32;
loc_82BDFFE0:
	// rlwinm r28,r31,1,0,30
	r28.u64 = rotl64(r31.u32 | (r31.u64 << 32), 1) & 0xFFFFFFFE;
	// lbzx r11,r28,r27
	r11.u64 = PPC_LOAD_U8(r28.u32 + r27.u32);
	// cmplw cr6,r11,r26
	cr6.compare<uint32_t>(r11.u32, r26.u32, xer);
	// ble cr6,0x82be00dc
	if (!cr6.gt) goto loc_82BE00DC;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r3,28(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + int32_t(28) );
	// cmplwi cr6,r31,14
	cr6.compare<uint32_t>(r31.u32, 14, xer);
	// bgt cr6,0x82be00a0
	if (cr6.gt) goto loc_82BE00A0;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,28
	r12.s64 = r12.s64 + 28;
	// rlwinm r0,r31,2,0,29
	r0.u64 = rotl64(r31.u32 | (r31.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r31.u64) {
	case 0:
		goto loc_82BE007C;
	case 1:
		goto loc_82BE007C;
	case 2:
		goto loc_82BE007C;
	case 3:
		goto loc_82BE007C;
	case 4:
		goto loc_82BE007C;
	case 5:
		goto loc_82BE007C;
	case 6:
		goto loc_82BE0070;
	case 7:
		goto loc_82BE00A0;
	case 8:
		goto loc_82BE00A0;
	case 9:
		goto loc_82BE00A0;
	case 10:
		goto loc_82BE00A0;
	case 11:
		goto loc_82BE00A0;
	case 12:
		goto loc_82BE00A0;
	case 13:
		goto loc_82BE0058;
	case 14:
		goto loc_82BE0064;
	default:
		__builtin_unreachable();
	}
	// lwz r21,124(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(124) );
	// lwz r21,124(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(124) );
	// lwz r21,124(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(124) );
	// lwz r21,124(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(124) );
	// lwz r21,124(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(124) );
	// lwz r21,124(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(124) );
	// lwz r21,112(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(112) );
	// lwz r21,160(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(160) );
	// lwz r21,160(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(160) );
	// lwz r21,160(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(160) );
	// lwz r21,160(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(160) );
	// lwz r21,160(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(160) );
	// lwz r21,160(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(160) );
	// lwz r21,88(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(88) );
	// lwz r21,100(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(100) );
loc_82BE0058:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82be2a08
	sub_82BE2A08(ctx, base);
	// b 0x82be00a8
	goto loc_82BE00A8;
loc_82BE0064:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82be2af8
	sub_82BE2AF8(ctx, base);
	// b 0x82be00a8
	goto loc_82BE00A8;
loc_82BE0070:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// b 0x82be00a8
	goto loc_82BE00A8;
loc_82BE007C:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x82be00a0
	if (!cr6.eq) goto loc_82BE00A0;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82be00a0
	if (!cr6.eq) goto loc_82BE00A0;
	// lwz r11,16(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x82be00a8
	if (cr6.eq) goto loc_82BE00A8;
loc_82BE00A0:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
loc_82BE00A8:
	// addi r11,r27,1
	r11.s64 = r27.s64 + 1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lbzx r5,r28,r11
	ctx.r5.u64 = PPC_LOAD_U8(r28.u32 + r11.u32);
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,28(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + int32_t(28) );
	// bl 0x82be3140
	sub_82BE3140(ctx, base);
	// cmpwi cr6,r31,15
	cr6.compare<int32_t>(r31.s32, 15, xer);
	// bne cr6,0x82bdffe0
	if (!cr6.eq) goto loc_82BDFFE0;
loc_82BE00DC:
	// lwz r11,32(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(32) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lhz r10,52(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 52);
	// addis r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 65536;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// sth r9,52(r11)
	PPC_STORE_U16(r11.u32 + 52, ctx.r9.u16);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BDFEB8) {
	__imp__sub_82BDFEB8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0100) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r30{};
	// addi r11,r3,-260
	r11.s64 = ctx.r3.s64 + -260;
	// cmplwi cr6,r11,27
	cr6.compare<uint32_t>(r11.u32, 27, xer);
	// bgt cr6,0x82be019c
	if (cr6.gt) goto loc_82BE019C;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,292
	r12.s64 = r12.s64 + 292;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BE0194;
	case 1:
		goto loc_82BE0194;
	case 2:
		goto loc_82BE0194;
	case 3:
		goto loc_82BE019C;
	case 4:
		goto loc_82BE019C;
	case 5:
		goto loc_82BE019C;
	case 6:
		goto loc_82BE019C;
	case 7:
		goto loc_82BE019C;
	case 8:
		goto loc_82BE019C;
	case 9:
		goto loc_82BE019C;
	case 10:
		goto loc_82BE019C;
	case 11:
		goto loc_82BE019C;
	case 12:
		goto loc_82BE019C;
	case 13:
		goto loc_82BE019C;
	case 14:
		goto loc_82BE019C;
	case 15:
		goto loc_82BE019C;
	case 16:
		goto loc_82BE0194;
	case 17:
		goto loc_82BE019C;
	case 18:
		goto loc_82BE019C;
	case 19:
		goto loc_82BE019C;
	case 20:
		goto loc_82BE019C;
	case 21:
		goto loc_82BE019C;
	case 22:
		goto loc_82BE019C;
	case 23:
		goto loc_82BE019C;
	case 24:
		goto loc_82BE019C;
	case 25:
		goto loc_82BE019C;
	case 26:
		goto loc_82BE019C;
	case 27:
		goto loc_82BE0194;
	default:
		__builtin_unreachable();
	}
	// lwz r21,404(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(404) );
	// lwz r21,404(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(404) );
	// lwz r21,404(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(404) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,404(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(404) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,412(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(412) );
	// lwz r21,404(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(404) );
loc_82BE0194:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
loc_82BE019C:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE0100) {
	__imp__sub_82BE0100(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE01A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r31,28(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(28) );
	// li r11,0
	r11.s64 = 0;
	// li r10,-1
	ctx.r10.s64 = -1;
	// stb r11,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, r11.u8);
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// lbz r8,50(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// stb r8,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r8.u8);
	// stb r11,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, r11.u8);
	// lwz r7,20(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// stw r7,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r7.u32);
	// stw r9,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r9.u32);
	// bl 0x82be1720
	sub_82BE1720(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE01A8) {
	__imp__sub_82BE01A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0208) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r31,28(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(28) );
	// li r11,0
	r11.s64 = 0;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// lwz r10,36(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// beq cr6,0x82be02e4
	if (cr6.eq) goto loc_82BE02E4;
loc_82BE022C:
	// lwz r9,4(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// cmpwi cr6,r9,9
	cr6.compare<int32_t>(ctx.r9.s32, 9, xer);
	// bne cr6,0x82be0268
	if (!cr6.eq) goto loc_82BE0268;
	// lwz r9,8(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(8) );
	// lwz r8,4(r5)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(4) );
	// cmpw cr6,r9,r8
	cr6.compare<int32_t>(ctx.r9.s32, ctx.r8.s32, xer);
	// bne cr6,0x82be0250
	if (!cr6.eq) goto loc_82BE0250;
	// li r11,1
	r11.s64 = 1;
	// stw r10,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, ctx.r10.u32);
loc_82BE0250:
	// lwz r9,4(r5)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(4) );
	// lwz r8,12(r4)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(12) );
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// bne cr6,0x82be0268
	if (!cr6.eq) goto loc_82BE0268;
	// li r11,1
	r11.s64 = 1;
	// stw r10,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r10.u32);
loc_82BE0268:
	// lwz r4,0(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// bne cr6,0x82be022c
	if (!cr6.eq) goto loc_82BE022C;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82be02e4
	if (cr6.eq) goto loc_82BE02E4;
	// lwz r11,4(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(4) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r10,36(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// rlwinm r9,r11,17,0,14
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// or r7,r9,r10
	ctx.r7.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rlwinm r4,r7,6,0,25
	ctx.r4.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 6) & 0xFFFFFFC0;
	// lwz r5,8(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lbz r6,75(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r6
	cr6.compare<int32_t>(r11.s32, ctx.r6.s32, xer);
	// ble cr6,0x82be02d8
	if (!cr6.gt) goto loc_82BE02D8;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be02d4
	if (cr6.lt) goto loc_82BE02D4;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE02D4:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE02D8:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE02E4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE0208) {
	__imp__sub_82BE0208(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE02F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r28,r30,4
	r28.s64 = r30.s64 + 4;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// blt cr6,0x82be042c
	if (cr6.lt) goto loc_82BE042C;
	// cmpwi cr6,r11,9
	cr6.compare<int32_t>(r11.s32, 9, xer);
	// bgt cr6,0x82be042c
	if (cr6.gt) goto loc_82BE042C;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,44
	cr6.compare<int32_t>(r11.s32, 44, xer);
	// bne cr6,0x82be0378
	if (!cr6.eq) goto loc_82BE0378;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// stw r30,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r30.u32);
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdf510
	sub_82BDF510(ctx, base);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(116) );
	// cmpwi cr6,r11,6
	cr6.compare<int32_t>(r11.s32, 6, xer);
	// bne cr6,0x82be0364
	if (!cr6.eq) goto loc_82BE0364;
	// addi r5,r1,116
	ctx.r5.s64 = ctx.r1.s64 + 116;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be0208
	sub_82BE0208(ctx, base);
loc_82BE0364:
	// addi r5,r29,1
	ctx.r5.s64 = r29.s64 + 1;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be02f8
	sub_82BE02F8(ctx, base);
	// b 0x82be03d0
	goto loc_82BE03D0;
loc_82BE0378:
	// li r4,61
	ctx.r4.s64 = 61;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdf330
	sub_82BDF330(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpw cr6,r30,r29
	cr6.compare<int32_t>(r30.s32, r29.s32, xer);
	// beq cr6,0x82be0408
	if (cr6.eq) goto loc_82BE0408;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde318
	sub_82BDE318(ctx, base);
	// cmpw cr6,r30,r29
	cr6.compare<int32_t>(r30.s32, r29.s32, xer);
	// ble cr6,0x82be03d0
	if (!cr6.gt) goto loc_82BE03D0;
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(36) );
	// subf r10,r30,r10
	ctx.r10.s64 = ctx.r10.s64 - r30.s64;
	// add r9,r10,r29
	ctx.r9.u64 = ctx.r10.u64 + r29.u64;
	// stw r9,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r9.u32);
loc_82BE03D0:
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// li r10,-1
	ctx.r10.s64 = -1;
	// li r9,12
	ctx.r9.s64 = 12;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r11,36(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(36) );
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r10,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r10.u32);
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x82be25e8
	sub_82BE25E8(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c38
	return;
loc_82BE0408:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be1e98
	sub_82BE1E98(ctx, base);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be25e8
	sub_82BE25E8(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c38
	return;
loc_82BE042C:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,13852
	ctx.r4.s64 = r11.s64 + 13852;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
}

PPC_WEAK_FUNC(sub_82BE02F8) {
	__imp__sub_82BE02F8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0440) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82be0474
	if (!cr6.eq) goto loc_82BE0474;
	// li r11,3
	r11.s64 = 3;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
loc_82BE0474:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be2a08
	sub_82BE2A08(ctx, base);
	// lwz r3,96(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(96) );
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE0440) {
	__imp__sub_82BE0440(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0498) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r30,28(r3)
	r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(28) );
	// li r11,0
	r11.s64 = 0;
	// lwz r31,20(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be04e0
	if (cr6.eq) goto loc_82BE04E0;
loc_82BE04C0:
	// lbz r10,10(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be04f0
	if (!cr6.eq) goto loc_82BE04F0;
	// lbz r10,9(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// lwz r31,0(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// or r11,r10,r11
	r11.u64 = ctx.r10.u64 | r11.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82be04c0
	if (!cr6.eq) goto loc_82BE04C0;
loc_82BE04E0:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// addi r4,r11,13892
	ctx.r4.s64 = r11.s64 + 13892;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE04F0:
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// beq cr6,0x82be0514
	if (cr6.eq) goto loc_82BE0514;
	// lwz r10,12(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// li r4,35
	ctx.r4.s64 = 35;
	// lbz r11,8(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwimi r4,r11,6,0,25
	ctx.r4.u64 = (rotl32(r11.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
loc_82BE0514:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r31,4
	ctx.r4.s64 = r31.s64 + 4;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE0498) {
	__imp__sub_82BE0498(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0548) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r29,r11
	r29.u64 = r11.u64;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// bl 0x82be0440
	sub_82BE0440(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// stb r10,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r10.u8);
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// lbz r7,50(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// stb r7,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r7.u8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r9,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r9.u8);
	// li r4,259
	ctx.r4.s64 = 259;
	// lwz r6,20(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// stw r6,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r6.u32);
	// stw r8,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r8.u32);
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be01a8
	sub_82BE01A8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// bne cr6,0x82be05f8
	if (!cr6.eq) goto loc_82BE05F8;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// b 0x82be060c
	goto loc_82BE060C;
loc_82BE05F8:
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// li r6,255
	ctx.r6.s64 = 255;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1a98
	sub_82BE1A98(ctx, base);
loc_82BE060C:
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// li r5,277
	ctx.r5.s64 = 277;
	// li r4,262
	ctx.r4.s64 = 262;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BE0548) {
	__imp__sub_82BE0548(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0648) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r10,-1
	ctx.r10.s64 = -1;
	// li r9,1
	ctx.r9.s64 = 1;
	// li r11,0
	r11.s64 = 0;
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// lwz r29,24(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// stw r29,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r29.u32);
	// stw r10,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r10.u32);
	// stb r9,106(r1)
	PPC_STORE_U8(ctx.r1.u32 + 106, ctx.r9.u8);
	// lbz r6,50(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// stb r6,104(r1)
	PPC_STORE_U8(ctx.r1.u32 + 104, ctx.r6.u8);
	// stb r11,105(r1)
	PPC_STORE_U8(ctx.r1.u32 + 105, r11.u8);
	// lwz r5,20(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// stw r5,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r5.u32);
	// stw r8,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r8.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// stb r11,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, r11.u8);
	// lbz r4,50(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// stb r4,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r4.u8);
	// stb r11,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, r11.u8);
	// lwz r11,20(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// stw r7,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r7.u32);
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be1720
	sub_82BE1720(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// li r5,272
	ctx.r5.s64 = 272;
	// li r4,276
	ctx.r4.s64 = 276;
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be0440
	sub_82BE0440(ctx, base);
	// lbz r9,89(r1)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r1.u32 + 89);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82be0734
	if (!cr6.eq) goto loc_82BE0734;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(24) );
	// cmpw cr6,r29,r11
	cr6.compare<int32_t>(r29.s32, r11.s32, xer);
	// bne cr6,0x82be072c
	if (!cr6.eq) goto loc_82BE072C;
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// addi r4,r3,32
	ctx.r4.s64 = ctx.r3.s64 + 32;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BE072C:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// b 0x82be07a0
	goto loc_82BE07A0;
loc_82BE0734:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be0498
	sub_82BE0498(ctx, base);
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r3,32
	ctx.r4.s64 = ctx.r3.s64 + 32;
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(24) );
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r10,24(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// cmpw cr6,r29,r10
	cr6.compare<int32_t>(r29.s32, ctx.r10.s32, xer);
	// bne cr6,0x82be079c
	if (!cr6.eq) goto loc_82BE079C;
	// stw r10,28(r11)
	PPC_STORE_U32(r11.u32 + 28, ctx.r10.u32);
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r4,r11,32
	ctx.r4.s64 = r11.s64 + 32;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
loc_82BE079C:
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
loc_82BE07A0:
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// li r6,255
	ctx.r6.s64 = 255;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// bl 0x82be1a98
	sub_82BE1A98(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE0648) {
	__imp__sub_82BE0648(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE07C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// li r11,3
	r11.s64 = 3;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// addi r10,r10,3
	ctx.r10.s64 = ctx.r10.s64 + 3;
	// stb r10,50(r31)
	PPC_STORE_U8(r31.u32 + 50, ctx.r10.u8);
loc_82BE07F4:
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// lwz r7,24(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r6,r10,86
	ctx.r6.s64 = ctx.r10.s64 + 86;
	// rlwinm r5,r6,1,0,30
	ctx.r5.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r9,24(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(24) );
	// lhzx r10,r5,r31
	ctx.r10.u64 = PPC_LOAD_U16(ctx.r5.u32 + r31.u32);
	// rotlwi r8,r10,1
	ctx.r8.u64 = rotl32(ctx.r10.u32, 1);
	// add r4,r10,r8
	ctx.r4.u64 = ctx.r10.u64 + ctx.r8.u64;
	// rlwinm r10,r4,2,0,29
	ctx.r10.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r10,r9
	ctx.r3.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r7,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r7.u32);
	// bne 0x82be07f4
	if (!cr0.eq) goto loc_82BE07F4;
	// li r4,259
	ctx.r4.s64 = 259;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x82be086c
	if (cr6.eq) goto loc_82BE086C;
	// rlwinm r10,r26,6,0,25
	ctx.r10.u64 = rotl64(r26.u32 | (r26.u64 << 32), 6) & 0xFFFFFFC0;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// oris r4,r10,32767
	ctx.r4.u64 = ctx.r10.u64 | 2147418112;
	// ori r4,r4,32800
	ctx.r4.u64 = ctx.r4.u64 | 32800;
	// lwz r5,8(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// b 0x82be0874
	goto loc_82BE0874;
loc_82BE086C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
loc_82BE0874:
	// li r11,0
	r11.s64 = 0;
	// li r10,-1
	ctx.r10.s64 = -1;
	// stb r11,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, r11.u8);
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lbz r8,50(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stb r8,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r8.u8);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r11,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, r11.u8);
	// lwz r7,20(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// stw r7,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r7.u32);
	// stw r9,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r9.u32);
	// bl 0x82a32768
	sub_82A32768(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// lbz r6,75(r10)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r6
	cr6.compare<int32_t>(r11.s32, ctx.r6.s32, xer);
	// ble cr6,0x82be08e8
	if (!cr6.gt) goto loc_82BE08E8;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be08e4
	if (cr6.lt) goto loc_82BE08E4;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE08E4:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE08E8:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// bl 0x82be01a8
	sub_82BE01A8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r30,r31,32
	r30.s64 = r31.s64 + 32;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r10.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x82be0940
	if (cr6.eq) goto loc_82BE0940;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// rlwinm r10,r26,6,0,25
	ctx.r10.u64 = rotl64(r26.u32 | (r26.u64 << 32), 6) & 0xFFFFFFC0;
	// oris r4,r10,32767
	ctx.r4.u64 = ctx.r10.u64 | 2147418112;
	// ori r4,r4,32799
	ctx.r4.u64 = ctx.r4.u64 | 32799;
	// lwz r5,8(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// b 0x82be0958
	goto loc_82BE0958;
loc_82BE0940:
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// rlwinm r11,r29,8,0,23
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 8) & 0xFFFFFF00;
	// li r4,33
	ctx.r4.s64 = 33;
	// or r9,r11,r26
	ctx.r9.u64 = r11.u64 | r26.u64;
	// rlwimi r4,r9,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r9.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
loc_82BE0958:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// add r9,r11,r10
	ctx.r9.u64 = r11.u64 + ctx.r10.u64;
	// stw r25,-4(r9)
	PPC_STORE_U32(ctx.r9.u32 + -4, r25.u32);
	// bne cr6,0x82be0988
	if (!cr6.eq) goto loc_82BE0988;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
loc_82BE0988:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r7,r28,1
	ctx.r7.s64 = r28.s64 + 1;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmpw cr6,r7,r11
	cr6.compare<int32_t>(ctx.r7.s32, r11.s32, xer);
	// bne cr6,0x82be09b8
	if (!cr6.eq) goto loc_82BE09B8;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c2c
	return;
loc_82BE09B8:
	// li r6,255
	ctx.r6.s64 = 255;
	// mr r5,r7
	ctx.r5.u64 = ctx.r7.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1a98
	sub_82BE1A98(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c2c
	return;
}

PPC_WEAK_FUNC(sub_82BE07C0) {
	__imp__sub_82BE07C0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE09D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// li r5,11
	ctx.r5.s64 = 11;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// addi r4,r11,13912
	ctx.r4.s64 = r11.s64 + 13912;
	// lwz r28,36(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// li r5,11
	ctx.r5.s64 = 11;
	// addi r4,r10,13924
	ctx.r4.s64 = ctx.r10.s64 + 13924;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// li r5,10
	ctx.r5.s64 = 10;
	// addi r4,r9,13936
	ctx.r4.s64 = ctx.r9.s64 + 13936;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,2
	ctx.r5.s64 = 2;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// li r4,61
	ctx.r4.s64 = 61;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// li r4,44
	ctx.r4.s64 = 44;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r8,44
	cr6.compare<int32_t>(ctx.r8.s32, 44, xer);
	// bne cr6,0x82be0afc
	if (!cr6.eq) goto loc_82BE0AFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// addi r4,r1,160
	ctx.r4.s64 = ctx.r1.s64 + 160;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// b 0x82be0b88
	goto loc_82BE0B88;
loc_82BE0AFC:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// li r10,3
	ctx.r10.s64 = 3;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lfs f0,-27456(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -27456);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// bl 0x82be1c40
	sub_82BE1C40(ctx, base);
	// lwz r9,36(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// rlwinm r8,r3,8,0,23
	ctx.r8.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFFFFFF00;
	// lwz r7,12(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// li r4,1
	ctx.r4.s64 = 1;
	// or r6,r8,r9
	ctx.r6.u64 = ctx.r8.u64 | ctx.r9.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwimi r4,r6,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r6.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// lwz r5,8(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lbz r5,75(r10)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// ble cr6,0x82be0b7c
	if (!cr6.gt) goto loc_82BE0B7C;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be0b78
	if (cr6.lt) goto loc_82BE0B78;
	// lwz r3,12(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE0B78:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE0B7C:
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,36(r30)
	PPC_STORE_U32(r30.u32 + 36, r11.u32);
loc_82BE0B88:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be07c0
	sub_82BE07C0(ctx, base);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BE09D0) {
	__imp__sub_82BE09D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0BA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r5,15
	ctx.r5.s64 = 15;
	// addi r4,r11,13948
	ctx.r4.s64 = r11.s64 + 13948;
	// lwz r27,28(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lwz r26,36(r27)
	r26.u64 = PPC_LOAD_U32(r27.u32 + int32_t(36) );
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,11
	ctx.r5.s64 = 11;
	// addi r4,r10,13964
	ctx.r4.s64 = ctx.r10.s64 + 13964;
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,13
	ctx.r5.s64 = 13;
	// addi r4,r9,13976
	ctx.r4.s64 = ctx.r9.s64 + 13976;
	// bl 0x82bcdba8
	sub_82BCDBA8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r5,2
	ctx.r5.s64 = 2;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// li r29,4
	r29.s64 = 4;
loc_82BE0C40:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,44
	cr6.compare<int32_t>(r11.s32, 44, xer);
	// bne cr6,0x82be0cf0
	if (!cr6.eq) goto loc_82BE0CF0;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,285
	cr6.compare<int32_t>(r11.s32, 285, xer);
	// bne cr6,0x82be0cb0
	if (!cr6.eq) goto loc_82BE0CB0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r28,16(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lbz r11,50(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,200
	cr6.compare<int32_t>(r11.s32, 200, xer);
	// bgt cr6,0x82be0cdc
	if (cr6.gt) goto loc_82BE0CDC;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdde38
	sub_82BDDE38(ctx, base);
	// lbz r11,50(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// clrlwi r10,r3,16
	ctx.r10.u64 = ctx.r3.u32 & 0xFFFF;
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r9,r11,86
	ctx.r9.s64 = r11.s64 + 86;
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// sthx r10,r8,r30
	PPC_STORE_U16(ctx.r8.u32 + r30.u32, ctx.r10.u16);
	// b 0x82be0c40
	goto loc_82BE0C40;
loc_82BE0CB0:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// addi r9,r11,1616
	ctx.r9.s64 = r11.s64 + 1616;
	// addi r4,r10,13404
	ctx.r4.s64 = ctx.r10.s64 + 13404;
	// lwz r5,112(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(112) );
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE0CDC:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r5,r11,13568
	ctx.r5.s64 = r11.s64 + 13568;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddc28
	sub_82BDDC28(ctx, base);
loc_82BE0CF0:
	// li r4,267
	ctx.r4.s64 = 267;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r1,112
	r28.s64 = ctx.r1.s64 + 112;
	// lwz r30,4(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// bl 0x82bdf330
	sub_82BDF330(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// bl 0x82bde318
	sub_82BDE318(ctx, base);
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// lwz r11,36(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + int32_t(36) );
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// lbz r9,75(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82be0d60
	if (!cr6.gt) goto loc_82BE0D60;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be0d5c
	if (cr6.lt) goto loc_82BE0D5C;
	// lwz r3,12(r27)
	ctx.r3.u64 = PPC_LOAD_U32(r27.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE0D5C:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE0D60:
	// li r7,0
	ctx.r7.s64 = 0;
	// addi r6,r29,-3
	ctx.r6.s64 = r29.s64 + -3;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be07c0
	sub_82BE07C0(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BE0BA8) {
	__imp__sub_82BE0BA8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0D80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,-1
	r11.s64 = -1;
	// li r10,1
	ctx.r10.s64 = 1;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// stb r10,90(r1)
	PPC_STORE_U8(ctx.r1.u32 + 90, ctx.r10.u8);
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lbz r7,50(r30)
	ctx.r7.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// stb r7,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r7.u8);
	// stb r9,89(r1)
	PPC_STORE_U8(ctx.r1.u32 + 89, ctx.r9.u8);
	// lwz r6,20(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// stw r6,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r6.u32);
	// stw r8,20(r30)
	PPC_STORE_U32(r30.u32 + 20, ctx.r8.u32);
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r4,285
	ctx.r4.s64 = 285;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r29,16(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r5,44
	cr6.compare<int32_t>(ctx.r5.s32, 44, xer);
	// beq cr6,0x82be0e24
	if (cr6.eq) goto loc_82BE0E24;
	// cmpwi cr6,r5,61
	cr6.compare<int32_t>(ctx.r5.s32, 61, xer);
	// beq cr6,0x82be0e10
	if (cr6.eq) goto loc_82BE0E10;
	// cmpwi cr6,r5,267
	cr6.compare<int32_t>(ctx.r5.s32, 267, xer);
	// beq cr6,0x82be0e24
	if (cr6.eq) goto loc_82BE0E24;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,13992
	ctx.r4.s64 = r11.s64 + 13992;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE0E10:
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be09d0
	sub_82BE09D0(ctx, base);
	// b 0x82be0e30
	goto loc_82BE0E30;
loc_82BE0E24:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be0ba8
	sub_82BE0BA8(ctx, base);
loc_82BE0E30:
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// li r5,264
	ctx.r5.s64 = 264;
	// li r4,262
	ctx.r4.s64 = 262;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE0D80) {
	__imp__sub_82BE0D80(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0E58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be0440
	sub_82BE0440(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r4,274
	ctx.r4.s64 = 274;
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be01a8
	sub_82BE01A8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE0E58) {
	__imp__sub_82BE0E58(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE0EB8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r27,-1
	r27.s64 = -1;
	// mr r24,r4
	r24.u64 = ctx.r4.u64;
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r27.u32);
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// bl 0x82be0e58
	sub_82BE0E58(ctx, base);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,261
	cr6.compare<int32_t>(r11.s32, 261, xer);
	// bne cr6,0x82be0fe4
	if (!cr6.eq) goto loc_82BE0FE4;
	// addi r28,r31,32
	r28.s64 = r31.s64 + 32;
	// li r25,3
	r25.s64 = 3;
	// li r26,0
	r26.s64 = 0;
loc_82BE0EF8:
	// lwz r23,0(r28)
	r23.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lis r4,32767
	ctx.r4.s64 = 2147418112;
	// stw r27,0(r28)
	PPC_STORE_U32(r28.u32 + 0, r27.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// ori r4,r4,32790
	ctx.r4.u64 = ctx.r4.u64 | 32790;
	// lwz r5,8(r11)
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// stw r3,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r3.u32);
	// mr r5,r23
	ctx.r5.u64 = r23.u64;
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,116(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(116) );
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r10,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r10.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bdfeb8
	sub_82BDFEB8(ctx, base);
	// lwz r9,144(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(144) );
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// bne cr6,0x82be0f7c
	if (!cr6.eq) goto loc_82BE0F7C;
	// stw r25,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r25.u32);
loc_82BE0F7C:
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// lwz r3,28(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// bl 0x82be2a08
	sub_82BE2A08(ctx, base);
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// cmpwi cr6,r11,274
	cr6.compare<int32_t>(r11.s32, 274, xer);
	// lwz r29,160(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(160) );
	// bne cr6,0x82be1034
	if (!cr6.eq) goto loc_82BE1034;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// stw r27,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r27.u32);
	// stb r26,130(r1)
	PPC_STORE_U8(ctx.r1.u32 + 130, r26.u8);
	// addi r11,r1,120
	r11.s64 = ctx.r1.s64 + 120;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r23,28(r30)
	r23.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// lbz r10,50(r23)
	ctx.r10.u64 = PPC_LOAD_U8(r23.u32 + 50);
	// stb r10,128(r1)
	PPC_STORE_U8(ctx.r1.u32 + 128, ctx.r10.u8);
	// stb r26,129(r1)
	PPC_STORE_U8(ctx.r1.u32 + 129, r26.u8);
	// lwz r9,20(r23)
	ctx.r9.u64 = PPC_LOAD_U32(r23.u32 + int32_t(20) );
	// stw r9,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r9.u32);
	// stw r11,20(r23)
	PPC_STORE_U32(r23.u32 + 20, r11.u32);
	// bl 0x82be1720
	sub_82BE1720(ctx, base);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// bl 0x82bde4c8
	sub_82BDE4C8(ctx, base);
	// lwz r8,12(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// cmpwi cr6,r8,261
	cr6.compare<int32_t>(ctx.r8.s32, 261, xer);
	// beq cr6,0x82be0ef8
	if (cr6.eq) goto loc_82BE0EF8;
loc_82BE0FE4:
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,260
	cr6.compare<int32_t>(r11.s32, 260, xer);
	// bne cr6,0x82be1060
	if (!cr6.eq) goto loc_82BE1060;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be01a8
	sub_82BE01A8(ctx, base);
	// b 0x82be106c
	goto loc_82BE106C;
loc_82BE1034:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r3,32(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(32) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// addi r9,r11,1616
	ctx.r9.s64 = r11.s64 + 1616;
	// addi r4,r10,13404
	ctx.r4.s64 = ctx.r10.s64 + 13404;
	// lwz r5,68(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(68) );
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r5,12(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE1060:
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
loc_82BE106C:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(112) );
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// mr r6,r24
	ctx.r6.u64 = r24.u64;
	// li r5,266
	ctx.r5.s64 = 266;
	// li r4,262
	ctx.r4.s64 = 262;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82ca2c24
	return;
}

PPC_WEAK_FUNC(sub_82BE0EB8) {
	__imp__sub_82BE0EB8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE10A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r4,285
	ctx.r4.s64 = 285;
	// lwz r31,28(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// bl 0x82bddcc8
	sub_82BDDCC8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r29,16(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddf58
	sub_82BDDF58(ctx, base);
	// li r11,-1
	r11.s64 = -1;
	// lwz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// li r10,6
	ctx.r10.s64 = 6;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, r11.u32);
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, r11.u32);
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// lbz r8,75(r9)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + 75);
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r10,r11,1
	ctx.r10.s64 = r11.s64 + 1;
	// cmpw cr6,r10,r8
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r8.s32, xer);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// ble cr6,0x82be1128
	if (!cr6.gt) goto loc_82BE1128;
	// cmpwi cr6,r10,250
	cr6.compare<int32_t>(ctx.r10.s32, 250, xer);
	// blt cr6,0x82be1124
	if (cr6.lt) goto loc_82BE1124;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE1124:
	// stb r10,75(r9)
	PPC_STORE_U8(ctx.r9.u32 + 75, ctx.r10.u8);
loc_82BE1128:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// lwz r10,28(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// lbz r11,50(r10)
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + 50);
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// clrlwi r11,r8,24
	r11.u64 = ctx.r8.u32 & 0xFF;
	// lwz r7,24(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// stb r11,50(r10)
	PPC_STORE_U8(ctx.r10.u32 + 50, r11.u8);
	// addi r6,r11,85
	ctx.r6.s64 = r11.s64 + 85;
	// lwz r9,24(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(24) );
	// rlwinm r11,r6,1,0,30
	r11.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r11,r11,r10
	r11.u64 = PPC_LOAD_U16(r11.u32 + ctx.r10.u32);
	// rotlwi r10,r11,1
	ctx.r10.u64 = rotl32(r11.u32, 1);
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r10,2,0,29
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r11,r9
	ctx.r9.u64 = r11.u64 + ctx.r9.u64;
	// stw r7,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r7.u32);
	// lwz r6,4(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// bl 0x82bdf220
	sub_82BDF220(ctx, base);
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be25e8
	sub_82BE25E8(ctx, base);
	// lbz r11,50(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// lwz r6,0(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r8,r11,85
	ctx.r8.s64 = r11.s64 + 85;
	// lwz r5,24(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// rlwinm r7,r8,1,0,30
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,24(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(24) );
	// lhzx r11,r7,r31
	r11.u64 = PPC_LOAD_U16(ctx.r7.u32 + r31.u32);
	// rotlwi r9,r11,1
	ctx.r9.u64 = rotl32(r11.u32, 1);
	// add r4,r11,r9
	ctx.r4.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r4,2,0,29
	r11.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r10
	ctx.r3.u64 = r11.u64 + ctx.r10.u64;
	// stw r5,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r5.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE10A0) {
	__imp__sub_82BE10A0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE11D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r29,0
	r29.s64 = 0;
loc_82BE11E4:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,285
	cr6.compare<int32_t>(r11.s32, 285, xer);
	// bne cr6,0x82be1250
	if (!cr6.eq) goto loc_82BE1250;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r28,16(r31)
	r28.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lbz r11,50(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// cmpwi cr6,r11,200
	cr6.compare<int32_t>(r11.s32, 200, xer);
	// bgt cr6,0x82be127c
	if (cr6.gt) goto loc_82BE127C;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdde38
	sub_82BDDE38(ctx, base);
	// lbz r11,50(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// add r11,r11,r29
	r11.u64 = r11.u64 + r29.u64;
	// addi r29,r29,1
	r29.s64 = r29.s64 + 1;
	// addi r9,r11,86
	ctx.r9.s64 = r11.s64 + 86;
	// rlwinm r8,r9,1,0,30
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 1) & 0xFFFFFFFE;
	// sthx r3,r8,r30
	PPC_STORE_U16(ctx.r8.u32 + r30.u32, ctx.r3.u16);
	// lwz r7,12(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r7,44
	cr6.compare<int32_t>(ctx.r7.s32, 44, xer);
	// bne cr6,0x82be1290
	if (!cr6.eq) goto loc_82BE1290;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// b 0x82be11e4
	goto loc_82BE11E4;
loc_82BE1250:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// addi r9,r11,1616
	ctx.r9.s64 = r11.s64 + 1616;
	// addi r4,r10,13404
	ctx.r4.s64 = ctx.r10.s64 + 13404;
	// lwz r5,112(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(112) );
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE127C:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r4,200
	ctx.r4.s64 = 200;
	// addi r5,r11,13568
	ctx.r5.s64 = r11.s64 + 13568;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bddc28
	sub_82BDDC28(ctx, base);
loc_82BE1290:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,61
	cr6.compare<int32_t>(r11.s32, 61, xer);
	// bne cr6,0x82be12b8
	if (!cr6.eq) goto loc_82BE12B8;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdf330
	sub_82BDF330(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// b 0x82be12c4
	goto loc_82BE12C4;
loc_82BE12B8:
	// li r11,0
	r11.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
loc_82BE12C4:
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bde318
	sub_82BDE318(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82a32768
	sub_82A32768(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE11D0) {
	__imp__sub_82BE11D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE12E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd8
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r25,0
	r25.s64 = 0;
	// bl 0x82bde2a8
	sub_82BDE2A8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,46
	cr6.compare<int32_t>(r11.s32, 46, xer);
	// bne cr6,0x82be1394
	if (!cr6.eq) goto loc_82BE1394;
	// li r27,4
	r27.s64 = 4;
	// li r28,-1
	r28.s64 = -1;
	// li r26,9
	r26.s64 = 9;
loc_82BE131C:
	// lwz r29,28(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,285
	cr6.compare<int32_t>(r11.s32, 285, xer);
	// bne cr6,0x82be13bc
	if (!cr6.eq) goto loc_82BE13BC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r24,16(r31)
	r24.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// stw r24,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r24.u32);
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// stw r28,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, r28.u32);
	// stw r28,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, r28.u32);
	// stw r27,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, r27.u32);
	// bl 0x82be1c40
	sub_82BE1C40(ctx, base);
	// stw r3,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r3.u32);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// stw r3,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r3.u32);
	// stw r26,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r26.u32);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,46
	cr6.compare<int32_t>(r11.s32, 46, xer);
	// beq cr6,0x82be131c
	if (cr6.eq) goto loc_82BE131C;
loc_82BE1394:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,58
	cr6.compare<int32_t>(r11.s32, 58, xer);
	// bne cr6,0x82be13b0
	if (!cr6.eq) goto loc_82BE13B0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// li r25,1
	r25.s64 = 1;
	// bl 0x82bdebd0
	sub_82BDEBD0(ctx, base);
loc_82BE13B0:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// b 0x82ca2c28
	return;
loc_82BE13BC:
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lwz r3,32(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// addi r9,r11,1616
	ctx.r9.s64 = r11.s64 + 1616;
	// addi r4,r10,13404
	ctx.r4.s64 = ctx.r10.s64 + 13404;
	// lwz r5,112(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(112) );
	// bl 0x82bc8870
	sub_82BC8870(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
}

PPC_WEAK_FUNC(sub_82BE12E8) {
	__imp__sub_82BE12E8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE13E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bl 0x82be0100
	sub_82BE0100(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82be14bc
	if (!cr6.eq) goto loc_82BE14BC;
	// cmpwi cr6,r10,59
	cr6.compare<int32_t>(ctx.r10.s32, 59, xer);
	// beq cr6,0x82be14bc
	if (cr6.eq) goto loc_82BE14BC;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdf330
	sub_82BDF330(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// beq cr6,0x82be146c
	if (cr6.eq) goto loc_82BE146C;
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// beq cr6,0x82be146c
	if (cr6.eq) goto loc_82BE146C;
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bne cr6,0x82be1460
	if (!cr6.eq) goto loc_82BE1460;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// b 0x82be14c4
	goto loc_82BE14C4;
loc_82BE1460:
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// lbz r3,50(r30)
	ctx.r3.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// b 0x82be14c4
	goto loc_82BE14C4;
loc_82BE146C:
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be1dd0
	sub_82BE1DD0(ctx, base);
	// lwz r11,80(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// bne cr6,0x82be14b0
	if (!cr6.eq) goto loc_82BE14B0;
	// cmpwi cr6,r31,1
	cr6.compare<int32_t>(r31.s32, 1, xer);
	// bne cr6,0x82be14b0
	if (!cr6.eq) goto loc_82BE14B0;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// li r9,29
	ctx.r9.s64 = 29;
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(84) );
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// lwzx r7,r11,r10
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// rlwimi r7,r9,0,26,31
	ctx.r7.u64 = (rotl32(ctx.r9.u32, 0) & 0x3F) | (ctx.r7.u64 & 0xFFFFFFFFFFFFFFC0);
	// stwx r7,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r7.u32);
loc_82BE14B0:
	// lbz r3,50(r30)
	ctx.r3.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// li r31,-1
	r31.s64 = -1;
	// b 0x82be14c4
	goto loc_82BE14C4;
loc_82BE14BC:
	// li r31,0
	r31.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BE14C4:
	// addi r11,r31,1
	r11.s64 = r31.s64 + 1;
	// lwz r10,12(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// rlwinm r9,r3,6,0,25
	ctx.r9.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0xFFFFFFC0;
	// rlwinm r8,r11,23,0,8
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0xFF800000;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// or r7,r8,r9
	ctx.r7.u64 = ctx.r8.u64 | ctx.r9.u64;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// ori r4,r7,30
	ctx.r4.u64 = ctx.r7.u64 | 30;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE13E8) {
	__imp__sub_82BE13E8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1500) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r30,4(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// addi r11,r11,-258
	r11.s64 = r11.s64 + -258;
	// cmplwi cr6,r11,19
	cr6.compare<uint32_t>(r11.u32, 19, xer);
	// bgt cr6,0x82be16ac
	if (cr6.gt) goto loc_82BE16AC;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,5444
	r12.s64 = r12.s64 + 5444;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BE1694;
	case 1:
		goto loc_82BE15B4;
	case 2:
		goto loc_82BE16AC;
	case 3:
		goto loc_82BE16AC;
	case 4:
		goto loc_82BE16AC;
	case 5:
		goto loc_82BE16AC;
	case 6:
		goto loc_82BE15DC;
	case 7:
		goto loc_82BE15FC;
	case 8:
		goto loc_82BE1594;
	case 9:
		goto loc_82BE16AC;
	case 10:
		goto loc_82BE1654;
	case 11:
		goto loc_82BE16AC;
	case 12:
		goto loc_82BE16AC;
	case 13:
		goto loc_82BE16AC;
	case 14:
		goto loc_82BE15EC;
	case 15:
		goto loc_82BE1684;
	case 16:
		goto loc_82BE16AC;
	case 17:
		goto loc_82BE16AC;
	case 18:
		goto loc_82BE16AC;
	case 19:
		goto loc_82BE15A4;
	default:
		__builtin_unreachable();
	}
	// lwz r21,5780(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5780) );
	// lwz r21,5556(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5556) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5596(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5596) );
	// lwz r21,5628(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5628) );
	// lwz r21,5524(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5524) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5716(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5716) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5612(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5612) );
	// lwz r21,5764(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5764) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5804(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5804) );
	// lwz r21,5540(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(5540) );
loc_82BE1594:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be0eb8
	sub_82BE0EB8(ctx, base);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE15A4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be0548
	sub_82BE0548(ctx, base);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE15B4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be01a8
	sub_82BE01A8(ctx, base);
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// li r5,259
	ctx.r5.s64 = 259;
	// li r4,262
	ctx.r4.s64 = 262;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bddd28
	sub_82BDDD28(ctx, base);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE15DC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be0d80
	sub_82BE0D80(ctx, base);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE15EC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be0648
	sub_82BE0648(ctx, base);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE15FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be12e8
	sub_82BE12E8(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r6,r30
	ctx.r6.u64 = r30.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdf220
	sub_82BDF220(ctx, base);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,28(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// bl 0x82be25e8
	sub_82BE25E8(ctx, base);
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r8,24(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,20(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(20) );
	// add r7,r10,r11
	ctx.r7.u64 = ctx.r10.u64 + r11.u64;
	// stw r30,-4(r7)
	PPC_STORE_U32(ctx.r7.u32 + -4, r30.u32);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE1654:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmpwi cr6,r11,265
	cr6.compare<int32_t>(r11.s32, 265, xer);
	// bne cr6,0x82be167c
	if (!cr6.eq) goto loc_82BE167C;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be10a0
	sub_82BE10A0(ctx, base);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE167C:
	// bl 0x82be11d0
	sub_82BE11D0(ctx, base);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE1684:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be13e8
	sub_82BE13E8(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82be1708
	goto loc_82BE1708;
loc_82BE1694:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be0498
	sub_82BE0498(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82be1708
	goto loc_82BE1708;
loc_82BE16AC:
	// addi r4,r1,116
	ctx.r4.s64 = ctx.r1.s64 + 116;
	// lwz r30,28(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bdf510
	sub_82BDF510(ctx, base);
	// lwz r11,116(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(116) );
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// bne cr6,0x82be16ec
	if (!cr6.eq) goto loc_82BE16EC;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// li r9,1
	ctx.r9.s64 = 1;
	// lwz r8,120(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(120) );
	// rlwinm r11,r8,2,0,29
	r11.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// lwzx r7,r11,r10
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// rlwimi r7,r9,14,9,17
	ctx.r7.u64 = (rotl32(ctx.r9.u32, 14) & 0x7FC000) | (ctx.r7.u64 & 0xFFFFFFFFFF803FFF);
	// stwx r7,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r7.u32);
	// b 0x82be1704
	goto loc_82BE1704;
loc_82BE16EC:
	// li r11,0
	r11.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r11.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be02f8
	sub_82BE02F8(ctx, base);
loc_82BE1704:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BE1708:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE1500) {
	__imp__sub_82BE1500(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1720) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bde440
	sub_82BDE440(ctx, base);
loc_82BE173C:
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// bl 0x82be0100
	sub_82BE0100(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82be1780
	if (!cr6.eq) goto loc_82BE1780;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1500
	sub_82BE1500(ctx, base);
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,59
	cr6.compare<int32_t>(r11.s32, 59, xer);
	// bne cr6,0x82be176c
	if (!cr6.eq) goto loc_82BE176C;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bcf7d8
	sub_82BCF7D8(ctx, base);
loc_82BE176C:
	// lwz r11,28(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// lbz r10,50(r11)
	ctx.r10.u64 = PPC_LOAD_U8(r11.u32 + 50);
	// stw r10,36(r11)
	PPC_STORE_U32(r11.u32 + 36, ctx.r10.u32);
	// beq cr6,0x82be173c
	if (cr6.eq) goto loc_82BE173C;
loc_82BE1780:
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lhz r10,52(r11)
	ctx.r10.u64 = PPC_LOAD_U16(r11.u32 + 52);
	// addis r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 65536;
	// addi r9,r9,-1
	ctx.r9.s64 = ctx.r9.s64 + -1;
	// sth r9,52(r11)
	PPC_STORE_U16(r11.u32 + 52, ctx.r9.u16);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE1720) {
	__imp__sub_82BE1720(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE17B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,24(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(24) );
	// mr r10,r4
	ctx.r10.u64 = ctx.r4.u64;
	// lwz r9,28(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(28) );
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82be17d8
	if (!cr6.gt) goto loc_82BE17D8;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82be17fc
	if (!cr6.eq) goto loc_82BE17FC;
	// lbz r11,50(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 50);
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bgelr cr6
	if (!cr6.lt) return;
loc_82BE17D8:
	// add r11,r10,r5
	r11.u64 = ctx.r10.u64 + ctx.r5.u64;
	// lwz r9,12(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// li r4,3
	ctx.r4.s64 = 3;
	// addi r8,r11,-1
	ctx.r8.s64 = r11.s64 + -1;
	// rlwinm r7,r8,17,0,14
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 17) & 0xFFFE0000;
	// lwz r5,8(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(8) );
	// or r6,r7,r10
	ctx.r6.u64 = ctx.r7.u64 | ctx.r10.u64;
	// rlwimi r4,r6,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r6.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// b 0x82be3410
	sub_82BE3410(ctx, base);
	return;
loc_82BE17FC:
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,12(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(12) );
	// add r8,r11,r9
	ctx.r8.u64 = r11.u64 + ctx.r9.u64;
	// lwz r11,-4(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(-4) );
	// clrlwi r7,r11,26
	ctx.r7.u64 = r11.u32 & 0x3F;
	// cmpwi cr6,r7,3
	cr6.compare<int32_t>(ctx.r7.s32, 3, xer);
	// bne cr6,0x82be17d8
	if (!cr6.eq) goto loc_82BE17D8;
	// rlwinm r7,r11,26,24,31
	ctx.r7.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0xFF;
	// rlwinm r9,r11,9,23,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 9) & 0x1FF;
	// cmpw cr6,r7,r10
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r10.s32, xer);
	// bgt cr6,0x82be17d8
	if (cr6.gt) goto loc_82BE17D8;
	// addi r7,r9,1
	ctx.r7.s64 = ctx.r9.s64 + 1;
	// cmpw cr6,r10,r7
	cr6.compare<int32_t>(ctx.r10.s32, ctx.r7.s32, xer);
	// bgt cr6,0x82be17d8
	if (cr6.gt) goto loc_82BE17D8;
	// add r10,r10,r5
	ctx.r10.u64 = ctx.r10.u64 + ctx.r5.u64;
	// addi r7,r10,-1
	ctx.r7.s64 = ctx.r10.s64 + -1;
	// cmpw cr6,r7,r9
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r9.s32, xer);
	// blelr cr6
	if (!cr6.gt) return;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// rlwimi r11,r10,23,0,8
	r11.u64 = (rotl32(ctx.r10.u32, 23) & 0xFF800000) | (r11.u64 & 0xFFFFFFFF007FFFFF);
	// stw r11,-4(r8)
	PPC_STORE_U32(ctx.r8.u32 + -4, r11.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE17B0) {
	__imp__sub_82BE17B0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1858) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r11,-1
	r11.s64 = -1;
	// lis r4,32767
	ctx.r4.s64 = 2147418112;
	// ori r4,r4,32790
	ctx.r4.u64 = ctx.r4.u64 | 32790;
	// lwz r30,32(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// stw r11,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r11.u32);
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// stw r3,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r3.u32);
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE1858) {
	__imp__sub_82BE1858(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE18C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmpwi cr6,r4,-1
	cr6.compare<int32_t>(ctx.r4.s32, -1, xer);
	// beq cr6,0x82be1944
	if (cr6.eq) goto loc_82BE1944;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lis r10,1
	ctx.r10.s64 = 65536;
	// ori r9,r10,65535
	ctx.r9.u64 = ctx.r10.u64 | 65535;
	// lwz r7,12(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r8,r11,220
	ctx.r8.s64 = r11.s64 + 220;
loc_82BE18E0:
	// rlwinm r11,r4,2,0,29
	r11.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r4,1
	cr6.compare<int32_t>(ctx.r4.s32, 1, xer);
	// add r11,r11,r7
	r11.u64 = r11.u64 + ctx.r7.u64;
	// blt cr6,0x82be190c
	if (cr6.lt) goto loc_82BE190C;
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// addi r10,r11,-4
	ctx.r10.s64 = r11.s64 + -4;
	// clrlwi r5,r6,26
	ctx.r5.u64 = ctx.r6.u32 & 0x3F;
	// lbzx r3,r5,r8
	ctx.r3.u64 = PPC_LOAD_U8(ctx.r5.u32 + ctx.r8.u32);
	// rlwinm r6,r3,0,0,24
	ctx.r6.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x82be1910
	if (!cr6.eq) goto loc_82BE1910;
loc_82BE190C:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_82BE1910:
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// clrlwi r6,r10,26
	ctx.r6.u64 = ctx.r10.u32 & 0x3F;
	// cmplwi cr6,r6,27
	cr6.compare<uint32_t>(ctx.r6.u32, 27, xer);
	// bne cr6,0x82be194c
	if (!cr6.eq) goto loc_82BE194C;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// rlwinm r10,r11,18,14,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 18) & 0x3FFFF;
	// subf r11,r9,r10
	r11.s64 = ctx.r10.s64 - ctx.r9.s64;
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beq cr6,0x82be1944
	if (cr6.eq) goto loc_82BE1944;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// cmpwi cr6,r4,-1
	cr6.compare<int32_t>(ctx.r4.s32, -1, xer);
	// bne cr6,0x82be18e0
	if (!cr6.eq) goto loc_82BE18E0;
loc_82BE1944:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_82BE194C:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE18C0) {
	__imp__sub_82BE18C0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1958) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// rlwinm r11,r4,2,0,29
	r11.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r4,1
	cr6.compare<int32_t>(ctx.r4.s32, 1, xer);
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// blt cr6,0x82be1994
	if (cr6.lt) goto loc_82BE1994;
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// lis r8,-32247
	ctx.r8.s64 = -2113339392;
	// addi r10,r11,-4
	ctx.r10.s64 = r11.s64 + -4;
	// addi r7,r8,220
	ctx.r7.s64 = ctx.r8.s64 + 220;
	// clrlwi r6,r9,26
	ctx.r6.u64 = ctx.r9.u32 & 0x3F;
	// lbzx r4,r6,r7
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r6.u32 + ctx.r7.u32);
	// rlwinm r3,r4,0,0,24
	ctx.r3.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be1998
	if (!cr6.eq) goto loc_82BE1998;
loc_82BE1994:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_82BE1998:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// clrlwi r9,r11,26
	ctx.r9.u64 = r11.u32 & 0x3F;
	// cmpwi cr6,r9,27
	cr6.compare<int32_t>(ctx.r9.s32, 27, xer);
	// beq cr6,0x82be19b0
	if (cr6.eq) goto loc_82BE19B0;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_82BE19B0:
	// cmpwi cr6,r5,255
	cr6.compare<int32_t>(ctx.r5.s32, 255, xer);
	// beq cr6,0x82be19d4
	if (cr6.eq) goto loc_82BE19D4;
	// rlwinm r9,r11,9,23,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 9) & 0x1FF;
	// cmpw cr6,r5,r9
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r9.s32, xer);
	// beq cr6,0x82be19d4
	if (cr6.eq) goto loc_82BE19D4;
	// rlwimi r11,r5,6,18,25
	r11.u64 = (rotl32(ctx.r5.u32, 6) & 0x3FC0) | (r11.u64 & 0xFFFFFFFFFFFFC03F);
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// blr 
	return;
loc_82BE19D4:
	// li r9,26
	ctx.r9.s64 = 26;
	// rlwinm r8,r11,0,9,17
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x7FC000;
	// rlwimi r9,r11,15,17,25
	ctx.r9.u64 = (rotl32(r11.u32, 15) & 0x7FC0) | (ctx.r9.u64 & 0xFFFFFFFFFFFF803F);
	// li r3,1
	ctx.r3.s64 = 1;
	// or r7,r9,r8
	ctx.r7.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE1958) {
	__imp__sub_82BE1958(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE19F0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmpwi cr6,r4,-1
	cr6.compare<int32_t>(ctx.r4.s32, -1, xer);
	// beqlr cr6
	if (cr6.eq) return;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// lis r10,1
	ctx.r10.s64 = 65536;
	// addi r7,r11,220
	ctx.r7.s64 = r11.s64 + 220;
	// ori r8,r10,65535
	ctx.r8.u64 = ctx.r10.u64 | 65535;
loc_82BE1A08:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// rlwinm r9,r4,2,0,29
	ctx.r9.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r4,1
	cr6.compare<int32_t>(ctx.r4.s32, 1, xer);
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// add r11,r11,r9
	r11.u64 = r11.u64 + ctx.r9.u64;
	// blt cr6,0x82be1a3c
	if (cr6.lt) goto loc_82BE1A3C;
	// lwz r6,-4(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// addi r10,r11,-4
	ctx.r10.s64 = r11.s64 + -4;
	// clrlwi r5,r6,26
	ctx.r5.u64 = ctx.r6.u32 & 0x3F;
	// lbzx r6,r5,r7
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r5.u32 + ctx.r7.u32);
	// rlwinm r5,r6,0,0,24
	ctx.r5.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82be1a40
	if (!cr6.eq) goto loc_82BE1A40;
loc_82BE1A3C:
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
loc_82BE1A40:
	// lwz r11,0(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// clrlwi r6,r11,26
	ctx.r6.u64 = r11.u32 & 0x3F;
	// cmpwi cr6,r6,27
	cr6.compare<int32_t>(ctx.r6.s32, 27, xer);
	// bne cr6,0x82be1a64
	if (!cr6.eq) goto loc_82BE1A64;
	// li r6,26
	ctx.r6.s64 = 26;
	// rlwinm r5,r11,0,9,17
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x7FC000;
	// rlwimi r6,r11,15,17,25
	ctx.r6.u64 = (rotl32(r11.u32, 15) & 0x7FC0) | (ctx.r6.u64 & 0xFFFFFFFFFFFF803F);
	// or r11,r6,r5
	r11.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
loc_82BE1A64:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// lwzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// rlwinm r6,r9,18,14,31
	ctx.r6.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 18) & 0x3FFFF;
	// subf r11,r8,r6
	r11.s64 = ctx.r6.s64 - ctx.r8.s64;
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// beqlr cr6
	if (cr6.eq) return;
	// add r11,r11,r4
	r11.u64 = r11.u64 + ctx.r4.u64;
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// cmpwi cr6,r4,-1
	cr6.compare<int32_t>(ctx.r4.s32, -1, xer);
	// bne cr6,0x82be1a08
	if (!cr6.eq) goto loc_82BE1A08;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE19F0) {
	__imp__sub_82BE19F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1A98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r5,r6
	ctx.r5.u64 = ctx.r6.u64;
	// mr r25,r7
	r25.u64 = ctx.r7.u64;
	// cmpwi cr6,r30,-1
	cr6.compare<int32_t>(r30.s32, -1, xer);
	// beq cr6,0x82be1b7c
	if (cr6.eq) goto loc_82BE1B7C;
	// lis r11,1
	r11.s64 = 65536;
	// ori r31,r11,65535
	r31.u64 = r11.u64 | 65535;
loc_82BE1AC8:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// rlwinm r28,r30,2,0,29
	r28.u64 = rotl64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,12(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// lwzx r9,r10,r28
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// rlwinm r8,r9,18,14,31
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 18) & 0x3FFFF;
	// subf r11,r31,r8
	r11.s64 = ctx.r8.s64 - r31.s64;
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82be1af0
	if (!cr6.eq) goto loc_82BE1AF0;
	// li r27,-1
	r27.s64 = -1;
	// b 0x82be1af8
	goto loc_82BE1AF8;
loc_82BE1AF0:
	// add r11,r11,r30
	r11.u64 = r11.u64 + r30.u64;
	// addi r27,r11,1
	r27.s64 = r11.s64 + 1;
loc_82BE1AF8:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be1958
	sub_82BE1958(ctx, base);
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// beq cr6,0x82be1b44
	if (cr6.eq) goto loc_82BE1B44;
	// subf r11,r30,r26
	r11.s64 = r26.s64 - r30.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// srawi r9,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 31;
	// xor r8,r11,r9
	ctx.r8.u64 = r11.u64 ^ ctx.r9.u64;
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// cmpw cr6,r7,r31
	cr6.compare<int32_t>(ctx.r7.s32, r31.s32, xer);
	// ble cr6,0x82be1b60
	if (!cr6.gt) goto loc_82BE1B60;
	// lwz r3,12(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14160
	ctx.r4.s64 = r11.s64 + 14160;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE1B44:
	// subf r11,r30,r25
	r11.s64 = r25.s64 - r30.s64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// srawi r9,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r9.s64 = r11.s32 >> 31;
	// xor r8,r11,r9
	ctx.r8.u64 = r11.u64 ^ ctx.r9.u64;
	// subf r7,r9,r8
	ctx.r7.s64 = ctx.r8.s64 - ctx.r9.s64;
	// cmpw cr6,r7,r31
	cr6.compare<int32_t>(ctx.r7.s32, r31.s32, xer);
	// bgt cr6,0x82be1b84
	if (cr6.gt) goto loc_82BE1B84;
loc_82BE1B60:
	// lwzx r9,r10,r28
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + r28.u32);
	// add r8,r11,r31
	ctx.r8.u64 = r11.u64 + r31.u64;
	// mr r30,r27
	r30.u64 = r27.u64;
	// rlwimi r9,r8,14,0,17
	ctx.r9.u64 = (rotl32(ctx.r8.u32, 14) & 0xFFFFC000) | (ctx.r9.u64 & 0xFFFFFFFF00003FFF);
	// cmpwi cr6,r27,-1
	cr6.compare<int32_t>(r27.s32, -1, xer);
	// stwx r9,r10,r28
	PPC_STORE_U32(ctx.r10.u32 + r28.u32, ctx.r9.u32);
	// bne cr6,0x82be1ac8
	if (!cr6.eq) goto loc_82BE1AC8;
loc_82BE1B7C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c2c
	return;
loc_82BE1B84:
	// lwz r3,12(r29)
	ctx.r3.u64 = PPC_LOAD_U32(r29.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14160
	ctx.r4.s64 = r11.s64 + 14160;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
}

PPC_WEAK_FUNC(sub_82BE1A98) {
	__imp__sub_82BE1A98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1B98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// cmpwi cr6,r5,-1
	cr6.compare<int32_t>(ctx.r5.s32, -1, xer);
	// beqlr cr6
	if (cr6.eq) return;
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82be1bb4
	if (!cr6.eq) goto loc_82BE1BB4;
	// stw r5,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r5.u32);
	// blr 
	return;
loc_82BE1BB4:
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lwz r7,12(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// lis r10,1
	ctx.r10.s64 = 65536;
	// ori r9,r10,65535
	ctx.r9.u64 = ctx.r10.u64 | 65535;
loc_82BE1BC4:
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r8,r10,r7
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r7.u32);
	// rlwinm r6,r8,18,14,31
	ctx.r6.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 18) & 0x3FFFF;
	// subf r10,r9,r6
	ctx.r10.s64 = ctx.r6.s64 - ctx.r9.s64;
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// beq cr6,0x82be1bf4
	if (cr6.eq) goto loc_82BE1BF4;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,-1
	cr6.compare<int32_t>(ctx.r10.s32, -1, xer);
	// beq cr6,0x82be1bf4
	if (cr6.eq) goto loc_82BE1BF4;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// b 0x82be1bc4
	goto loc_82BE1BC4;
loc_82BE1BF4:
	// subf r8,r11,r5
	ctx.r8.s64 = ctx.r5.s64 - r11.s64;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r8,-1
	r11.s64 = ctx.r8.s64 + -1;
	// srawi r8,r11,31
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFFF) != 0);
	ctx.r8.s64 = r11.s32 >> 31;
	// xor r6,r11,r8
	ctx.r6.u64 = r11.u64 ^ ctx.r8.u64;
	// subf r5,r8,r6
	ctx.r5.s64 = ctx.r6.s64 - ctx.r8.s64;
	// cmpw cr6,r5,r9
	cr6.compare<int32_t>(ctx.r5.s32, ctx.r9.s32, xer);
	// ble cr6,0x82be1c28
	if (!cr6.gt) goto loc_82BE1C28;
	// lwz r3,12(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14160
	ctx.r4.s64 = r11.s64 + 14160;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// b 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
	return;
loc_82BE1C28:
	// lwzx r8,r10,r7
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r7.u32);
	// add r6,r11,r9
	ctx.r6.u64 = r11.u64 + ctx.r9.u64;
	// rlwimi r8,r6,14,0,17
	ctx.r8.u64 = (rotl32(ctx.r6.u32, 14) & 0xFFFFC000) | (ctx.r8.u64 & 0xFFFFFFFF00003FFF);
	// stwx r8,r10,r7
	PPC_STORE_U32(ctx.r10.u32 + ctx.r7.u32, ctx.r8.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE1B98) {
	__imp__sub_82BE1B98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1C40) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// lwz r26,16(r28)
	r26.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// lwz r4,4(r28)
	ctx.r4.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x8229a488
	sub_8229A488(ctx, base);
	// lwz r29,0(r28)
	r29.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lwz r11,4(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// addi r30,r29,40
	r30.s64 = r29.s64 + 40;
	// cmpwi cr6,r11,3
	cr6.compare<int32_t>(r11.s32, 3, xer);
	// lwz r31,40(r29)
	r31.u64 = PPC_LOAD_U32(r29.u32 + int32_t(40) );
	// bne cr6,0x82be1c98
	if (!cr6.eq) goto loc_82BE1C98;
	// lfs f0,0(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	f0.f64 = double(temp.f32);
	// fctiwz f13,f0
	ctx.f13.u64 = uint64_t(int32_t(std::trunc(f0.f64)));
	// stfd f13,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f13.u64);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(84) );
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c30
	return;
loc_82BE1C98:
	// lwz r11,40(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(40) );
	// li r10,3
	ctx.r10.s64 = 3;
	// extsw r9,r11
	ctx.r9.s64 = r11.s32;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(f0.s64);
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// stfs f12,0(r3)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r3.u32 + 0, temp.u32);
	// lwz r8,0(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// lwz r11,40(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(40) );
	// addi r7,r11,1
	ctx.r7.s64 = r11.s64 + 1;
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// ble cr6,0x82be1cf8
	if (!cr6.gt) goto loc_82BE1CF8;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lwz r4,8(r29)
	ctx.r4.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// lis r7,3
	ctx.r7.s64 = 196608;
	// addi r8,r11,13632
	ctx.r8.s64 = r11.s64 + 13632;
	// ori r7,r7,65535
	ctx.r7.u64 = ctx.r7.u64 | 65535;
	// li r6,8
	ctx.r6.s64 = 8;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82bcf850
	sub_82BCF850(ctx, base);
	// stw r3,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r3.u32);
loc_82BE1CF8:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpw cr6,r31,r11
	cr6.compare<int32_t>(r31.s32, r11.s32, xer);
	// bge cr6,0x82be1d2c
	if (!cr6.lt) goto loc_82BE1D2C;
	// rlwinm r11,r31,3,0,28
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 3) & 0xFFFFFFF8;
	// li r9,0
	ctx.r9.s64 = 0;
loc_82BE1D0C:
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// addi r31,r31,1
	r31.s64 = r31.s64 + 1;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r8,0(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpw cr6,r31,r8
	cr6.compare<int32_t>(r31.s32, ctx.r8.s32, xer);
	// blt cr6,0x82be1d0c
	if (cr6.lt) goto loc_82BE1D0C;
loc_82BE1D2C:
	// lwz r11,40(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(40) );
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r11,r11,3,0,28
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwz r9,0(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r27)
	ctx.r8.u64 = PPC_LOAD_U32(r27.u32 + int32_t(4) );
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lwz r7,4(r27)
	ctx.r7.u64 = PPC_LOAD_U32(r27.u32 + int32_t(4) );
	// cmpwi cr6,r7,4
	cr6.compare<int32_t>(ctx.r7.s32, 4, xer);
	// blt cr6,0x82be1db8
	if (cr6.lt) goto loc_82BE1DB8;
	// lwz r4,0(r27)
	ctx.r4.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// lbz r11,5(r4)
	r11.u64 = PPC_LOAD_U8(ctx.r4.u32 + 5);
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be1db8
	if (cr6.eq) goto loc_82BE1DB8;
	// lbz r11,5(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 5);
	// rlwinm r10,r11,0,29,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be1db8
	if (cr6.eq) goto loc_82BE1DB8;
	// lwz r3,16(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + int32_t(16) );
	// lbz r10,21(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 21);
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// bne cr6,0x82be1da4
	if (!cr6.eq) goto loc_82BE1DA4;
	// bl 0x82bca7d8
	sub_82BCA7D8(ctx, base);
	// lwz r3,40(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(40) );
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// stw r11,40(r28)
	PPC_STORE_U32(r28.u32 + 40, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c30
	return;
loc_82BE1DA4:
	// lbz r10,20(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 20);
	// rlwimi r10,r11,0,24,28
	ctx.r10.u64 = (rotl32(r11.u32, 0) & 0xF8) | (ctx.r10.u64 & 0xFFFFFFFFFFFFFF07);
	// clrlwi r9,r10,24
	ctx.r9.u64 = ctx.r10.u32 & 0xFF;
	// rlwinm r9,r9,0,30,28
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFB;
	// stb r9,5(r29)
	PPC_STORE_U8(r29.u32 + 5, ctx.r9.u8);
loc_82BE1DB8:
	// lwz r3,40(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(40) );
	// addi r11,r3,1
	r11.s64 = ctx.r3.s64 + 1;
	// stw r11,40(r28)
	PPC_STORE_U32(r28.u32 + 40, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BE1C40) {
	__imp__sub_82BE1C40(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1DD0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// bne cr6,0x82be1e00
	if (!cr6.eq) goto loc_82BE1E00;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// addi r9,r5,1
	ctx.r9.s64 = ctx.r5.s64 + 1;
	// lwz r8,4(r4)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// lwzx r7,r10,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwimi r7,r9,14,9,17
	ctx.r7.u64 = (rotl32(ctx.r9.u32, 14) & 0x7FC000) | (ctx.r7.u64 & 0xFFFFFFFFFF803FFF);
	// stwx r7,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r7.u32);
	// blr 
	return;
loc_82BE1E00:
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// bnelr cr6
	if (!cr6.eq) return;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// addi r9,r5,1
	ctx.r9.s64 = ctx.r5.s64 + 1;
	// lwz r8,4(r4)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r11,12(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// lwzx r7,r10,r11
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// rlwimi r7,r9,23,0,8
	ctx.r7.u64 = (rotl32(ctx.r9.u32, 23) & 0xFF800000) | (ctx.r7.u64 & 0xFFFFFFFF007FFFFF);
	// stwx r7,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r7.u32);
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lbz r5,39(r3)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r3.u32 + 39);
	// lwz r4,4(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// rlwinm r11,r4,2,0,29
	r11.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,12(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(12) );
	// rotlwi r9,r5,6
	ctx.r9.u64 = rotl32(ctx.r5.u32, 6);
	// lwzx r8,r11,r10
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// rlwinm r7,r8,0,26,17
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFFFFFFFC03F;
	// or r6,r9,r7
	ctx.r6.u64 = ctx.r9.u64 | ctx.r7.u64;
	// stwx r6,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r6.u32);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lwz r11,36(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lbz r5,75(r10)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r5
	cr6.compare<int32_t>(r11.s32, ctx.r5.s32, xer);
	// ble cr6,0x82be1e88
	if (!cr6.gt) goto loc_82BE1E88;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be1e84
	if (cr6.lt) goto loc_82BE1E84;
	// lwz r3,12(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// b 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
	return;
loc_82BE1E84:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE1E88:
	// lwz r11,36(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE1DD0) {
	__imp__sub_82BE1DD0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1E98) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,0(r4)
	r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// cmpwi cr6,r11,13
	cr6.compare<int32_t>(r11.s32, 13, xer);
	// bne cr6,0x82be1ecc
	if (!cr6.eq) goto loc_82BE1ECC;
	// li r11,12
	r11.s64 = 12;
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// stw r11,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, r11.u32);
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lwz r7,12(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(12) );
	// lwzx r6,r9,r7
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r7.u32);
	// rlwinm r5,r6,26,24,31
	ctx.r5.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 26) & 0xFF;
	// stw r5,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r5.u32);
	// blr 
	return;
loc_82BE1ECC:
	// cmpwi cr6,r11,14
	cr6.compare<int32_t>(r11.s32, 14, xer);
	// bnelr cr6
	if (!cr6.eq) return;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// li r9,1
	ctx.r9.s64 = 1;
	// lwz r8,4(r4)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// li r7,11
	ctx.r7.s64 = 11;
	// rlwinm r11,r8,2,0,29
	r11.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// rlwimi r6,r9,24,0,8
	ctx.r6.u64 = (rotl32(ctx.r9.u32, 24) & 0xFF800000) | (ctx.r6.u64 & 0xFFFFFFFF007FFFFF);
	// stwx r6,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r6.u32);
	// stw r7,0(r4)
	PPC_STORE_U32(ctx.r4.u32 + 0, ctx.r7.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE1E98) {
	__imp__sub_82BE1E98(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE1F00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r11,r11,-6
	r11.s64 = r11.s64 + -6;
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bgt cr6,0x82be2088
	if (cr6.gt) goto loc_82BE2088;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,7996
	r12.s64 = r12.s64 + 7996;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BE1F60;
	case 1:
		goto loc_82BE1F7C;
	case 2:
		goto loc_82BE1FB4;
	case 3:
		goto loc_82BE1FEC;
	case 4:
		goto loc_82BE2088;
	case 5:
		goto loc_82BE2088;
	case 6:
		goto loc_82BE2088;
	case 7:
		goto loc_82BE2080;
	case 8:
		goto loc_82BE2080;
	default:
		__builtin_unreachable();
	}
	// lwz r21,8032(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8032) );
	// lwz r21,8060(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8060) );
	// lwz r21,8116(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8116) );
	// lwz r21,8172(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8172) );
	// lwz r21,8328(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8328) );
	// lwz r21,8328(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8328) );
	// lwz r21,8328(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8328) );
	// lwz r21,8320(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8320) );
	// lwz r21,8320(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8320) );
loc_82BE1F60:
	// li r11,12
	r11.s64 = 12;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE1F7C:
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// li r4,4
	ctx.r4.s64 = 4;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwimi r4,r11,23,0,8
	ctx.r4.u64 = (rotl32(r11.u32, 23) & 0xFF800000) | (ctx.r4.u64 & 0xFFFFFFFF007FFFFF);
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r9,11
	ctx.r9.s64 = 11;
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE1FB4:
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// li r4,5
	ctx.r4.s64 = 5;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwimi r4,r11,14,0,17
	ctx.r4.u64 = (rotl32(r11.u32, 14) & 0xFFFFC000) | (ctx.r4.u64 & 0xFFFFFFFF00003FFF);
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r9,11
	ctx.r9.s64 = 11;
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE1FEC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be2014
	if (!cr6.eq) goto loc_82BE2014;
	// lbz r10,50(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be2014
	if (cr6.lt) goto loc_82BE2014;
	// lwz r11,36(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
loc_82BE2014:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be203c
	if (!cr6.eq) goto loc_82BE203C;
	// lbz r10,50(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be203c
	if (cr6.lt) goto loc_82BE203C;
	// lwz r11,36(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r3)
	PPC_STORE_U32(ctx.r3.u32 + 36, r11.u32);
loc_82BE203C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// li r4,6
	ctx.r4.s64 = 6;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r9,r11,9,0,22
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 9) & 0xFFFFFE00;
	// lwz r7,12(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// or r8,r9,r10
	ctx.r8.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rlwimi r4,r8,14,0,17
	ctx.r4.u64 = (rotl32(ctx.r8.u32, 14) & 0xFFFFC000) | (ctx.r4.u64 & 0xFFFFFFFF00003FFF);
	// lwz r5,8(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r6,11
	ctx.r6.s64 = 11;
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// stw r6,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r6.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE2080:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// bl 0x82be1e98
	sub_82BE1E98(ctx, base);
loc_82BE2088:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE1F00) {
	__imp__sub_82BE1F00(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE20A0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// cmplwi cr6,r10,11
	cr6.compare<uint32_t>(ctx.r10.u32, 11, xer);
	// bgt cr6,0x82be220c
	if (cr6.gt) goto loc_82BE220C;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,8420
	r12.s64 = r12.s64 + 8420;
	// rlwinm r0,r10,2,0,29
	r0.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_82BE2114;
	case 1:
		goto loc_82BE2138;
	case 2:
		goto loc_82BE2138;
	case 3:
		goto loc_82BE2154;
	case 4:
		goto loc_82BE216C;
	case 5:
		goto loc_82BE220C;
	case 6:
		goto loc_82BE220C;
	case 7:
		goto loc_82BE220C;
	case 8:
		goto loc_82BE220C;
	case 9:
		goto loc_82BE220C;
	case 10:
		goto loc_82BE21A8;
	case 11:
		goto loc_82BE21D8;
	default:
		__builtin_unreachable();
	}
	// lwz r21,8468(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8468) );
	// lwz r21,8504(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8504) );
	// lwz r21,8504(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8504) );
	// lwz r21,8532(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8532) );
	// lwz r21,8556(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8556) );
	// lwz r21,8716(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8716) );
	// lwz r21,8716(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8716) );
	// lwz r21,8716(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8716) );
	// lwz r21,8716(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8716) );
	// lwz r21,8716(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8716) );
	// lwz r21,8616(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8616) );
	// lwz r21,8664(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8664) );
loc_82BE2114:
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be17b0
	sub_82BE17B0(ctx, base);
	// li r11,12
	r11.s64 = 12;
	// stw r30,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r30.u32);
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
loc_82BE2138:
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// li r4,2
	ctx.r4.s64 = 2;
	// cntlzw r9,r11
	ctx.r9.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r8,r9,12,14,14
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 12) & 0x20000;
	// or r7,r8,r30
	ctx.r7.u64 = ctx.r8.u64 | r30.u64;
	// rlwimi r4,r7,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r7.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// b 0x82be21f0
	goto loc_82BE21F0;
loc_82BE2154:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// li r4,1
	ctx.r4.s64 = 1;
	// rlwinm r9,r11,8,0,23
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r8,r9,r30
	ctx.r8.u64 = ctx.r9.u64 | r30.u64;
	// rlwimi r4,r8,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r8.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// b 0x82be21f0
	goto loc_82BE21F0;
loc_82BE216C:
	// li r11,3
	r11.s64 = 3;
	// lfs f0,4(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1c40
	sub_82BE1C40(ctx, base);
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// rlwinm r10,r3,8,0,23
	ctx.r10.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 8) & 0xFFFFFF00;
	// li r4,1
	ctx.r4.s64 = 1;
	// or r8,r10,r30
	ctx.r8.u64 = ctx.r10.u64 | r30.u64;
	// lwz r5,8(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(8) );
	// rlwimi r4,r8,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r8.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// b 0x82be21f8
	goto loc_82BE21F8;
loc_82BE21A8:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r9,4(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm r11,r9,2,0,29
	r11.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// lwzx r8,r11,r10
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// rlwimi r8,r30,6,18,25
	ctx.r8.u64 = (rotl32(r30.u32, 6) & 0x3FC0) | (ctx.r8.u64 & 0xFFFFFFFFFFFFC03F);
	// stwx r8,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r8.u32);
	// li r11,12
	r11.s64 = 12;
	// stw r30,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r30.u32);
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
loc_82BE21D8:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// cmpw cr6,r30,r11
	cr6.compare<int32_t>(r30.s32, r11.s32, xer);
	// beq cr6,0x82be2200
	if (cr6.eq) goto loc_82BE2200;
	// rlwinm r11,r11,17,0,14
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// or r9,r11,r30
	ctx.r9.u64 = r11.u64 | r30.u64;
	// rlwinm r4,r9,6,0,25
	ctx.r4.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 6) & 0xFFFFFFC0;
loc_82BE21F0:
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
loc_82BE21F8:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
loc_82BE2200:
	// li r11,12
	r11.s64 = 12;
	// stw r30,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r30.u32);
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
loc_82BE220C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE20A0) {
	__imp__sub_82BE20A0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2218) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// bl 0x82be20a0
	sub_82BE20A0(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x82be2250
	if (!cr6.eq) goto loc_82BE2250;
	// addi r4,r30,12
	ctx.r4.s64 = r30.s64 + 12;
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
loc_82BE2250:
	// lwz r27,16(r30)
	r27.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// li r25,-1
	r25.s64 = -1;
	// lwz r4,12(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// cmpw cr6,r4,r27
	cr6.compare<int32_t>(ctx.r4.s32, r27.s32, xer);
	// beq cr6,0x82be2348
	if (cr6.eq) goto loc_82BE2348;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r29,r25
	r29.u64 = r25.u64;
	// mr r28,r25
	r28.u64 = r25.u64;
	// bl 0x82be18c0
	sub_82BE18C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82be2290
	if (!cr6.eq) goto loc_82BE2290;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be18c0
	sub_82BE18C0(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82be2310
	if (cr6.eq) goto loc_82BE2310;
loc_82BE2290:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,10
	cr6.compare<int32_t>(r11.s32, 10, xer);
	// bne cr6,0x82be22a4
	if (!cr6.eq) goto loc_82BE22A4;
	// mr r27,r25
	r27.u64 = r25.u64;
	// b 0x82be22b0
	goto loc_82BE22B0;
loc_82BE22A4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
loc_82BE22B0:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// rlwinm r29,r26,6,0,25
	r29.u64 = rotl64(r26.u32 | (r26.u64 << 32), 6) & 0xFFFFFFC0;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// ori r4,r29,16386
	ctx.r4.u64 = r29.u64 | 16386;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lwz r9,24(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// stw r9,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r9.u32);
	// oris r4,r29,128
	ctx.r4.u64 = r29.u64 | 8388608;
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// ori r4,r4,2
	ctx.r4.u64 = ctx.r4.u64 | 2;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,8(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lwz r7,24(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// stw r7,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r7.u32);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
loc_82BE2310:
	// lwz r27,24(r31)
	r27.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// mr r7,r29
	ctx.r7.u64 = r29.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// stw r27,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r27.u32);
	// lwz r4,16(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// bl 0x82be1a98
	sub_82BE1A98(ctx, base);
	// mr r7,r28
	ctx.r7.u64 = r28.u64;
	// mr r6,r26
	ctx.r6.u64 = r26.u64;
	// lwz r4,12(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1a98
	sub_82BE1A98(ctx, base);
loc_82BE2348:
	// li r11,12
	r11.s64 = 12;
	// stw r26,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r26.u32);
	// stw r25,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r25.u32);
	// stw r25,16(r30)
	PPC_STORE_U32(r30.u32 + 16, r25.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c2c
	return;
}

PPC_WEAK_FUNC(sub_82BE2218) {
	__imp__sub_82BE2218(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2368) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be23bc
	if (!cr6.eq) goto loc_82BE23BC;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be23bc
	if (!cr6.eq) goto loc_82BE23BC;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be23bc
	if (cr6.lt) goto loc_82BE23BC;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE23BC:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lbz r9,75(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82be23f4
	if (!cr6.gt) goto loc_82BE23F4;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be23f0
	if (cr6.lt) goto loc_82BE23F0;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE23F0:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE23F4:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// bl 0x82be2218
	sub_82BE2218(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE2368) {
	__imp__sub_82BE2368(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2428) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be2484
	if (!cr6.eq) goto loc_82BE2484;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x82be2490
	if (cr6.eq) goto loc_82BE2490;
	// lbz r11,50(r30)
	r11.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmpw cr6,r5,r11
	cr6.compare<int32_t>(ctx.r5.s32, r11.s32, xer);
	// blt cr6,0x82be2484
	if (cr6.lt) goto loc_82BE2484;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2218
	sub_82BE2218(ctx, base);
	// b 0x82be2490
	goto loc_82BE2490;
loc_82BE2484:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
loc_82BE2490:
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE2428) {
	__imp__sub_82BE2428(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE24B0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x82be24e4
	if (cr6.eq) goto loc_82BE24E4;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// b 0x82be24e8
	goto loc_82BE24E8;
loc_82BE24E4:
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
loc_82BE24E8:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bgt cr6,0x82be25c4
	if (cr6.gt) goto loc_82BE25C4;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,9488
	r12.s64 = r12.s64 + 9488;
	// rlwinm r0,r10,2,0,29
	r0.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_82BE2524;
	case 1:
		goto loc_82BE2524;
	case 2:
		goto loc_82BE2524;
	case 3:
		goto loc_82BE25B0;
	case 4:
		goto loc_82BE2524;
	default:
		__builtin_unreachable();
	}
	// lwz r21,9508(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9508) );
	// lwz r21,9508(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9508) );
	// lwz r21,9508(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9508) );
	// lwz r21,9648(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9648) );
	// lwz r21,9508(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9508) );
loc_82BE2524:
	// lwz r10,40(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(40) );
	// cmpwi cr6,r10,255
	cr6.compare<int32_t>(ctx.r10.s32, 255, xer);
	// bgt cr6,0x82be25c4
	if (cr6.gt) goto loc_82BE25C4;
	// cmpwi cr6,r11,1
	cr6.compare<int32_t>(r11.s32, 1, xer);
	// bne cr6,0x82be2558
	if (!cr6.eq) goto loc_82BE2558;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// li r10,0
	ctx.r10.s64 = 0;
	// li r9,5
	ctx.r9.s64 = 5;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// b 0x82be2590
	goto loc_82BE2590;
loc_82BE2558:
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// bne cr6,0x82be2578
	if (!cr6.eq) goto loc_82BE2578;
	// li r11,3
	r11.s64 = 3;
	// lfs f0,4(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// b 0x82be2590
	goto loc_82BE2590;
loc_82BE2578:
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// li r10,1
	ctx.r10.s64 = 1;
	// cntlzw r9,r11
	ctx.r9.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// stw r10,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r10.u32);
	// rlwinm r8,r9,27,31,31
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// stw r8,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r8.u32);
loc_82BE2590:
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be1c40
	sub_82BE1C40(ctx, base);
	// li r11,4
	r11.s64 = 4;
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// ori r3,r3,256
	ctx.r3.u64 = ctx.r3.u64 | 256;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// b 0x82be25d0
	goto loc_82BE25D0;
loc_82BE25B0:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmpwi cr6,r11,255
	cr6.compare<int32_t>(r11.s32, 255, xer);
	// bgt cr6,0x82be25c4
	if (cr6.gt) goto loc_82BE25C4;
	// ori r3,r11,256
	ctx.r3.u64 = r11.u64 | 256;
	// b 0x82be25d0
	goto loc_82BE25D0;
loc_82BE25C4:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
loc_82BE25D0:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE24B0) {
	__imp__sub_82BE24B0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE25E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r5
	r30.u64 = ctx.r5.u64;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// addi r11,r11,-6
	r11.s64 = r11.s64 + -6;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// bgt cr6,0x82be2718
	if (cr6.gt) goto loc_82BE2718;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,9768
	r12.s64 = r12.s64 + 9768;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BE2638;
	case 1:
		goto loc_82BE2684;
	case 2:
		goto loc_82BE26B0;
	case 3:
		goto loc_82BE26DC;
	default:
		__builtin_unreachable();
	}
	// lwz r21,9784(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9784) );
	// lwz r21,9860(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9860) );
	// lwz r21,9904(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9904) );
	// lwz r21,9948(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(9948) );
loc_82BE2638:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be266c
	if (!cr6.eq) goto loc_82BE266C;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be266c
	if (!cr6.eq) goto loc_82BE266C;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be266c
	if (cr6.lt) goto loc_82BE266C;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE266C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r5,4(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2218
	sub_82BE2218(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE2684:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// li r4,8
	ctx.r4.s64 = 8;
	// rlwinm r9,r11,17,0,14
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 17) & 0xFFFE0000;
	// or r8,r9,r3
	ctx.r8.u64 = ctx.r9.u64 | ctx.r3.u64;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// rlwimi r4,r8,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r8.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// b 0x82be2710
	goto loc_82BE2710;
loc_82BE26B0:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// li r4,7
	ctx.r4.s64 = 7;
	// rlwinm r9,r11,8,0,23
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r8,r9,r3
	ctx.r8.u64 = ctx.r9.u64 | ctx.r3.u64;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// rlwimi r4,r8,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r8.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// b 0x82be2710
	goto loc_82BE2710;
loc_82BE26DC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// li r4,9
	ctx.r4.s64 = 9;
	// rlwinm r9,r11,9,0,22
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 9) & 0xFFFFFE00;
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// or r7,r9,r3
	ctx.r7.u64 = ctx.r9.u64 | ctx.r3.u64;
	// rlwinm r6,r7,8,0,23
	ctx.r6.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 8) & 0xFFFFFF00;
	// lwz r5,8(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(8) );
	// or r11,r6,r10
	r11.u64 = ctx.r6.u64 | ctx.r10.u64;
	// rlwimi r4,r11,6,0,25
	ctx.r4.u64 = (rotl32(r11.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
loc_82BE2710:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
loc_82BE2718:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be274c
	if (!cr6.eq) goto loc_82BE274C;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be274c
	if (!cr6.eq) goto loc_82BE274C;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be274c
	if (cr6.lt) goto loc_82BE274C;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE274C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE25E8) {
	__imp__sub_82BE25E8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2758) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r28,r5
	r28.u64 = ctx.r5.u64;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be27a8
	if (!cr6.eq) goto loc_82BE27A8;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be27a8
	if (!cr6.eq) goto loc_82BE27A8;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be27a8
	if (cr6.lt) goto loc_82BE27A8;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE27A8:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r30,36(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r30,2
	r11.s64 = r30.s64 + 2;
	// lbz r9,75(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82be27e0
	if (!cr6.gt) goto loc_82BE27E0;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be27dc
	if (cr6.lt) goto loc_82BE27DC;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE27DC:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE27E0:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,2
	r11.s64 = r11.s64 + 2;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// li r4,11
	ctx.r4.s64 = 11;
	// rlwinm r8,r10,9,0,22
	ctx.r8.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 9) & 0xFFFFFE00;
	// or r7,r8,r3
	ctx.r7.u64 = ctx.r8.u64 | ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r6,r7,8,0,23
	ctx.r6.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 8) & 0xFFFFFF00;
	// lwz r5,8(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(8) );
	// or r11,r6,r30
	r11.u64 = ctx.r6.u64 | r30.u64;
	// rlwimi r4,r11,6,0,25
	ctx.r4.u64 = (rotl32(r11.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// cmpwi cr6,r10,12
	cr6.compare<int32_t>(ctx.r10.s32, 12, xer);
	// bne cr6,0x82be2858
	if (!cr6.eq) goto loc_82BE2858;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be2858
	if (!cr6.eq) goto loc_82BE2858;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be2858
	if (cr6.lt) goto loc_82BE2858;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE2858:
	// li r11,12
	r11.s64 = 12;
	// stw r30,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r30.u32);
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE2758) {
	__imp__sub_82BE2758(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2870) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lwz r9,4(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// rlwinm r11,r9,2,0,29
	r11.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// cmpwi cr6,r9,1
	cr6.compare<int32_t>(ctx.r9.s32, 1, xer);
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// blt cr6,0x82be28b4
	if (cr6.lt) goto loc_82BE28B4;
	// lwz r9,-4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-4) );
	// lis r8,-32247
	ctx.r8.s64 = -2113339392;
	// addi r10,r11,-4
	ctx.r10.s64 = r11.s64 + -4;
	// addi r7,r8,220
	ctx.r7.s64 = ctx.r8.s64 + 220;
	// clrlwi r6,r9,26
	ctx.r6.u64 = ctx.r9.u32 & 0x3F;
	// lbzx r5,r6,r7
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r6.u32 + ctx.r7.u32);
	// rlwinm r4,r5,0,0,24
	ctx.r4.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0xFFFFFF80;
	// cmplwi cr6,r4,0
	cr6.compare<uint32_t>(ctx.r4.u32, 0, xer);
	// beq cr6,0x82be28b4
	if (cr6.eq) goto loc_82BE28B4;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
loc_82BE28B4:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// rlwinm r9,r10,0,18,25
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x3FC0;
	// cntlzw r8,r9
	ctx.r8.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// rlwinm r7,r8,27,31,31
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x1;
	// rlwimi r10,r7,6,18,25
	ctx.r10.u64 = (rotl32(ctx.r7.u32, 6) & 0x3FC0) | (ctx.r10.u64 & 0xFFFFFFFFFFFFC03F);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE2870) {
	__imp__sub_82BE2870(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE28D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r10,11
	cr6.compare<int32_t>(ctx.r10.s32, 11, xer);
	// bne cr6,0x82be2940
	if (!cr6.eq) goto loc_82BE2940;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r9,4(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r7,12(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(12) );
	// lwzx r11,r8,r7
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r7.u32);
	// clrlwi r6,r11,26
	ctx.r6.u64 = r11.u32 & 0x3F;
	// cmpwi cr6,r6,19
	cr6.compare<int32_t>(ctx.r6.s32, 19, xer);
	// bne cr6,0x82be2940
	if (!cr6.eq) goto loc_82BE2940;
	// lwz r10,24(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// li r9,26
	ctx.r9.s64 = 26;
	// cntlzw r8,r29
	ctx.r8.u64 = r29.u32 == 0 ? 32 : __builtin_clz(r29.u32);
	// lwz r7,12(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// addi r6,r10,-1
	ctx.r6.s64 = ctx.r10.s64 + -1;
	// rlwinm r5,r8,9,17,17
	ctx.r5.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 9) & 0x4000;
	// rlwimi r9,r11,15,17,25
	ctx.r9.u64 = (rotl32(r11.u32, 15) & 0x7FC0) | (ctx.r9.u64 & 0xFFFFFFFFFFFF803F);
	// stw r6,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r6.u32);
	// or r4,r9,r5
	ctx.r4.u64 = ctx.r9.u64 | ctx.r5.u64;
	// lwz r5,8(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(8) );
	// b 0x82be29ec
	goto loc_82BE29EC;
loc_82BE2940:
	// cmpwi cr6,r10,12
	cr6.compare<int32_t>(ctx.r10.s32, 12, xer);
	// beq cr6,0x82be29a8
	if (cr6.eq) goto loc_82BE29A8;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lbz r9,75(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82be2980
	if (!cr6.gt) goto loc_82BE2980;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be297c
	if (cr6.lt) goto loc_82BE297C;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE297C:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE2980:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// bl 0x82be20a0
	sub_82BE20A0(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be29d0
	if (!cr6.eq) goto loc_82BE29D0;
loc_82BE29A8:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be29d0
	if (!cr6.eq) goto loc_82BE29D0;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be29d0
	if (cr6.lt) goto loc_82BE29D0;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE29D0:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// li r4,16347
	ctx.r4.s64 = 16347;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// rlwinm r9,r11,9,0,22
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 9) & 0xFFFFFE00;
	// or r8,r9,r29
	ctx.r8.u64 = ctx.r9.u64 | r29.u64;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// rlwimi r4,r8,14,0,17
	ctx.r4.u64 = (rotl32(ctx.r8.u32, 14) & 0xFFFFC000) | (ctx.r4.u64 & 0xFFFFFFFF00003FFF);
loc_82BE29EC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE28D0) {
	__imp__sub_82BE28D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2A08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bgt cr6,0x82be2a9c
	if (cr6.gt) goto loc_82BE2A9C;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,10832
	r12.s64 = r12.s64 + 10832;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BE2A74;
	case 1:
		goto loc_82BE2A7C;
	case 2:
		goto loc_82BE2A74;
	case 3:
		goto loc_82BE2A74;
	case 4:
		goto loc_82BE2A9C;
	case 5:
		goto loc_82BE2A9C;
	case 6:
		goto loc_82BE2A9C;
	case 7:
		goto loc_82BE2A9C;
	case 8:
		goto loc_82BE2A88;
	default:
		__builtin_unreachable();
	}
	// lwz r21,10868(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10868) );
	// lwz r21,10876(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10876) );
	// lwz r21,10868(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10868) );
	// lwz r21,10868(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10868) );
	// lwz r21,10908(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10908) );
	// lwz r21,10908(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10908) );
	// lwz r21,10908(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10908) );
	// lwz r21,10908(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10908) );
	// lwz r21,10888(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(10888) );
loc_82BE2A74:
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x82be2aac
	goto loc_82BE2AAC;
loc_82BE2A7C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// b 0x82be2aac
	goto loc_82BE2AAC;
loc_82BE2A88:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2870
	sub_82BE2870(ctx, base);
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// b 0x82be2aac
	goto loc_82BE2AAC;
loc_82BE2A9C:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be28d0
	sub_82BE28D0(ctx, base);
loc_82BE2AAC:
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r30,16
	ctx.r4.s64 = r30.s64 + 16;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// lwz r5,12(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r10,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE2A08) {
	__imp__sub_82BE2A08(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2AF8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r11,9
	cr6.compare<uint32_t>(r11.u32, 9, xer);
	// bgt cr6,0x82be2b84
	if (cr6.gt) goto loc_82BE2B84;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,11072
	r12.s64 = r12.s64 + 11072;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BE2B68;
	case 1:
		goto loc_82BE2B70;
	case 2:
		goto loc_82BE2B68;
	case 3:
		goto loc_82BE2B84;
	case 4:
		goto loc_82BE2B84;
	case 5:
		goto loc_82BE2B84;
	case 6:
		goto loc_82BE2B84;
	case 7:
		goto loc_82BE2B84;
	case 8:
		goto loc_82BE2B84;
	case 9:
		goto loc_82BE2B7C;
	default:
		__builtin_unreachable();
	}
	// lwz r21,11112(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11112) );
	// lwz r21,11120(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11120) );
	// lwz r21,11112(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11112) );
	// lwz r21,11140(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11140) );
	// lwz r21,11140(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11140) );
	// lwz r21,11140(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11140) );
	// lwz r21,11140(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11140) );
	// lwz r21,11140(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11140) );
	// lwz r21,11140(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11140) );
	// lwz r21,11132(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11132) );
loc_82BE2B68:
	// li r3,-1
	ctx.r3.s64 = -1;
	// b 0x82be2b94
	goto loc_82BE2B94;
loc_82BE2B70:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// b 0x82be2b94
	goto loc_82BE2B94;
loc_82BE2B7C:
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// b 0x82be2b94
	goto loc_82BE2B94;
loc_82BE2B84:
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be28d0
	sub_82BE28D0(ctx, base);
loc_82BE2B94:
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r30,12
	ctx.r4.s64 = r30.s64 + 12;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// lwz r5,16(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// addi r4,r31,32
	ctx.r4.s64 = r31.s64 + 32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r11.u32);
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// li r10,-1
	ctx.r10.s64 = -1;
	// stw r10,16(r30)
	PPC_STORE_U32(r30.u32 + 16, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE2AF8) {
	__imp__sub_82BE2AF8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2BE0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// addi r11,r10,-1
	r11.s64 = ctx.r10.s64 + -1;
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// bgt cr6,0x82be2d38
	if (cr6.gt) goto loc_82BE2D38;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,11304
	r12.s64 = r12.s64 + 11304;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BE2C58;
	case 1:
		goto loc_82BE2C64;
	case 2:
		goto loc_82BE2C58;
	case 3:
		goto loc_82BE2C64;
	case 4:
		goto loc_82BE2C64;
	case 5:
		goto loc_82BE2D38;
	case 6:
		goto loc_82BE2D38;
	case 7:
		goto loc_82BE2D38;
	case 8:
		goto loc_82BE2D38;
	case 9:
		goto loc_82BE2C70;
	case 10:
		goto loc_82BE2C80;
	case 11:
		goto loc_82BE2C80;
	default:
		__builtin_unreachable();
	}
	// lwz r21,11352(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11352) );
	// lwz r21,11364(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11364) );
	// lwz r21,11352(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11352) );
	// lwz r21,11364(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11364) );
	// lwz r21,11364(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11364) );
	// lwz r21,11576(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11576) );
	// lwz r21,11576(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11576) );
	// lwz r21,11576(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11576) );
	// lwz r21,11576(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11576) );
	// lwz r21,11376(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11376) );
	// lwz r21,11392(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11392) );
	// lwz r21,11392(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11392) );
loc_82BE2C58:
	// li r11,2
	r11.s64 = 2;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x82be2d38
	goto loc_82BE2D38;
loc_82BE2C64:
	// li r11,3
	r11.s64 = 3;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x82be2d38
	goto loc_82BE2D38;
loc_82BE2C70:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be2870
	sub_82BE2870(ctx, base);
	// b 0x82be2d38
	goto loc_82BE2D38;
loc_82BE2C80:
	// cmpwi cr6,r10,12
	cr6.compare<int32_t>(ctx.r10.s32, 12, xer);
	// beq cr6,0x82be2ce8
	if (cr6.eq) goto loc_82BE2CE8;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// lbz r9,75(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 75);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// ble cr6,0x82be2cc0
	if (!cr6.gt) goto loc_82BE2CC0;
	// cmpwi cr6,r11,250
	cr6.compare<int32_t>(r11.s32, 250, xer);
	// blt cr6,0x82be2cbc
	if (cr6.lt) goto loc_82BE2CBC;
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r4,r11,14188
	ctx.r4.s64 = r11.s64 + 14188;
	// lwz r5,12(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// bl 0x82bcdaf8
	sub_82BCDAF8(ctx, base);
loc_82BE2CBC:
	// stb r11,75(r10)
	PPC_STORE_U8(ctx.r10.u32 + 75, r11.u8);
loc_82BE2CC0:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
	// addi r5,r11,-1
	ctx.r5.s64 = r11.s64 + -1;
	// bl 0x82be20a0
	sub_82BE20A0(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be2d10
	if (!cr6.eq) goto loc_82BE2D10;
loc_82BE2CE8:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be2d10
	if (!cr6.eq) goto loc_82BE2D10;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be2d10
	if (cr6.lt) goto loc_82BE2D10;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE2D10:
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// li r4,19
	ctx.r4.s64 = 19;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwimi r4,r11,23,0,8
	ctx.r4.u64 = (rotl32(r11.u32, 23) & 0xFF800000) | (ctx.r4.u64 & 0xFFFFFFFF007FFFFF);
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r9,11
	ctx.r9.s64 = 11;
	// stw r3,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r3.u32);
	// stw r9,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r9.u32);
loc_82BE2D38:
	// lwz r10,12(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,16(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(16) );
	// rotlwi r4,r10,0
	ctx.r4.u64 = rotl32(ctx.r10.u32, 0);
	// stw r10,16(r30)
	PPC_STORE_U32(r30.u32 + 16, ctx.r10.u32);
	// stw r11,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r11.u32);
	// bl 0x82be19f0
	sub_82BE19F0(ctx, base);
	// lwz r4,12(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// bl 0x82be19f0
	sub_82BE19F0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE2BE0) {
	__imp__sub_82BE2BE0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2D78) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f30.u64);
	// stfd f31,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x82be2ec0
	if (!cr6.eq) goto loc_82BE2EC0;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82be2ec0
	if (!cr6.eq) goto loc_82BE2EC0;
	// lwz r11,16(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82be2ec0
	if (!cr6.eq) goto loc_82BE2EC0;
	// lwz r11,0(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(0) );
	// cmpwi cr6,r11,5
	cr6.compare<int32_t>(r11.s32, 5, xer);
	// bne cr6,0x82be2ec0
	if (!cr6.eq) goto loc_82BE2EC0;
	// lwz r11,12(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(12) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82be2ec0
	if (!cr6.eq) goto loc_82BE2EC0;
	// lwz r11,16(r5)
	r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(16) );
	// cmpwi cr6,r11,-1
	cr6.compare<int32_t>(r11.s32, -1, xer);
	// bne cr6,0x82be2ec0
	if (!cr6.eq) goto loc_82BE2EC0;
	// addi r11,r3,-12
	r11.s64 = ctx.r3.s64 + -12;
	// lfs f31,4(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	f31.f64 = double(temp.f32);
	// lfs f30,4(r31)
	temp.u32 = PPC_LOAD_U32(r31.u32 + 4);
	f30.f64 = double(temp.f32);
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// bgt cr6,0x82be2eac
	if (cr6.gt) goto loc_82BE2EAC;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,11784
	r12.s64 = r12.s64 + 11784;
	// rlwinm r0,r11,2,0,29
	r0.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (r11.u64) {
	case 0:
		goto loc_82BE2E2C;
	case 1:
		goto loc_82BE2E44;
	case 2:
		goto loc_82BE2E4C;
	case 3:
		goto loc_82BE2E54;
	case 4:
		goto loc_82BE2E6C;
	case 5:
		goto loc_82BE2E90;
	case 6:
		goto loc_82BE2EA4;
	case 7:
		goto loc_82BE2EAC;
	case 8:
		goto loc_82BE2EC0;
	default:
		__builtin_unreachable();
	}
	// lwz r21,11820(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11820) );
	// lwz r21,11844(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11844) );
	// lwz r21,11852(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11852) );
	// lwz r21,11860(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11860) );
	// lwz r21,11884(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11884) );
	// lwz r21,11920(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11920) );
	// lwz r21,11940(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11940) );
	// lwz r21,11948(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11948) );
	// lwz r21,11968(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(11968) );
loc_82BE2E2C:
	// fadds f0,f31,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 + f30.f64));
loc_82BE2E30:
	// fcmpu cr6,f0,f0
	ctx.fpscr.disableFlushMode();
	cr6.compare(f0.f64, f0.f64);
	// bne cr6,0x82be2ec0
	if (!cr6.eq) goto loc_82BE2EC0;
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82be2ec4
	goto loc_82BE2EC4;
loc_82BE2E44:
	// fsubs f0,f30,f31
	ctx.fpscr.disableFlushMode();
	f0.f64 = static_cast<float>(f30.f64 - f31.f64);
	// b 0x82be2e30
	goto loc_82BE2E30;
loc_82BE2E4C:
	// fmuls f0,f31,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f31.f64 * f30.f64));
	// b 0x82be2e30
	goto loc_82BE2E30;
loc_82BE2E54:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// lfs f0,-27468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -27468);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// beq cr6,0x82be2ec0
	if (cr6.eq) goto loc_82BE2EC0;
	// fdivs f0,f30,f31
	f0.f64 = double(float(f30.f64 / f31.f64));
	// b 0x82be2e30
	goto loc_82BE2E30;
loc_82BE2E6C:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// lfs f0,-27468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -27468);
	f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	cr6.compare(f31.f64, f0.f64);
	// beq cr6,0x82be2ec0
	if (cr6.eq) goto loc_82BE2EC0;
	// fdivs f1,f30,f31
	ctx.f1.f64 = double(float(f30.f64 / f31.f64));
	// bl 0x8222c3e8
	sub_8222C3E8(ctx, base);
	// fnmsub f0,f1,f31,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = -(ctx.f1.f64 * f31.f64 - f30.f64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// b 0x82be2e30
	goto loc_82BE2E30;
loc_82BE2E90:
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = f31.f64;
	// fmr f1,f30
	ctx.f1.f64 = f30.f64;
	// bl 0x821fe378
	sub_821FE378(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(ctx.f1.f64));
	// b 0x82be2e30
	goto loc_82BE2E30;
loc_82BE2EA4:
	// fneg f0,f30
	ctx.fpscr.disableFlushMode();
	f0.u64 = f30.u64 ^ 0x8000000000000000;
	// b 0x82be2e30
	goto loc_82BE2E30;
loc_82BE2EAC:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// li r3,1
	ctx.r3.s64 = 1;
	// lfs f0,-27468(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -27468);
	f0.f64 = double(temp.f32);
	// stfs f0,4(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 4, temp.u32);
	// b 0x82be2ec4
	goto loc_82BE2EC4;
loc_82BE2EC0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BE2EC4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// lfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lfd f31,-24(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE2D78) {
	__imp__sub_82BE2D78(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE2EE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r4
	r27.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be2d78
	sub_82BE2D78(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne cr6,0x82be302c
	if (!cr6.eq) goto loc_82BE302C;
	// cmpwi cr6,r27,18
	cr6.compare<int32_t>(r27.s32, 18, xer);
	// beq cr6,0x82be2f38
	if (cr6.eq) goto loc_82BE2F38;
	// cmpwi cr6,r27,20
	cr6.compare<int32_t>(r27.s32, 20, xer);
	// beq cr6,0x82be2f38
	if (cr6.eq) goto loc_82BE2F38;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// b 0x82be2f3c
	goto loc_82BE2F3C;
loc_82BE2F38:
	// li r28,0
	r28.s64 = 0;
loc_82BE2F3C:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// cmpw cr6,r3,r28
	cr6.compare<int32_t>(ctx.r3.s32, r28.s32, xer);
	// ble cr6,0x82be2f98
	if (!cr6.gt) goto loc_82BE2F98;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be2f84
	if (!cr6.eq) goto loc_82BE2F84;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be2f84
	if (!cr6.eq) goto loc_82BE2F84;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be2f84
	if (cr6.lt) goto loc_82BE2F84;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE2F84:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be3000
	if (!cr6.eq) goto loc_82BE3000;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// b 0x82be2fdc
	goto loc_82BE2FDC;
loc_82BE2F98:
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be2fcc
	if (!cr6.eq) goto loc_82BE2FCC;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be2fcc
	if (!cr6.eq) goto loc_82BE2FCC;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be2fcc
	if (cr6.lt) goto loc_82BE2FCC;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE2FCC:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be3000
	if (!cr6.eq) goto loc_82BE3000;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
loc_82BE2FDC:
	// rlwinm r10,r11,0,23,23
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r10,0
	cr6.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne cr6,0x82be3000
	if (!cr6.eq) goto loc_82BE3000;
	// lbz r10,50(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// blt cr6,0x82be3000
	if (cr6.lt) goto loc_82BE3000;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE3000:
	// rlwinm r11,r3,9,0,22
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 9) & 0xFFFFFE00;
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// or r9,r11,r28
	ctx.r9.u64 = r11.u64 | r28.u64;
	// rlwinm r8,r9,14,0,17
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 14) & 0xFFFFC000;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// or r4,r8,r27
	ctx.r4.u64 = ctx.r8.u64 | r27.u64;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// li r7,11
	ctx.r7.s64 = 11;
	// stw r3,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r3.u32);
	// stw r7,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r7.u32);
loc_82BE302C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BE2EE0) {
	__imp__sub_82BE2EE0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3038) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r26,r4
	r26.u64 = ctx.r4.u64;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// mr r30,r7
	r30.u64 = ctx.r7.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be24b0
	sub_82BE24B0(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be30a8
	if (!cr6.eq) goto loc_82BE30A8;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// rlwinm r9,r11,0,23,23
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x82be30a8
	if (!cr6.eq) goto loc_82BE30A8;
	// lbz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x82be30a8
	if (cr6.lt) goto loc_82BE30A8;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE30A8:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be30dc
	if (!cr6.eq) goto loc_82BE30DC;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm r9,r11,0,23,23
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x82be30dc
	if (!cr6.eq) goto loc_82BE30DC;
	// lbz r9,50(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 50);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x82be30dc
	if (cr6.lt) goto loc_82BE30DC;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r11.u32);
loc_82BE30DC:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x82be30fc
	if (!cr6.eq) goto loc_82BE30FC;
	// cmpwi cr6,r26,23
	cr6.compare<int32_t>(r26.s32, 23, xer);
	// beq cr6,0x82be30fc
	if (cr6.eq) goto loc_82BE30FC;
	// mr r11,r28
	r11.u64 = r28.u64;
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// li r27,1
	r27.s64 = 1;
loc_82BE30FC:
	// rlwinm r11,r28,9,0,22
	r11.u64 = rotl64(r28.u32 | (r28.u64 << 32), 9) & 0xFFFFFE00;
	// lwz r9,12(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// or r8,r11,r10
	ctx.r8.u64 = r11.u64 | ctx.r10.u64;
	// rlwinm r7,r8,8,0,23
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 8) & 0xFFFFFF00;
	// lwz r5,8(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(8) );
	// or r6,r7,r27
	ctx.r6.u64 = ctx.r7.u64 | r27.u64;
	// rlwinm r4,r6,6,0,25
	ctx.r4.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 6) & 0xFFFFFFC0;
	// or r4,r4,r26
	ctx.r4.u64 = ctx.r4.u64 | r26.u64;
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be1858
	sub_82BE1858(ctx, base);
	// li r11,10
	r11.s64 = 10;
	// stw r3,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r3.u32);
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BE3038) {
	__imp__sub_82BE3038(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3140) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// mr r31,r6
	r31.u64 = ctx.r6.u64;
	// cmplwi cr6,r4,14
	cr6.compare<uint32_t>(ctx.r4.u32, 14, xer);
	// bgt cr6,0x82be3408
	if (cr6.gt) goto loc_82BE3408;
	// lis r12,-32066
	r12.s64 = -2101477376;
	// addi r12,r12,12664
	r12.s64 = r12.s64 + 12664;
	// rlwinm r0,r4,2,0,29
	r0.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	r0.u64 = PPC_LOAD_U32(r12.u32 + r0.u32);
	// mtctr r0
	ctr.u64 = r0.u64;
	// bctr 
	switch (ctx.r4.u64) {
	case 0:
		goto loc_82BE3314;
	case 1:
		goto loc_82BE3330;
	case 2:
		goto loc_82BE334C;
	case 3:
		goto loc_82BE3368;
	case 4:
		goto loc_82BE3384;
	case 5:
		goto loc_82BE33A0;
	case 6:
		goto loc_82BE3234;
	case 7:
		goto loc_82BE33C8;
	case 8:
		goto loc_82BE33BC;
	case 9:
		goto loc_82BE33D0;
	case 10:
		goto loc_82BE33DC;
	case 11:
		goto loc_82BE33E8;
	case 12:
		goto loc_82BE33F0;
	case 13:
		goto loc_82BE31B4;
	case 14:
		goto loc_82BE31F4;
	default:
		__builtin_unreachable();
	}
	// lwz r21,13076(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13076) );
	// lwz r21,13104(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13104) );
	// lwz r21,13132(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13132) );
	// lwz r21,13160(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13160) );
	// lwz r21,13188(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13188) );
	// lwz r21,13216(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13216) );
	// lwz r21,12852(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12852) );
	// lwz r21,13256(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13256) );
	// lwz r21,13244(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13244) );
	// lwz r21,13264(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13264) );
	// lwz r21,13276(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13276) );
	// lwz r21,13288(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13288) );
	// lwz r21,13296(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(13296) );
	// lwz r21,12724(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12724) );
	// lwz r21,12788(r30)
	r21.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12788) );
loc_82BE31B4:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
	// addi r4,r31,16
	ctx.r4.s64 = r31.s64 + 16;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r5,16(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + int32_t(16) );
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// li r11,5
	r11.s64 = 5;
	// mtctr r11
	ctr.u64 = r11.u64;
loc_82BE31D8:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// bdnz 0x82be31d8
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82BE31D8;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE31F4:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
	// addi r4,r31,12
	ctx.r4.s64 = r31.s64 + 12;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r5,12(r29)
	ctx.r5.u64 = PPC_LOAD_U32(r29.u32 + int32_t(12) );
	// bl 0x82be1b98
	sub_82BE1B98(ctx, base);
	// li r11,5
	r11.s64 = 5;
	// mtctr r11
	ctr.u64 = r11.u64;
loc_82BE3218:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// addi r29,r29,4
	r29.s64 = r29.s64 + 4;
	// bdnz 0x82be3218
	--ctr.u64;
	if (ctr.u32 != 0) goto loc_82BE3218;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE3234:
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// lwz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// cmpw cr6,r11,r10
	cr6.compare<int32_t>(r11.s32, ctx.r10.s32, xer);
	// beq cr6,0x82be3254
	if (cr6.eq) goto loc_82BE3254;
	// bl 0x82be2428
	sub_82BE2428(ctx, base);
	// b 0x82be3258
	goto loc_82BE3258;
loc_82BE3254:
	// bl 0x82be1f00
	sub_82BE1F00(ctx, base);
loc_82BE3258:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmpwi cr6,r11,11
	cr6.compare<int32_t>(r11.s32, 11, xer);
	// bne cr6,0x82be32ec
	if (!cr6.eq) goto loc_82BE32EC;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r8,12(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// lwzx r7,r9,r8
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r8.u32);
	// clrlwi r6,r7,26
	ctx.r6.u64 = ctx.r7.u32 & 0x3F;
	// cmpwi cr6,r6,21
	cr6.compare<int32_t>(ctx.r6.s32, 21, xer);
	// bne cr6,0x82be32ec
	if (!cr6.eq) goto loc_82BE32EC;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpwi cr6,r11,12
	cr6.compare<int32_t>(r11.s32, 12, xer);
	// bne cr6,0x82be32b8
	if (!cr6.eq) goto loc_82BE32B8;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm r9,r11,0,23,23
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne cr6,0x82be32b8
	if (!cr6.eq) goto loc_82BE32B8;
	// lbz r9,50(r30)
	ctx.r9.u64 = PPC_LOAD_U8(r30.u32 + 50);
	// cmpw cr6,r11,r9
	cr6.compare<int32_t>(r11.s32, ctx.r9.s32, xer);
	// blt cr6,0x82be32b8
	if (cr6.lt) goto loc_82BE32B8;
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,36(r30)
	PPC_STORE_U32(r30.u32 + 36, r11.u32);
loc_82BE32B8:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// li r9,11
	ctx.r9.s64 = 11;
	// lwz r10,12(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(12) );
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r8,4(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lwzx r7,r11,r10
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// rlwimi r7,r8,23,0,8
	ctx.r7.u64 = (rotl32(ctx.r8.u32, 23) & 0xFF800000) | (ctx.r7.u64 & 0xFFFFFFFF007FFFFF);
	// stwx r7,r11,r10
	PPC_STORE_U32(r11.u32 + ctx.r10.u32, ctx.r7.u32);
	// stw r9,0(r29)
	PPC_STORE_U32(r29.u32 + 0, ctx.r9.u32);
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r6,4(r29)
	PPC_STORE_U32(r29.u32 + 4, ctx.r6.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE32EC:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2368
	sub_82BE2368(ctx, base);
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,21
	ctx.r4.s64 = 21;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE3314:
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,12
	ctx.r4.s64 = 12;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE3330:
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,13
	ctx.r4.s64 = 13;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE334C:
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,14
	ctx.r4.s64 = 14;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE3368:
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,15
	ctx.r4.s64 = 15;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE3384:
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,16
	ctx.r4.s64 = 16;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE33A0:
	// mr r6,r31
	ctx.r6.u64 = r31.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// li r4,17
	ctx.r4.s64 = 17;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be2ee0
	sub_82BE2EE0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE33BC:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,23
	ctx.r4.s64 = 23;
	// b 0x82be33f8
	goto loc_82BE33F8;
loc_82BE33C8:
	// li r4,23
	ctx.r4.s64 = 23;
	// b 0x82be33f4
	goto loc_82BE33F4;
loc_82BE33D0:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,24
	ctx.r4.s64 = 24;
	// b 0x82be33f8
	goto loc_82BE33F8;
loc_82BE33DC:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,25
	ctx.r4.s64 = 25;
	// b 0x82be33f8
	goto loc_82BE33F8;
loc_82BE33E8:
	// li r4,24
	ctx.r4.s64 = 24;
	// b 0x82be33f4
	goto loc_82BE33F4;
loc_82BE33F0:
	// li r4,25
	ctx.r4.s64 = 25;
loc_82BE33F4:
	// li r5,0
	ctx.r5.s64 = 0;
loc_82BE33F8:
	// mr r7,r31
	ctx.r7.u64 = r31.u64;
	// mr r6,r29
	ctx.r6.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be3038
	sub_82BE3038(ctx, base);
loc_82BE3408:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE3140) {
	__imp__sub_82BE3140(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3410) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r27,r5
	r27.u64 = ctx.r5.u64;
	// li r6,255
	ctx.r6.s64 = 255;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// lwz r5,24(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// lwz r30,0(r31)
	r30.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// mr r7,r5
	ctx.r7.u64 = ctx.r5.u64;
	// lwz r4,32(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// bl 0x82be1a98
	sub_82BE1A98(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r10,-1
	ctx.r10.s64 = -1;
	// addi r29,r11,14224
	r29.s64 = r11.s64 + 14224;
	// stw r10,32(r31)
	PPC_STORE_U32(r31.u32 + 32, ctx.r10.u32);
	// addi r5,r30,44
	ctx.r5.s64 = r30.s64 + 44;
	// lwz r9,44(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(44) );
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// cmpw cr6,r8,r9
	cr6.compare<int32_t>(ctx.r8.s32, ctx.r9.s32, xer);
	// ble cr6,0x82be3488
	if (!cr6.gt) goto loc_82BE3488;
	// lis r7,32767
	ctx.r7.s64 = 2147418112;
	// lwz r4,12(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// ori r7,r7,65533
	ctx.r7.u64 = ctx.r7.u64 | 65533;
	// li r6,4
	ctx.r6.s64 = 4;
	// bl 0x82bcf850
	sub_82BCF850(ctx, base);
	// stw r3,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r3.u32);
loc_82BE3488:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r5,r30,48
	ctx.r5.s64 = r30.s64 + 48;
	// lwz r10,12(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r28,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r28.u32);
	// lwz r8,48(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + int32_t(48) );
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r7,r11,1
	ctx.r7.s64 = r11.s64 + 1;
	// cmpw cr6,r7,r8
	cr6.compare<int32_t>(ctx.r7.s32, ctx.r8.s32, xer);
	// ble cr6,0x82be34d0
	if (!cr6.gt) goto loc_82BE34D0;
	// lis r7,32767
	ctx.r7.s64 = 2147418112;
	// lwz r4,20(r30)
	ctx.r4.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// mr r8,r29
	ctx.r8.u64 = r29.u64;
	// lwz r3,16(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// ori r7,r7,65533
	ctx.r7.u64 = ctx.r7.u64 | 65533;
	// li r6,4
	ctx.r6.s64 = 4;
	// bl 0x82bcf850
	sub_82BCF850(ctx, base);
	// stw r3,20(r30)
	PPC_STORE_U32(r30.u32 + 20, ctx.r3.u32);
loc_82BE34D0:
	// lwz r11,24(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// lwz r10,20(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r27,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r27.u32);
	// lwz r3,24(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// addi r8,r3,1
	ctx.r8.s64 = ctx.r3.s64 + 1;
	// stw r8,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r8.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BE3410) {
	__imp__sub_82BE3410(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE34F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r5,-1
	r11.s64 = ctx.r5.s64 + -1;
	// li r10,50
	ctx.r10.s64 = 50;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// divw r11,r11,r10
	r11.s32 = r11.s32 / ctx.r10.s32;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// cmpwi cr6,r6,-1
	cr6.compare<int32_t>(ctx.r6.s32, -1, xer);
	// addi r29,r11,1
	r29.s64 = r11.s64 + 1;
	// bne cr6,0x82be3528
	if (!cr6.eq) goto loc_82BE3528;
	// li r6,0
	ctx.r6.s64 = 0;
loc_82BE3528:
	// lwz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmpwi cr6,r29,511
	cr6.compare<int32_t>(r29.s32, 511, xer);
	// li r4,34
	ctx.r4.s64 = 34;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// bgt cr6,0x82be3568
	if (cr6.gt) goto loc_82BE3568;
	// rlwinm r11,r6,9,0,22
	r11.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 9) & 0xFFFFFE00;
	// or r9,r11,r29
	ctx.r9.u64 = r11.u64 | r29.u64;
	// rlwinm r8,r9,8,0,23
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 8) & 0xFFFFFF00;
	// or r7,r8,r30
	ctx.r7.u64 = ctx.r8.u64 | r30.u64;
	// rlwimi r4,r7,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r7.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// addi r6,r30,1
	ctx.r6.s64 = r30.s64 + 1;
	// stw r6,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r6.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
loc_82BE3568:
	// rlwinm r11,r6,17,0,14
	r11.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 17) & 0xFFFE0000;
	// or r9,r11,r30
	ctx.r9.u64 = r11.u64 | r30.u64;
	// rlwimi r4,r9,6,0,25
	ctx.r4.u64 = (rotl32(ctx.r9.u32, 6) & 0xFFFFFFC0) | (ctx.r4.u64 & 0xFFFFFFFF0000003F);
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r5,8(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(8) );
	// bl 0x82be3410
	sub_82BE3410(ctx, base);
	// addi r7,r30,1
	ctx.r7.s64 = r30.s64 + 1;
	// stw r7,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r7.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE34F8) {
	__imp__sub_82BE34F8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE35A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bc8
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,1
	r11.s64 = 1;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// lis r10,-31920
	ctx.r10.s64 = -2091909120;
	// slw r20,r11,r25
	r20.u64 = r25.u8 & 0x20 ? 0 : (r11.u32 << (r25.u8 & 0x3F));
	// lis r11,-31921
	r11.s64 = -2091974656;
	// li r21,-1
	r21.s64 = -1;
	// lis r22,-31927
	r22.s64 = -2092367872;
	// li r24,0
	r24.s64 = 0;
	// addi r23,r10,-27264
	r23.s64 = ctx.r10.s64 + -27264;
	// addi r26,r11,29984
	r26.s64 = r11.s64 + 29984;
loc_82BE35D4:
	// lwz r11,28596(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + int32_t(28596) );
	// and r10,r20,r11
	ctx.r10.u64 = r20.u64 & r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be35d4
	if (cr6.eq) goto loc_82BE35D4;
	// mulli r11,r25,1036
	r11.s64 = r25.s64 * 1036;
	// lwzx r3,r11,r26
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + r26.u32);
	// add r31,r11,r26
	r31.u64 = r11.u64 + r26.u64;
	// li r28,4
	r28.s64 = 4;
	// addi r27,r1,80
	r27.s64 = ctx.r1.s64 + 80;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be35d4
	if (cr6.eq) goto loc_82BE35D4;
	// mr r4,r21
	ctx.r4.u64 = r21.u64;
	// bl 0x82196c58
	sub_82196C58(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be35d4
	if (!cr6.eq) goto loc_82BE35D4;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// subf. r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bge 0x82be3624
	if (!cr0.lt) goto loc_82BE3624;
	// addi r10,r10,256
	ctx.r10.s64 = ctx.r10.s64 + 256;
loc_82BE3624:
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bge cr6,0x82be3630
	if (!cr6.lt) goto loc_82BE3630;
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
loc_82BE3630:
	// subfic r30,r11,256
	xer.ca = r11.u32 <= 256;
	r30.s64 = 256 - r11.s64;
	// mr r29,r28
	r29.u64 = r28.u64;
	// cmplw cr6,r30,r28
	cr6.compare<uint32_t>(r30.u32, r28.u32, xer);
	// bgt cr6,0x82be3668
	if (cr6.gt) goto loc_82BE3668;
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// add r4,r11,r31
	ctx.r4.u64 = r11.u64 + r31.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// stw r24,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r24.u32);
	// subf r29,r30,r28
	r29.s64 = r28.s64 - r30.s64;
	// add r27,r30,r11
	r27.u64 = r30.u64 + r11.u64;
loc_82BE3668:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r4,r11,r31
	ctx.r4.u64 = r11.u64 + r31.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// add r10,r29,r11
	ctx.r10.u64 = r29.u64 + r11.u64;
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// beq cr6,0x82be35d4
	if (cr6.eq) goto loc_82BE35D4;
	// lwz r31,80(r1)
	r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be36d4
	if (cr6.eq) goto loc_82BE36D4;
	// rlwinm r4,r31,31,30,31
	ctx.r4.u64 = rotl64(r31.u32 | (r31.u64 << 32), 31) & 0x3;
	// rlwinm r3,r31,0,0,28
	ctx.r3.u64 = rotl64(r31.u32 | (r31.u64 << 32), 0) & 0xFFFFFFF8;
	// bl 0x832b57e8
	sub_832B57E8(ctx, base);
	// rlwinm r11,r31,0,31,28
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF9;
	// stw r3,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r3.u32);
	// mr r3,r23
	ctx.r3.u64 = r23.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r11.u32);
	// li r6,8
	ctx.r6.s64 = 8;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// bl 0x82be3a30
	sub_82BE3A30(ctx, base);
	// b 0x82be35d4
	goto loc_82BE35D4;
loc_82BE36D4:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c18
	return;
}

PPC_WEAK_FUNC(sub_82BE35A0) {
	__imp__sub_82BE35A0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE36E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be3788
	if (cr6.eq) goto loc_82BE3788;
	// cmpwi cr6,r31,-1
	cr6.compare<int32_t>(r31.s32, -1, xer);
	// beq cr6,0x82be3788
	if (cr6.eq) goto loc_82BE3788;
	// lis r11,-31927
	r11.s64 = -2092367872;
	// addi r30,r11,28588
	r30.s64 = r11.s64 + 28588;
	// lwz r11,28588(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(28588) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be3744
	if (cr6.eq) goto loc_82BE3744;
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// addi r3,r31,64
	ctx.r3.s64 = r31.s64 + 64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be3744
	if (cr6.eq) goto loc_82BE3744;
	// cmpwi cr6,r3,-1
	cr6.compare<int32_t>(ctx.r3.s32, -1, xer);
	// beq cr6,0x82be3788
	if (cr6.eq) goto loc_82BE3788;
	// li r10,3
	ctx.r10.s64 = 3;
	// b 0x82be3758
	goto loc_82BE3758;
loc_82BE3744:
	// addi r3,r31,64
	ctx.r3.s64 = r31.s64 + 64;
	// bl 0x82ca3c68
	sub_82CA3C68(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be3788
	if (cr6.eq) goto loc_82BE3788;
	// li r10,0
	ctx.r10.s64 = 0;
loc_82BE3758:
	// clrlwi r11,r3,27
	r11.u64 = ctx.r3.u32 & 0x1F;
	// clrlwi r9,r10,24
	ctx.r9.u64 = ctx.r10.u32 & 0xFF;
	// subfic r8,r11,64
	xer.ca = r11.u32 <= 64;
	ctx.r8.s64 = 64 - r11.s64;
	// cmplwi cr6,r9,3
	cr6.compare<uint32_t>(ctx.r9.u32, 3, xer);
	// clrlwi r11,r8,24
	r11.u64 = ctx.r8.u32 & 0xFF;
	// add r3,r11,r3
	ctx.r3.u64 = r11.u64 + ctx.r3.u64;
	// stb r11,-1(r3)
	PPC_STORE_U8(ctx.r3.u32 + -1, r11.u8);
	// stb r10,-2(r3)
	PPC_STORE_U8(ctx.r3.u32 + -2, ctx.r10.u8);
	// bne cr6,0x82be378c
	if (!cr6.eq) goto loc_82BE378C;
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// stw r11,-12(r3)
	PPC_STORE_U32(ctx.r3.u32 + -12, r11.u32);
	// b 0x82be378c
	goto loc_82BE378C;
loc_82BE3788:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BE378C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE36E0) {
	__imp__sub_82BE36E0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE37A8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,16
	ctx.r5.s64 = 16;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cc0658
	sub_82CC0658(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be37ec
	if (!cr6.eq) goto loc_82BE37EC;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE37EC:
	// li r11,0
	r11.s64 = 0;
	// stw r3,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r3.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE37A8) {
	__imp__sub_82BE37A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3818) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be385c
	if (cr6.eq) goto loc_82BE385C;
	// bl 0x82cbbf60
	sub_82CBBF60(ctx, base);
	// li r11,0
	r11.s64 = 0;
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE385C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3818) {
	__imp__sub_82BE3818(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3878) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x82be35a0
	sub_82BE35A0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3878) {
	__imp__sub_82BE3878(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE38A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// li r28,8
	r28.s64 = 8;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// subf. r10,r10,r11
	ctx.r10.s64 = r11.s64 - ctx.r10.s64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bgt 0x82be38cc
	if (cr0.gt) goto loc_82BE38CC;
	// addi r10,r10,256
	ctx.r10.s64 = ctx.r10.s64 + 256;
loc_82BE38CC:
	// addi r10,r10,-4
	ctx.r10.s64 = ctx.r10.s64 + -4;
	// cmplwi cr6,r10,8
	cr6.compare<uint32_t>(ctx.r10.u32, 8, xer);
	// bge cr6,0x82be38e4
	if (!cr6.lt) goto loc_82BE38E4;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
loc_82BE38E4:
	// subfic r29,r11,256
	xer.ca = r11.u32 <= 256;
	r29.s64 = 256 - r11.s64;
	// cmplwi cr6,r29,8
	cr6.compare<uint32_t>(r29.u32, 8, xer);
	// bgt cr6,0x82be3918
	if (cr6.gt) goto loc_82BE3918;
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r3,r11,r31
	ctx.r3.u64 = r11.u64 + r31.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// add r30,r29,r30
	r30.u64 = r29.u64 + r30.u64;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// subfic r28,r29,8
	xer.ca = r29.u32 <= 8;
	r28.s64 = 8 - r29.s64;
loc_82BE3918:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r11,r11,3
	r11.s64 = r11.s64 + 3;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r3,r11,r31
	ctx.r3.u64 = r11.u64 + r31.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// add r10,r11,r28
	ctx.r10.u64 = r11.u64 + r28.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// bl 0x82cc06f0
	sub_82CC06F0(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE38A0) {
	__imp__sub_82BE38A0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3960) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-31927
	r31.s64 = -2092367872;
	// lwz r11,28596(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28596) );
	// rlwinm r11,r11,0,27,27
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82be3a24
	if (!cr6.eq) goto loc_82BE3A24;
	// lis r11,-31921
	r11.s64 = -2091974656;
	// addi r30,r11,29984
	r30.s64 = r11.s64 + 29984;
	// addi r3,r30,4144
	ctx.r3.s64 = r30.s64 + 4144;
	// bl 0x82be37a8
	sub_82BE37A8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82be3a24
	if (cr6.eq) goto loc_82BE3A24;
	// lis r11,-31920
	r11.s64 = -2091909120;
	// addi r11,r11,-27264
	r11.s64 = r11.s64 + -27264;
	// addi r3,r11,4144
	ctx.r3.s64 = r11.s64 + 4144;
	// bl 0x82be37a8
	sub_82BE37A8(ctx, base);
	// cmpwi cr6,r3,0
	cr6.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq cr6,0x82be3a1c
	if (cr6.eq) goto loc_82BE3A1C;
	// lis r11,-32066
	r11.s64 = -2101477376;
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,4
	ctx.r6.s64 = 4;
	// addi r5,r11,14456
	ctx.r5.s64 = r11.s64 + 14456;
	// li r4,0
	ctx.r4.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82cbd280
	sub_82CBD280(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be3a1c
	if (cr6.eq) goto loc_82BE3A1C;
	// lis r11,-31921
	r11.s64 = -2091974656;
	// li r4,4
	ctx.r4.s64 = 4;
	// addi r10,r11,29952
	ctx.r10.s64 = r11.s64 + 29952;
	// stw r3,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r3.u32);
	// bl 0x82cbbe20
	sub_82CBBE20(ctx, base);
	// lwz r11,28596(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28596) );
	// li r3,1
	ctx.r3.s64 = 1;
	// ori r11,r11,16
	r11.u64 = r11.u64 | 16;
	// stw r11,28596(r31)
	PPC_STORE_U32(r31.u32 + 28596, r11.u32);
loc_82BE3A04:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE3A1C:
	// addi r3,r30,4144
	ctx.r3.s64 = r30.s64 + 4144;
	// bl 0x82be3818
	sub_82BE3818(ctx, base);
loc_82BE3A24:
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x82be3a04
	goto loc_82BE3A04;
}

PPC_WEAK_FUNC(sub_82BE3960) {
	__imp__sub_82BE3960(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3A30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-31927
	ctx.r10.s64 = -2092367872;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// li r9,1
	ctx.r9.s64 = 1;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// slw r8,r9,r11
	ctx.r8.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// lwz r10,28596(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(28596) );
	// and r7,r8,r10
	ctx.r7.u64 = ctx.r8.u64 & ctx.r10.u64;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// bne cr6,0x82be3a74
	if (!cr6.eq) goto loc_82BE3A74;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
loc_82BE3A74:
	// lis r9,-31920
	ctx.r9.s64 = -2091909120;
	// mulli r10,r11,1036
	ctx.r10.s64 = r11.s64 * 1036;
	// addi r11,r9,-27264
	r11.s64 = ctx.r9.s64 + -27264;
	// li r5,8
	ctx.r5.s64 = 8;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + r11.u64;
	// bl 0x82be38a0
	sub_82BE38A0(ctx, base);
	// cntlzw r8,r3
	ctx.r8.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r7,r8,27,31,31
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x1;
	// xori r3,r7,1
	ctx.r3.u64 = ctx.r7.u64 ^ 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3A30) {
	__imp__sub_82BE3A30(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3AA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r10,r11,6268
	ctx.r10.s64 = r11.s64 + 6268;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// bl 0x829fa218
	sub_829FA218(ctx, base);
	// clrlwi r9,r30,31
	ctx.r9.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82be3aec
	if (cr6.eq) goto loc_82BE3AEC;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82BE3AEC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3AA8) {
	__imp__sub_82BE3AA8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3B08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r3,r31,8
	ctx.r3.s64 = r31.s64 + 8;
	// bl 0x82a0f5c0
	sub_82A0F5C0(ctx, base);
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r11,-1124
	ctx.r9.s64 = r11.s64 + -1124;
	// clrlwi r8,r30,31
	ctx.r8.u64 = r30.u32 & 0x1;
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82be3b60
	if (cr6.eq) goto loc_82BE3B60;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82BE3B60:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3B08) {
	__imp__sub_82BE3B08(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3B78) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// li r30,0
	r30.s64 = 0;
	// addi r9,r10,11576
	ctx.r9.s64 = ctx.r10.s64 + 11576;
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// bl 0x82179fb8
	sub_82179FB8(ctx, base);
	// lwz r3,92(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(92) );
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// stw r30,92(r31)
	PPC_STORE_U32(r31.u32 + 92, r30.u32);
	// addi r3,r31,72
	ctx.r3.s64 = r31.s64 + 72;
	// bl 0x82a1e368
	sub_82A1E368(ctx, base);
	// addi r3,r31,8
	ctx.r3.s64 = r31.s64 + 8;
	// bl 0x82a0f5c0
	sub_82A0F5C0(ctx, base);
	// lwz r3,12(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// lis r8,-32241
	ctx.r8.s64 = -2112946176;
	// clrlwi r7,r29,31
	ctx.r7.u64 = r29.u32 & 0x1;
	// stw r30,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r30.u32);
	// addi r6,r8,-1124
	ctx.r6.s64 = ctx.r8.s64 + -1124;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// stw r6,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r6.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82be3bfc
	if (cr6.eq) goto loc_82BE3BFC;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82BE3BFC:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE3B78) {
	__imp__sub_82BE3B78(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3C08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f30{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, f30.u64);
	// stfd f31,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, f31.u64);
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,12(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// fmr f30,f1
	f30.f64 = ctx.f1.f64;
	// addi r29,r3,8
	r29.s64 = ctx.r3.s64 + 8;
	// li r30,0
	r30.s64 = 0;
	// li r26,15
	r26.s64 = 15;
	// li r27,1
	r27.s64 = 1;
	// lwz r31,0(r11)
	r31.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lis r11,-32246
	r11.s64 = -2113273856;
	// lfs f31,-27468(r11)
	temp.u32 = PPC_LOAD_U32(r11.u32 + -27468);
	f31.f64 = double(temp.f32);
loc_82BE3C44:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// cmplw cr6,r29,r29
	cr6.compare<uint32_t>(r29.u32, r29.u32, xer);
	// beq cr6,0x82be3c54
	if (cr6.eq) goto loc_82BE3C54;
	// twi 31,r0,22
loc_82BE3C54:
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// beq cr6,0x82be3d2c
	if (cr6.eq) goto loc_82BE3D2C;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// stfs f31,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// stfs f31,132(r1)
	temp.f32 = float(f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stw r30,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r30.u32);
	// stw r30,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r30.u32);
	// stw r30,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r30.u32);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// std r30,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, r30.u64);
	// std r30,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, r30.u64);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// std r30,16(r10)
	PPC_STORE_U64(ctx.r10.u32 + 16, r30.u64);
	// std r30,24(r10)
	PPC_STORE_U64(ctx.r10.u32 + 24, r30.u64);
	// stw r30,32(r10)
	PPC_STORE_U32(ctx.r10.u32 + 32, r30.u32);
	// bne cr6,0x82be3c98
	if (!cr6.eq) goto loc_82BE3C98;
	// twi 31,r0,22
loc_82BE3C98:
	// lfs f13,60(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 60);
	ctx.f13.f64 = double(temp.f32);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x82be3ca8
	if (!cr6.eq) goto loc_82BE3CA8;
	// twi 31,r0,22
loc_82BE3CA8:
	// lfs f0,20(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 20);
	f0.f64 = double(temp.f32);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// bne cr6,0x82be3cb8
	if (!cr6.eq) goto loc_82BE3CB8;
	// twi 31,r0,22
loc_82BE3CB8:
	// lbz r10,16(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 16);
	// frsp f13,f13
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// stfs f0,92(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 92, temp.u32);
	// stw r26,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, r26.u32);
	// stfs f13,132(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 132, temp.u32);
	// stw r27,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, r27.u32);
	// cmplw cr6,r31,r11
	cr6.compare<uint32_t>(r31.u32, r11.u32, xer);
	// stb r10,88(r1)
	PPC_STORE_U8(ctx.r1.u32 + 88, ctx.r10.u8);
	// bne cr6,0x82be3ce0
	if (!cr6.eq) goto loc_82BE3CE0;
	// twi 31,r0,22
loc_82BE3CE0:
	// lwz r11,48(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(48) );
	// frsp f0,f30
	ctx.fpscr.disableFlushMode();
	f0.f64 = double(float(f30.f64));
	// stfs f0,128(r1)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 128, temp.u32);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// li r5,56
	ctx.r5.s64 = 56;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, r11.u32);
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// stfd f30,208(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + 208, f30.u64);
	// stb r30,200(r1)
	PPC_STORE_U8(ctx.r1.u32 + 200, r30.u8);
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x829fa5e8
	sub_829FA5E8(ctx, base);
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// bne cr6,0x82be3d24
	if (!cr6.eq) goto loc_82BE3D24;
	// twi 31,r0,22
loc_82BE3D24:
	// lwz r31,0(r31)
	r31.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// b 0x82be3c44
	goto loc_82BE3C44;
loc_82BE3D2C:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82a0f5c0
	sub_82A0F5C0(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BE3C08) {
	__imp__sub_82BE3C08(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3D48) {
	PPC_FUNC_PROLOGUE();
	// b 0x82be3c08
	sub_82BE3C08(ctx, base);
	return;
}

PPC_WEAK_FUNC(sub_82BE3D48) {
	__imp__sub_82BE3D48(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3D50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// lwz r3,4(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// bl 0x82179fb8
	sub_82179FB8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3D50) {
	__imp__sub_82BE3D50(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3D88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// bl 0x8221eb58
	sub_8221EB58(ctx, base);
	// lfd f12,96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// lis r11,-31927
	r11.s64 = -2092367872;
	// fcfid f11,f12
	ctx.f11.f64 = double(ctx.f12.s64);
	// lis r9,-31927
	ctx.r9.s64 = -2092367872;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lfs f7,8(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 8);
	ctx.f7.f64 = double(temp.f32);
	// addi r3,r31,72
	ctx.r3.s64 = r31.s64 + 72;
	// lfs f6,4(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 4);
	ctx.f6.f64 = double(temp.f32);
	// lbz r10,24(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 24);
	// lfs f5,20(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 20);
	ctx.f5.f64 = double(temp.f32);
	// lfd f0,28352(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 28352);
	// lfd f13,28360(r9)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r9.u32 + 28360);
	// lfs f4,16(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 16);
	ctx.f4.f64 = double(temp.f32);
	// lfs f3,12(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 12);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,0(r29)
	temp.u32 = PPC_LOAD_U32(r29.u32 + 0);
	ctx.f2.f64 = double(temp.f32);
	// fsub f10,f11,f0
	ctx.f10.f64 = ctx.f11.f64 - f0.f64;
	// fdiv f9,f10,f13
	ctx.f9.f64 = ctx.f10.f64 / ctx.f13.f64;
	// frsp f1,f9
	ctx.f1.f64 = double(float(ctx.f9.f64));
	// bl 0x82a1e3e8
	sub_82A1E3E8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE3D88) {
	__imp__sub_82BE3D88(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3E00) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// fmr f31,f1
	f31.f64 = ctx.f1.f64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x8221eb58
	sub_8221EB58(ctx, base);
	// lfd f12,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f11,f12
	ctx.f11.f64 = double(ctx.f12.s64);
	// lis r11,-31927
	r11.s64 = -2092367872;
	// lis r10,-31927
	ctx.r10.s64 = -2092367872;
	// fmr f2,f31
	ctx.f2.f64 = f31.f64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r3,r31,72
	ctx.r3.s64 = r31.s64 + 72;
	// lfd f0,28352(r11)
	f0.u64 = PPC_LOAD_U64(r11.u32 + 28352);
	// lfd f13,28360(r10)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r10.u32 + 28360);
	// fsub f10,f11,f0
	ctx.f10.f64 = ctx.f11.f64 - f0.f64;
	// fdiv f9,f10,f13
	ctx.f9.f64 = ctx.f10.f64 / ctx.f13.f64;
	// frsp f1,f9
	ctx.f1.f64 = double(float(ctx.f9.f64));
	// bl 0x82a1e5b0
	sub_82A1E5B0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3E00) {
	__imp__sub_82BE3E00(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3E80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r3,r31,72
	ctx.r3.s64 = r31.s64 + 72;
	// bl 0x82a0f5c0
	sub_82A0F5C0(ctx, base);
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// li r11,0
	r11.s64 = 0;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// lfs f0,-27468(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -27468);
	f0.f64 = double(temp.f32);
	// stfs f0,84(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 84, temp.u32);
	// stfs f0,88(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 88, temp.u32);
	// lwz r9,92(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(92) );
	// sth r11,0(r9)
	PPC_STORE_U16(ctx.r9.u32 + 0, r11.u16);
	// lwz r8,92(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(92) );
	// sth r11,2(r8)
	PPC_STORE_U16(ctx.r8.u32 + 2, r11.u16);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// bl 0x822b2d60
	sub_822B2D60(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be3efc
	if (!cr6.eq) goto loc_82BE3EFC;
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r4,92(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(92) );
	// bl 0x82179fb8
	sub_82179FB8(ctx, base);
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE3EFC:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3E80) {
	__imp__sub_82BE3E80(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3F18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister f0{};
	PPCRegister temp{};
	// std r4,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.r4.u64);
	// lfs f13,28(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 28);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,24(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 24);
	f0.f64 = double(temp.f32);
	// stfs f0,24(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 24, temp.u32);
	// stfs f13,28(r3)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r3.u32 + 28, temp.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE3F18) {
	__imp__sub_82BE3F18(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE3F30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// std r4,232(r1)
	PPC_STORE_U64(ctx.r1.u32 + 232, ctx.r4.u64);
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// lwz r28,236(r1)
	r28.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(236) );
	// li r3,64
	ctx.r3.s64 = 64;
	// mr r26,r5
	r26.u64 = ctx.r5.u64;
	// lwz r27,4(r28)
	r27.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// bl 0x8221f388
	sub_8221F388(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be3f68
	if (cr6.eq) goto loc_82BE3F68;
	// stw r28,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r28.u32);
loc_82BE3F68:
	// addi r30,r31,4
	r30.s64 = r31.s64 + 4;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82be3f78
	if (cr6.eq) goto loc_82BE3F78;
	// stw r27,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r27.u32);
loc_82BE3F78:
	// addic. r3,r31,8
	xer.ca = r31.u32 > 4294967287;
	ctx.r3.s64 = r31.s64 + 8;
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// beq 0x82be3f8c
	if (cr0.eq) goto loc_82BE3F8C;
	// li r5,56
	ctx.r5.s64 = 56;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
loc_82BE3F8C:
	// lis r11,1170
	r11.s64 = 76677120;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// ori r9,r11,18724
	ctx.r9.u64 = r11.u64 | 18724;
	// subf r8,r10,r9
	ctx.r8.s64 = ctx.r9.s64 - ctx.r10.s64;
	// cmplwi cr6,r8,1
	cr6.compare<uint32_t>(ctx.r8.u32, 1, xer);
	// bge cr6,0x82be3fe8
	if (!cr6.lt) goto loc_82BE3FE8;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,11140
	ctx.r4.s64 = r11.s64 + 11140;
	// bl 0x822f2020
	sub_822F2020(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x826c3ef0
	sub_826C3EF0(ctx, base);
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// addi r27,r10,5696
	r27.s64 = ctx.r10.s64 + 5696;
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r27.u32);
	// bl 0x822f1f00
	sub_822F1F00(ctx, base);
	// stw r27,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, r27.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x826c3fa8
	sub_826C3FA8(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82171810
	sub_82171810(ctx, base);
loc_82BE3FE8:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// stw r31,4(r28)
	PPC_STORE_U32(r28.u32 + 4, r31.u32);
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// stw r31,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r31.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BE3F30) {
	__imp__sub_82BE3F30(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4008) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31924
	r11.s64 = -2092171264;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,-6744
	r31.s64 = r11.s64 + -6744;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be4090
	sub_82BE4090(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
	// beq cr6,0x82be4078
	if (cr6.eq) goto loc_82BE4078;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8221f388
	sub_8221F388(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be4070
	if (cr6.eq) goto loc_82BE4070;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lis r10,-32105
	ctx.r10.s64 = -2104033280;
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r8,r10,-32320
	ctx.r8.s64 = ctx.r10.s64 + -32320;
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// b 0x82be4078
	goto loc_82BE4078;
loc_82BE4070:
	// li r11,0
	r11.s64 = 0;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
loc_82BE4078:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4008) {
	__imp__sub_82BE4008(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4090) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCRegister reserved{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31924
	r11.s64 = -2092171264;
	// addi r31,r11,-6744
	r31.s64 = r11.s64 + -6744;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be40f8
	if (cr6.eq) goto loc_82BE40F8;
loc_82BE40B4:
	// mfmsr r9
	// mtmsrd r13,1
	// lwarx r10,0,r11
	reserved.u32 = *(uint32_t*)(base + r11.u32);
	ctx.r10.u64 = __builtin_bswap32(reserved.u32);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stwcx. r10,0,r11
	cr0.lt = 0;
	cr0.gt = 0;
	cr0.eq = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + r11.u32), reserved.s32, __builtin_bswap32(ctx.r10.s32));
	cr0.so = xer.so;
	// mtmsrd r9,1
	// bne 0x82be40b4
	if (!cr0.eq) goto loc_82BE40B4;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82be40f8
	if (!cr6.eq) goto loc_82BE40F8;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
loc_82BE40F8:
	// li r11,0
	r11.s64 = 0;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4090) {
	__imp__sub_82BE4090(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4120) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31924
	r11.s64 = -2092171264;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,-6736
	r31.s64 = r11.s64 + -6736;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be41a8
	sub_82BE41A8(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
	// beq cr6,0x82be4190
	if (cr6.eq) goto loc_82BE4190;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8221f388
	sub_8221F388(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be4188
	if (cr6.eq) goto loc_82BE4188;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lis r10,-32105
	ctx.r10.s64 = -2104033280;
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r8,r10,-32320
	ctx.r8.s64 = ctx.r10.s64 + -32320;
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// b 0x82be4190
	goto loc_82BE4190;
loc_82BE4188:
	// li r11,0
	r11.s64 = 0;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
loc_82BE4190:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4120) {
	__imp__sub_82BE4120(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE41A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCRegister reserved{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31924
	r11.s64 = -2092171264;
	// addi r31,r11,-6736
	r31.s64 = r11.s64 + -6736;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4210
	if (cr6.eq) goto loc_82BE4210;
loc_82BE41CC:
	// mfmsr r9
	// mtmsrd r13,1
	// lwarx r10,0,r11
	reserved.u32 = *(uint32_t*)(base + r11.u32);
	ctx.r10.u64 = __builtin_bswap32(reserved.u32);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stwcx. r10,0,r11
	cr0.lt = 0;
	cr0.gt = 0;
	cr0.eq = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + r11.u32), reserved.s32, __builtin_bswap32(ctx.r10.s32));
	cr0.so = xer.so;
	// mtmsrd r9,1
	// bne 0x82be41cc
	if (!cr0.eq) goto loc_82BE41CC;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82be4210
	if (!cr6.eq) goto loc_82BE4210;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
loc_82BE4210:
	// li r11,0
	r11.s64 = 0;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE41A8) {
	__imp__sub_82BE41A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4238) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31924
	r11.s64 = -2092171264;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r31,r11,-6728
	r31.s64 = r11.s64 + -6728;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be42c0
	sub_82BE42C0(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// stw r30,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r30.u32);
	// beq cr6,0x82be42a8
	if (cr6.eq) goto loc_82BE42A8;
	// li r3,12
	ctx.r3.s64 = 12;
	// bl 0x8221f388
	sub_8221F388(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be42a0
	if (cr6.eq) goto loc_82BE42A0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lis r10,-32105
	ctx.r10.s64 = -2104033280;
	// li r9,1
	ctx.r9.s64 = 1;
	// addi r8,r10,-32320
	ctx.r8.s64 = ctx.r10.s64 + -32320;
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
	// stw r11,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, r11.u32);
	// stw r3,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r3.u32);
	// b 0x82be42a8
	goto loc_82BE42A8;
loc_82BE42A0:
	// li r11,0
	r11.s64 = 0;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
loc_82BE42A8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4238) {
	__imp__sub_82BE4238(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE42C0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCRegister reserved{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-31924
	r11.s64 = -2092171264;
	// addi r31,r11,-6728
	r31.s64 = r11.s64 + -6728;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4328
	if (cr6.eq) goto loc_82BE4328;
loc_82BE42E4:
	// mfmsr r9
	// mtmsrd r13,1
	// lwarx r10,0,r11
	reserved.u32 = *(uint32_t*)(base + r11.u32);
	ctx.r10.u64 = __builtin_bswap32(reserved.u32);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stwcx. r10,0,r11
	cr0.lt = 0;
	cr0.gt = 0;
	cr0.eq = __sync_bool_compare_and_swap(reinterpret_cast<uint32_t*>(base + r11.u32), reserved.s32, __builtin_bswap32(ctx.r10.s32));
	cr0.so = xer.so;
	// mtmsrd r9,1
	// bne 0x82be42e4
	if (!cr0.eq) goto loc_82BE42E4;
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// bne cr6,0x82be4328
	if (!cr6.eq) goto loc_82BE4328;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r3,8(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r3,4(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
loc_82BE4328:
	// li r11,0
	r11.s64 = 0;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r11,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r11.u32);
	// stw r10,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r10.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE42C0) {
	__imp__sub_82BE42C0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4350) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// li r30,5
	r30.s64 = 5;
	// addi r31,r28,4
	r31.s64 = r28.s64 + 4;
	// li r29,0
	r29.s64 = 0;
loc_82BE436C:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be4390
	if (cr6.eq) goto loc_82BE4390;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r29,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r29.u32);
loc_82BE4390:
	// addic. r30,r30,-1
	xer.ca = r30.u32 > 0;
	r30.s64 = r30.s64 + -1;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// addi r31,r31,8
	r31.s64 = r31.s64 + 8;
	// bne 0x82be436c
	if (!cr0.eq) goto loc_82BE436C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE4350) {
	__imp__sub_82BE4350(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE43B0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,44
	ctx.r3.s64 = 44;
	// bl 0x8221f388
	sub_8221F388(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be4408
	if (cr6.eq) goto loc_82BE4408;
	// li r9,0
	ctx.r9.s64 = 0;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// stb r9,40(r3)
	PPC_STORE_U8(ctx.r3.u32 + 40, ctx.r9.u8);
	// li r10,5
	ctx.r10.s64 = 5;
	// stb r9,41(r3)
	PPC_STORE_U8(ctx.r3.u32 + 41, ctx.r9.u8);
	// li r8,1
	ctx.r8.s64 = 1;
loc_82BE43E4:
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r9,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r9.u32);
	// addi r11,r11,8
	r11.s64 = r11.s64 + 8;
	// bne 0x82be43e4
	if (!cr0.eq) goto loc_82BE43E4;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
loc_82BE4408:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE43B0) {
	__imp__sub_82BE43B0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4420) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCVRegister v127{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bc8
	// li r12,-128
	r12.s64 = -128;
	// stvx128 v127,r1,r12
	ea = (ctx.r1.u32 + r12.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// vor128 v127,v1,v1
	simd::store_i8(v127.u8, simd::load_i8(ctx.v1.u8));
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82ab7168
	sub_82AB7168(ctx, base);
	// li r6,0
	ctx.r6.s64 = 0;
	// cmpwi cr6,r30,4
	cr6.compare<int32_t>(r30.s32, 4, xer);
	// blt cr6,0x82be45b0
	if (cr6.lt) goto loc_82BE45B0;
	// addi r11,r30,-4
	r11.s64 = r30.s64 + -4;
	// lwz r8,8(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// addi r6,r1,144
	ctx.r6.s64 = ctx.r1.s64 + 144;
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// addi r7,r1,128
	ctx.r7.s64 = ctx.r1.s64 + 128;
	// rlwinm r11,r11,30,2,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFF;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// stvx128 v127,r0,r6
	ea = (ctx.r6.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// stvx128 v127,r0,r5
	ea = (ctx.r5.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r11,r8,64
	r11.s64 = ctx.r8.s64 + 64;
	// stvx128 v127,r0,r7
	ea = (ctx.r7.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// rlwinm r6,r9,2,0,29
	ctx.r6.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lfs f0,128(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	f0.f64 = double(temp.f32);
	// li r3,-48
	ctx.r3.s64 = -48;
	// lfs f13,148(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f13.f64 = double(temp.f32);
	// li r4,48
	ctx.r4.s64 = 48;
	// lfs f12,168(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	ctx.f12.f64 = double(temp.f32);
	// li r5,96
	ctx.r5.s64 = 96;
loc_82BE44A4:
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// lvx128 v0,r11,r3
	simd::store_shuffled(ctx.v0, simd::load_and_shuffle(base + ((r11.u32 + ctx.r3.u32) & ~0xF), VectorMaskL));
	// addi r28,r1,80
	r28.s64 = ctx.r1.s64 + 80;
	// lwz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// addi r27,r1,96
	r27.s64 = ctx.r1.s64 + 96;
	// addi r26,r1,96
	r26.s64 = ctx.r1.s64 + 96;
	// addi r25,r1,112
	r25.s64 = ctx.r1.s64 + 112;
	// stvx128 v0,r0,r8
	ea = (ctx.r8.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v0), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r24,r1,112
	r24.s64 = ctx.r1.s64 + 112;
	// lfs f11,88(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f11.f64 = double(temp.f32);
	// addi r23,r1,80
	r23.s64 = ctx.r1.s64 + 80;
	// stvx128 v0,r0,r27
	ea = (r27.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v0), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r27,r1,80
	r27.s64 = ctx.r1.s64 + 80;
	// lfs f10,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f10.f64 = double(temp.f32);
	// addi r22,r1,96
	r22.s64 = ctx.r1.s64 + 96;
	// stvx128 v0,r0,r25
	ea = (r25.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v0), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r25,r1,96
	r25.s64 = ctx.r1.s64 + 96;
	// lfs f9,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f9.f64 = double(temp.f32);
	// fmuls f8,f13,f9
	ctx.f8.f64 = double(float(ctx.f13.f64 * ctx.f9.f64));
	// fmadds f7,f12,f11,f8
	ctx.f7.f64 = double(std::fma(float(ctx.f12.f64), float(ctx.f11.f64), float(ctx.f8.f64)));
	// addi r21,r1,112
	r21.s64 = ctx.r1.s64 + 112;
	// addi r20,r1,112
	r20.s64 = ctx.r1.s64 + 112;
	// addi r8,r10,12
	ctx.r8.s64 = ctx.r10.s64 + 12;
	// addic. r9,r9,-1
	xer.ca = ctx.r9.u32 > 0;
	ctx.r9.s64 = ctx.r9.s64 + -1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// fmadds f6,f0,f10,f7
	ctx.f6.f64 = double(std::fma(float(f0.f64), float(ctx.f10.f64), float(ctx.f7.f64)));
	// stfsx f6,r7,r10
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r7.u32 + ctx.r10.u32, temp.u32);
	// lvx128 v13,r0,r11
	simd::store_shuffled(ctx.v13, simd::load_and_shuffle(base + ((r11.u32) & ~0xF), VectorMaskL));
	// lwz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stvx128 v13,r0,r28
	ea = (r28.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v13), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f5,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f5.f64 = double(temp.f32);
	// add r7,r7,r10
	ctx.r7.u64 = ctx.r7.u64 + ctx.r10.u64;
	// stvx128 v13,r0,r26
	ea = (r26.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v13), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r10,r10,16
	ctx.r10.s64 = ctx.r10.s64 + 16;
	// lfs f4,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f4.f64 = double(temp.f32);
	// stvx128 v13,r0,r24
	ea = (r24.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v13), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f3,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f3.f64 = double(temp.f32);
	// fmuls f2,f13,f3
	ctx.f2.f64 = double(float(ctx.f13.f64 * ctx.f3.f64));
	// fmadds f1,f12,f5,f2
	ctx.f1.f64 = double(std::fma(float(ctx.f12.f64), float(ctx.f5.f64), float(ctx.f2.f64)));
	// fmadds f11,f0,f4,f1
	ctx.f11.f64 = double(std::fma(float(f0.f64), float(ctx.f4.f64), float(ctx.f1.f64)));
	// stfs f11,4(r7)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r7.u32 + 4, temp.u32);
	// lvx128 v12,r11,r4
	simd::store_shuffled(ctx.v12, simd::load_and_shuffle(base + ((r11.u32 + ctx.r4.u32) & ~0xF), VectorMaskL));
	// lwz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stvx128 v12,r0,r23
	ea = (r23.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v12), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f10,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f10.f64 = double(temp.f32);
	// add r7,r7,r8
	ctx.r7.u64 = ctx.r7.u64 + ctx.r8.u64;
	// stvx128 v12,r0,r22
	ea = (r22.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v12), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f9,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f9.f64 = double(temp.f32);
	// stvx128 v12,r0,r21
	ea = (r21.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v12), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f8,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f8.f64 = double(temp.f32);
	// fmuls f7,f13,f8
	ctx.f7.f64 = double(float(ctx.f13.f64 * ctx.f8.f64));
	// fmadds f6,f12,f10,f7
	ctx.f6.f64 = double(std::fma(float(ctx.f12.f64), float(ctx.f10.f64), float(ctx.f7.f64)));
	// fmadds f5,f0,f9,f6
	ctx.f5.f64 = double(std::fma(float(f0.f64), float(ctx.f9.f64), float(ctx.f6.f64)));
	// stfs f5,-4(r7)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r7.u32 + -4, temp.u32);
	// lvx128 v11,r11,r5
	simd::store_shuffled(ctx.v11, simd::load_and_shuffle(base + ((r11.u32 + ctx.r5.u32) & ~0xF), VectorMaskL));
	// lwz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stvx128 v11,r0,r27
	ea = (r27.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v11), &VectorMaskL[(ea & 0xF) * 16]);
	// addi r11,r11,192
	r11.s64 = r11.s64 + 192;
	// lfs f4,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f4.f64 = double(temp.f32);
	// stvx128 v11,r0,r25
	ea = (r25.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v11), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f3,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f3.f64 = double(temp.f32);
	// stvx128 v11,r0,r20
	ea = (r20.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v11), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f2,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f2.f64 = double(temp.f32);
	// fmuls f1,f13,f2
	ctx.f1.f64 = double(float(ctx.f13.f64 * ctx.f2.f64));
	// fmadds f11,f12,f4,f1
	ctx.f11.f64 = double(std::fma(float(ctx.f12.f64), float(ctx.f4.f64), float(ctx.f1.f64)));
	// fmadds f10,f0,f3,f11
	ctx.f10.f64 = double(std::fma(float(f0.f64), float(ctx.f3.f64), float(ctx.f11.f64)));
	// stfsx f10,r7,r8
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r7.u32 + ctx.r8.u32, temp.u32);
	// bne 0x82be44a4
	if (!cr0.eq) goto loc_82BE44A4;
loc_82BE45B0:
	// cmpw cr6,r6,r30
	cr6.compare<int32_t>(ctx.r6.s32, r30.s32, xer);
	// bge cr6,0x82be4648
	if (!cr6.lt) goto loc_82BE4648;
	// addi r9,r1,128
	ctx.r9.s64 = ctx.r1.s64 + 128;
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r11,r6,1,0,30
	r11.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r7,r1,144
	ctx.r7.s64 = ctx.r1.s64 + 144;
	// add r8,r6,r11
	ctx.r8.u64 = ctx.r6.u64 + r11.u64;
	// addi r5,r1,160
	ctx.r5.s64 = ctx.r1.s64 + 160;
	// stvx128 v127,r0,r9
	ea = (ctx.r9.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// rlwinm r11,r8,4,0,27
	r11.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// rlwinm r9,r6,2,0,29
	ctx.r9.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// stvx128 v127,r0,r7
	ea = (ctx.r7.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f13,148(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f13.f64 = double(temp.f32);
	// addi r10,r11,16
	ctx.r10.s64 = r11.s64 + 16;
	// stvx128 v127,r0,r5
	ea = (ctx.r5.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(v127), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f12,168(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	ctx.f12.f64 = double(temp.f32);
	// subf r11,r6,r30
	r11.s64 = r30.s64 - ctx.r6.s64;
	// lfs f0,128(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	f0.f64 = double(temp.f32);
loc_82BE45FC:
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// lvx128 v0,r0,r10
	simd::store_shuffled(ctx.v0, simd::load_and_shuffle(base + ((ctx.r10.u32) & ~0xF), VectorMaskL));
	// addi r7,r1,96
	ctx.r7.s64 = ctx.r1.s64 + 96;
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// addi r10,r10,48
	ctx.r10.s64 = ctx.r10.s64 + 48;
	// stvx128 v0,r0,r8
	ea = (ctx.r8.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v0), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f11,88(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f11.f64 = double(temp.f32);
	// stvx128 v0,r0,r7
	ea = (ctx.r7.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v0), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f10,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f10.f64 = double(temp.f32);
	// stvx128 v0,r0,r5
	ea = (ctx.r5.u32) & ~0xF;
	simd::store_shuffled(base + ea, simd::to_vec128i(ctx.v0), &VectorMaskL[(ea & 0xF) * 16]);
	// lfs f9,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f9.f64 = double(temp.f32);
	// fmuls f8,f13,f9
	ctx.f8.f64 = double(float(ctx.f13.f64 * ctx.f9.f64));
	// fmadds f7,f12,f11,f8
	ctx.f7.f64 = double(std::fma(float(ctx.f12.f64), float(ctx.f11.f64), float(ctx.f8.f64)));
	// fmadds f6,f0,f10,f7
	ctx.f6.f64 = double(std::fma(float(f0.f64), float(ctx.f10.f64), float(ctx.f7.f64)));
	// stfsx f6,r6,r9
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r6.u32 + ctx.r9.u32, temp.u32);
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// bne 0x82be45fc
	if (!cr0.eq) goto loc_82BE45FC;
loc_82BE4648:
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// li r0,-128
	r0.s64 = -128;
	// lvx128 v127,r1,r0
	simd::store_shuffled(v127, simd::load_and_shuffle(base + ((ctx.r1.u32 + r0.u32) & ~0xF), VectorMaskL));
	// b 0x82ca2c18
	return;
}

PPC_WEAK_FUNC(sub_82BE4420) {
	__imp__sub_82BE4420(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4658) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82a10870
	sub_82A10870(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4690
	if (cr6.eq) goto loc_82BE4690;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82BE4690:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4658) {
	__imp__sub_82BE4658(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE46A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r4,r30,4
	ctx.r4.s64 = r30.s64 + 4;
	// addi r3,r31,4
	ctx.r3.s64 = r31.s64 + 4;
	// lwz r11,44(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(44) );
	// stw r10,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r10.u32);
	// stw r11,44(r31)
	PPC_STORE_U32(r31.u32 + 44, r11.u32);
	// bl 0x82be4720
	sub_82BE4720(ctx, base);
	// lwz r9,20(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// stw r9,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r9.u32);
	// lwz r8,24(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + int32_t(24) );
	// stw r8,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r8.u32);
	// lwz r7,28(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// stw r7,28(r31)
	PPC_STORE_U32(r31.u32 + 28, ctx.r7.u32);
	// lwz r6,32(r30)
	ctx.r6.u64 = PPC_LOAD_U32(r30.u32 + int32_t(32) );
	// stw r6,32(r31)
	PPC_STORE_U32(r31.u32 + 32, ctx.r6.u32);
	// lwz r5,36(r30)
	ctx.r5.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// stw r5,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r5.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE46A8) {
	__imp__sub_82BE46A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4720) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bec
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	r29.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// cmplw cr6,r29,r31
	cr6.compare<uint32_t>(r29.u32, r31.u32, xer);
	// beq cr6,0x82be4968
	if (cr6.eq) goto loc_82BE4968;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// subf r10,r11,r9
	ctx.r10.s64 = ctx.r9.s64 - r11.s64;
	// srawi. r7,r10,5
	xer.ca = (ctx.r10.s32 < 0) & ((ctx.r10.u32 & 0x1F) != 0);
	ctx.r7.s64 = ctx.r10.s32 >> 5;
	cr0.compare<int32_t>(ctx.r7.s32, 0, xer);
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// bne 0x82be478c
	if (!cr0.eq) goto loc_82BE478C;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// li r30,0
	r30.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, r30.u32);
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, r30.u32);
	// ld r5,88(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// ld r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// bl 0x82a04bc0
	sub_82A04BC0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
loc_82BE478C:
	// lwz r8,8(r29)
	ctx.r8.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// subf r6,r10,r8
	ctx.r6.s64 = ctx.r8.s64 - ctx.r10.s64;
	// srawi r8,r6,5
	xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x1F) != 0);
	ctx.r8.s64 = ctx.r6.s32 >> 5;
	// cmplw cr6,r7,r8
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r8.u32, xer);
	// bgt cr6,0x82be4804
	if (cr6.gt) goto loc_82BE4804;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be47d8
	if (cr6.eq) goto loc_82BE47D8;
loc_82BE47A8:
	// ld r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r8,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r8.u64);
	// ld r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// std r7,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r7.u64);
	// ld r6,16(r11)
	ctx.r6.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// std r6,16(r10)
	PPC_STORE_U64(ctx.r10.u32 + 16, ctx.r6.u64);
	// ld r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U64(r11.u32 + 24);
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// std r5,24(r10)
	PPC_STORE_U64(ctx.r10.u32 + 24, ctx.r5.u64);
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be47a8
	if (!cr6.eq) goto loc_82BE47A8;
loc_82BE47D8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// subf r8,r9,r11
	ctx.r8.s64 = r11.s64 - ctx.r9.s64;
	// srawi r7,r8,5
	xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1F) != 0);
	ctx.r7.s64 = ctx.r8.s32 >> 5;
	// rlwinm r11,r7,5,0,26
	r11.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 5) & 0xFFFFFFE0;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// stw r6,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r6.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
loc_82BE4804:
	// li r30,0
	r30.s64 = 0;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be4818
	if (!cr6.eq) goto loc_82BE4818;
	// mr r11,r30
	r11.u64 = r30.u64;
	// b 0x82be4824
	goto loc_82BE4824;
loc_82BE4818:
	// lwz r11,12(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(12) );
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// srawi r11,r9,5
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1F) != 0);
	r11.s64 = ctx.r9.s32 >> 5;
loc_82BE4824:
	// cmplw cr6,r7,r11
	cr6.compare<uint32_t>(ctx.r7.u32, r11.u32, xer);
	// bgt cr6,0x82be48cc
	if (cr6.gt) goto loc_82BE48CC;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r9,r8,5,0,26
	ctx.r9.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 5) & 0xFFFFFFE0;
	// add r9,r9,r11
	ctx.r9.u64 = ctx.r9.u64 + r11.u64;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be4870
	if (cr6.eq) goto loc_82BE4870;
loc_82BE4840:
	// ld r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r8,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r8.u64);
	// ld r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// std r7,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r7.u64);
	// ld r6,16(r11)
	ctx.r6.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// std r6,16(r10)
	PPC_STORE_U64(ctx.r10.u32 + 16, ctx.r6.u64);
	// ld r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U64(r11.u32 + 24);
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// std r5,24(r10)
	PPC_STORE_U64(ctx.r10.u32 + 24, ctx.r5.u64);
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be4840
	if (!cr6.eq) goto loc_82BE4840;
loc_82BE4870:
	// lwz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r10,r9
	ctx.r10.u64 = ctx.r9.u64;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// beq cr6,0x82be48bc
	if (cr6.eq) goto loc_82BE48BC;
loc_82BE4884:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be48ac
	if (cr6.eq) goto loc_82BE48AC;
	// ld r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r10.u32 + 0);
	// std r9,0(r11)
	PPC_STORE_U64(r11.u32 + 0, ctx.r9.u64);
	// ld r7,8(r10)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r10.u32 + 8);
	// std r7,8(r11)
	PPC_STORE_U64(r11.u32 + 8, ctx.r7.u64);
	// ld r6,16(r10)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r10.u32 + 16);
	// std r6,16(r11)
	PPC_STORE_U64(r11.u32 + 16, ctx.r6.u64);
	// ld r5,24(r10)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r10.u32 + 24);
	// std r5,24(r11)
	PPC_STORE_U64(r11.u32 + 24, ctx.r5.u64);
loc_82BE48AC:
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// cmplw cr6,r10,r8
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r8.u32, xer);
	// bne cr6,0x82be4884
	if (!cr6.eq) goto loc_82BE4884;
loc_82BE48BC:
	// stw r11,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r11.u32);
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
loc_82BE48CC:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be48dc
	if (cr6.eq) goto loc_82BE48DC;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
loc_82BE48DC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r30,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r30.u32);
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// stw r30,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r30.u32);
	// stw r30,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r30.u32);
	// srawi. r4,r9,5
	xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1F) != 0);
	ctx.r4.s64 = ctx.r9.s32 >> 5;
	cr0.compare<int32_t>(ctx.r4.s32, 0, xer);
	// bne 0x82be4904
	if (!cr0.eq) goto loc_82BE4904;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// b 0x82be490c
	goto loc_82BE490C;
loc_82BE4904:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// bl 0x82be4978
	sub_82BE4978(ctx, base);
loc_82BE490C:
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4968
	if (cr6.eq) goto loc_82BE4968;
	// lwz r9,8(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be4964
	if (cr6.eq) goto loc_82BE4964;
loc_82BE492C:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be4954
	if (cr6.eq) goto loc_82BE4954;
	// ld r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U64(r11.u32 + 0);
	// std r8,0(r10)
	PPC_STORE_U64(ctx.r10.u32 + 0, ctx.r8.u64);
	// ld r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U64(r11.u32 + 8);
	// std r7,8(r10)
	PPC_STORE_U64(ctx.r10.u32 + 8, ctx.r7.u64);
	// ld r6,16(r11)
	ctx.r6.u64 = PPC_LOAD_U64(r11.u32 + 16);
	// std r6,16(r10)
	PPC_STORE_U64(ctx.r10.u32 + 16, ctx.r6.u64);
	// ld r5,24(r11)
	ctx.r5.u64 = PPC_LOAD_U64(r11.u32 + 24);
	// std r5,24(r10)
	PPC_STORE_U64(ctx.r10.u32 + 24, ctx.r5.u64);
loc_82BE4954:
	// addi r11,r11,32
	r11.s64 = r11.s64 + 32;
	// addi r10,r10,32
	ctx.r10.s64 = ctx.r10.s64 + 32;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be492c
	if (!cr6.eq) goto loc_82BE492C;
loc_82BE4964:
	// stw r10,8(r29)
	PPC_STORE_U32(r29.u32 + 8, ctx.r10.u32);
loc_82BE4968:
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c3c
	return;
}

PPC_WEAK_FUNC(sub_82BE4720) {
	__imp__sub_82BE4720(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4978) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,2047
	r11.s64 = 134152192;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// ori r10,r11,65535
	ctx.r10.u64 = r11.u64 | 65535;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplw cr6,r30,r10
	cr6.compare<uint32_t>(r30.u32, ctx.r10.u32, xer);
	// ble cr6,0x82be49ac
	if (!cr6.gt) goto loc_82BE49AC;
	// bl 0x82a97648
	sub_82A97648(ctx, base);
	// b 0x82be49d0
	goto loc_82BE49D0;
loc_82BE49AC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82925ff8
	sub_82925FF8(ctx, base);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// rlwinm r10,r30,5,0,26
	ctx.r10.u64 = rotl64(r30.u32 | (r30.u64 << 32), 5) & 0xFFFFFFE0;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
loc_82BE49D0:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4978) {
	__imp__sub_82BE4978(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE49F0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// addi r8,r11,-1124
	ctx.r8.s64 = r11.s64 + -1124;
	// li r11,0
	r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r8,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r8.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, r11.u32);
	// lfs f0,-27468(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -27468);
	f0.f64 = double(temp.f32);
	// stb r10,20(r3)
	PPC_STORE_U8(ctx.r3.u32 + 20, ctx.r10.u8);
	// stfs f0,8(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 8, temp.u32);
	// stb r10,21(r3)
	PPC_STORE_U8(ctx.r3.u32 + 21, ctx.r10.u8);
	// stfs f0,12(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 12, temp.u32);
	// stb r11,22(r3)
	PPC_STORE_U8(ctx.r3.u32 + 22, r11.u8);
	// stfs f0,16(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 16, temp.u32);
	// stb r11,23(r3)
	PPC_STORE_U8(ctx.r3.u32 + 23, r11.u8);
	// stfs f0,32(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 32, temp.u32);
	// stb r11,24(r3)
	PPC_STORE_U8(ctx.r3.u32 + 24, r11.u8);
	// stfs f0,36(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 36, temp.u32);
	// stw r11,28(r3)
	PPC_STORE_U32(ctx.r3.u32 + 28, r11.u32);
	// stfs f0,40(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 40, temp.u32);
	// stb r10,44(r3)
	PPC_STORE_U8(ctx.r3.u32 + 44, ctx.r10.u8);
	// stfs f0,56(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 56, temp.u32);
	// stb r10,45(r3)
	PPC_STORE_U8(ctx.r3.u32 + 45, ctx.r10.u8);
	// stfs f0,60(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 60, temp.u32);
	// stb r11,46(r3)
	PPC_STORE_U8(ctx.r3.u32 + 46, r11.u8);
	// stfs f0,64(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 64, temp.u32);
	// stb r11,47(r3)
	PPC_STORE_U8(ctx.r3.u32 + 47, r11.u8);
	// stfs f0,80(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 80, temp.u32);
	// stb r11,48(r3)
	PPC_STORE_U8(ctx.r3.u32 + 48, r11.u8);
	// stfs f0,84(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 84, temp.u32);
	// stw r11,52(r3)
	PPC_STORE_U32(ctx.r3.u32 + 52, r11.u32);
	// stfs f0,88(r3)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(ctx.r3.u32 + 88, temp.u32);
	// stb r10,68(r3)
	PPC_STORE_U8(ctx.r3.u32 + 68, ctx.r10.u8);
	// stb r10,69(r3)
	PPC_STORE_U8(ctx.r3.u32 + 69, ctx.r10.u8);
	// stb r11,70(r3)
	PPC_STORE_U8(ctx.r3.u32 + 70, r11.u8);
	// stb r11,71(r3)
	PPC_STORE_U8(ctx.r3.u32 + 71, r11.u8);
	// stb r11,72(r3)
	PPC_STORE_U8(ctx.r3.u32 + 72, r11.u8);
	// stw r11,76(r3)
	PPC_STORE_U32(ctx.r3.u32 + 76, r11.u32);
	// stb r10,92(r3)
	PPC_STORE_U8(ctx.r3.u32 + 92, ctx.r10.u8);
	// stb r10,93(r3)
	PPC_STORE_U8(ctx.r3.u32 + 93, ctx.r10.u8);
	// stb r11,94(r3)
	PPC_STORE_U8(ctx.r3.u32 + 94, r11.u8);
	// stb r11,95(r3)
	PPC_STORE_U8(ctx.r3.u32 + 95, r11.u8);
	// stb r11,96(r3)
	PPC_STORE_U8(ctx.r3.u32 + 96, r11.u8);
	// stw r11,100(r3)
	PPC_STORE_U32(ctx.r3.u32 + 100, r11.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE49F0) {
	__imp__sub_82BE49F0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4AA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister f0{};
	PPCRegister temp{};
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lwz r11,100(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(100) );
	// cmpwi cr6,r11,4
	cr6.compare<int32_t>(r11.s32, 4, xer);
	// blt cr6,0x82be4ac0
	if (cr6.lt) goto loc_82BE4AC0;
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_82BE4AC0:
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r8,0(r4)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// li r3,1
	ctx.r3.s64 = 1;
	// add r7,r11,r9
	ctx.r7.u64 = r11.u64 + ctx.r9.u64;
	// rlwinm r11,r7,3,0,28
	r11.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r9,r11,4
	ctx.r9.s64 = r11.s64 + 4;
	// stw r8,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r8.u32);
	// lfs f0,4(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	f0.f64 = double(temp.f32);
	// stfs f0,8(r11)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r11.u32 + 8, temp.u32);
	// lfs f13,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,12(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(r11.u32 + 12, temp.u32);
	// lfs f12,12(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,16(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(r11.u32 + 16, temp.u32);
	// lbz r6,16(r4)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r4.u32 + 16);
	// stb r6,20(r11)
	PPC_STORE_U8(r11.u32 + 20, ctx.r6.u8);
	// lbz r5,17(r4)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r4.u32 + 17);
	// stb r5,21(r11)
	PPC_STORE_U8(r11.u32 + 21, ctx.r5.u8);
	// lbz r9,18(r4)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r4.u32 + 18);
	// stb r9,22(r11)
	PPC_STORE_U8(r11.u32 + 22, ctx.r9.u8);
	// lbz r8,19(r4)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r4.u32 + 19);
	// stb r8,23(r11)
	PPC_STORE_U8(r11.u32 + 23, ctx.r8.u8);
	// lbz r7,20(r4)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r4.u32 + 20);
	// stb r7,24(r11)
	PPC_STORE_U8(r11.u32 + 24, ctx.r7.u8);
	// lwz r11,100(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(100) );
	// addi r6,r11,1
	ctx.r6.s64 = r11.s64 + 1;
	// stw r6,100(r10)
	PPC_STORE_U32(ctx.r10.u32 + 100, ctx.r6.u32);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4AA8) {
	__imp__sub_82BE4AA8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4B30) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82be4b80
	sub_82BE4B80(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4b68
	if (cr6.eq) goto loc_82BE4B68;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82BE4B68:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4B30) {
	__imp__sub_82BE4B30(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4B80) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// addi r30,r28,24
	r30.s64 = r28.s64 + 24;
	// addi r10,r11,6980
	ctx.r10.s64 = r11.s64 + 6980;
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(28) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be4bb0
	if (cr6.eq) goto loc_82BE4BB0;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
loc_82BE4BB0:
	// li r31,0
	r31.s64 = 0;
	// addi r29,r28,8
	r29.s64 = r28.s64 + 8;
	// stw r31,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r31.u32);
	// stw r31,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r31.u32);
	// stw r31,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r31.u32);
	// lwz r3,12(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(12) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be4bd4
	if (cr6.eq) goto loc_82BE4BD4;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
loc_82BE4BD4:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// stw r31,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r31.u32);
	// stw r31,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r31.u32);
	// addi r10,r11,-1124
	ctx.r10.s64 = r11.s64 + -1124;
	// stw r31,12(r29)
	PPC_STORE_U32(r29.u32 + 12, r31.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE4B80) {
	__imp__sub_82BE4B80(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4BF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r28,r4
	r28.u64 = ctx.r4.u64;
	// addi r23,r30,16
	r23.s64 = r30.s64 + 16;
	// li r27,1
	r27.s64 = 1;
	// li r25,0
	r25.s64 = 0;
	// li r24,97
	r24.s64 = 97;
	// addi r26,r11,-3528
	r26.s64 = r11.s64 + -3528;
loc_82BE4C24:
	// lwz r11,20(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// addi r9,r28,15
	ctx.r9.s64 = r28.s64 + 15;
	// mr r10,r23
	ctx.r10.u64 = r23.u64;
	// rlwinm r28,r9,0,0,27
	r28.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0xFFFFFFF0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4c58
	if (cr6.eq) goto loc_82BE4C58;
loc_82BE4C3C:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplw cr6,r28,r9
	cr6.compare<uint32_t>(r28.u32, ctx.r9.u32, xer);
	// ble cr6,0x82be4d00
	if (!cr6.gt) goto loc_82BE4D00;
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82be4c3c
	if (!cr6.eq) goto loc_82BE4C3C;
loc_82BE4C58:
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be4c6c
	if (cr6.eq) goto loc_82BE4C6C;
	// lwz r11,12(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(12) );
loc_82BE4C6C:
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// mr r29,r28
	r29.u64 = r28.u64;
	// blt cr6,0x82be4c7c
	if (cr6.lt) goto loc_82BE4C7C;
	// mr r29,r11
	r29.u64 = r11.u64;
loc_82BE4C7C:
	// li r3,24
	ctx.r3.s64 = 24;
	// bl 0x8221f388
	sub_8221F388(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be4cb8
	if (cr6.eq) goto loc_82BE4CB8;
	// addi r3,r29,16
	ctx.r3.s64 = r29.s64 + 16;
	// stw r27,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r27.u32);
	// stw r26,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r26.u32);
	// stw r3,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r3.u32);
	// stw r25,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r25.u32);
	// bl 0x8221f388
	sub_8221F388(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
	// mr r11,r31
	r11.u64 = r31.u64;
	// stb r27,12(r31)
	PPC_STORE_U8(r31.u32 + 12, r27.u8);
	// b 0x82be4cbc
	goto loc_82BE4CBC;
loc_82BE4CB8:
	// mr r11,r25
	r11.u64 = r25.u64;
loc_82BE4CBC:
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(16) );
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// addi r8,r10,-16
	ctx.r8.s64 = ctx.r10.s64 + -16;
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// stw r24,8(r9)
	PPC_STORE_U32(ctx.r9.u32 + 8, r24.u32);
	// lwz r7,20(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// stw r7,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r7.u32);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r9,20(r30)
	PPC_STORE_U32(r30.u32 + 20, ctx.r9.u32);
	// beq cr6,0x82be4cf4
	if (cr6.eq) goto loc_82BE4CF4;
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// add r9,r9,r29
	ctx.r9.u64 = ctx.r9.u64 + r29.u64;
	// stw r9,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r9.u32);
loc_82BE4CF4:
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// b 0x82be4c24
	goto loc_82BE4C24;
loc_82BE4D00:
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// li r8,103
	ctx.r8.s64 = 103;
	// addi r3,r11,16
	ctx.r3.s64 = r11.s64 + 16;
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// subf r9,r28,r7
	ctx.r9.s64 = ctx.r7.s64 - r28.s64;
	// stw r8,8(r11)
	PPC_STORE_U32(r11.u32 + 8, ctx.r8.u32);
	// cmplwi cr6,r9,16
	cr6.compare<uint32_t>(ctx.r9.u32, 16, xer);
	// ble cr6,0x82be4d48
	if (!cr6.gt) goto loc_82BE4D48;
	// add r10,r11,r28
	ctx.r10.u64 = r11.u64 + r28.u64;
	// addi r8,r9,-16
	ctx.r8.s64 = ctx.r9.s64 + -16;
	// addi r9,r10,16
	ctx.r9.s64 = ctx.r10.s64 + 16;
	// stw r8,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r8.u32);
	// stw r24,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r24.u32);
	// lwz r7,20(r30)
	ctx.r7.u64 = PPC_LOAD_U32(r30.u32 + int32_t(20) );
	// stw r7,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r7.u32);
	// stw r9,20(r30)
	PPC_STORE_U32(r30.u32 + 20, ctx.r9.u32);
	// stw r28,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r28.u32);
loc_82BE4D48:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c24
	return;
}

PPC_WEAK_FUNC(sub_82BE4BF8) {
	__imp__sub_82BE4BF8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4D50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r3,4(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be4dc4
	if (cr6.eq) goto loc_82BE4DC4;
	// lbz r11,12(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 12);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4da8
	if (cr6.eq) goto loc_82BE4DA8;
loc_82BE4D80:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r31,20(r3)
	r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(20) );
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82be4d80
	if (!cr6.eq) goto loc_82BE4D80;
	// b 0x82be4dbc
	goto loc_82BE4DBC;
loc_82BE4DA8:
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82BE4DBC:
	// li r11,0
	r11.s64 = 0;
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
loc_82BE4DC4:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4D50) {
	__imp__sub_82BE4D50(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4DE0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r9,r11,-3528
	ctx.r9.s64 = r11.s64 + -3528;
	// lbz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be4e1c
	if (cr6.eq) goto loc_82BE4E1C;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
loc_82BE4E1C:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// clrlwi r10,r30,31
	ctx.r10.u64 = r30.u32 & 0x1;
	// addi r9,r11,14884
	ctx.r9.s64 = r11.s64 + 14884;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82be4e40
	if (cr6.eq) goto loc_82BE4E40;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82BE4E40:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4DE0) {
	__imp__sub_82BE4DE0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4E58) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// addi r10,r11,-3516
	ctx.r10.s64 = r11.s64 + -3516;
	// stw r10,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r10.u32);
	// bl 0x82be4f60
	sub_82BE4F60(ctx, base);
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// clrlwi r8,r30,31
	ctx.r8.u64 = r30.u32 & 0x1;
	// addi r7,r9,-1124
	ctx.r7.s64 = ctx.r9.s64 + -1124;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// stw r7,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r7.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq cr6,0x82be4ea8
	if (cr6.eq) goto loc_82BE4EA8;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82BE4EA8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4E58) {
	__imp__sub_82BE4E58(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4EC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4f2c
	if (cr6.eq) goto loc_82BE4F2C;
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(16) );
	// lwz r8,8(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(8) );
	// addi r7,r10,4095
	ctx.r7.s64 = ctx.r10.s64 + 4095;
	// rlwinm r9,r7,0,0,19
	ctx.r9.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 0) & 0xFFFFF000;
	// add r10,r9,r3
	ctx.r10.u64 = ctx.r9.u64 + ctx.r3.u64;
	// cmplw cr6,r10,r8
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r8.u32, xer);
	// bgt cr6,0x82be4f2c
	if (cr6.gt) goto loc_82BE4F2C;
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// add r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
	// lwz r9,16(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(16) );
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// add r8,r9,r8
	ctx.r8.u64 = ctx.r9.u64 + ctx.r8.u64;
	// stw r8,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r8.u32);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// add r7,r10,r9
	ctx.r7.u64 = ctx.r10.u64 + ctx.r9.u64;
	// stw r7,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r7.u32);
	// stw r10,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r10.u32);
loc_82BE4F2C:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82be4f44
	if (!cr6.eq) goto loc_82BE4F44;
	// li r4,4096
	ctx.r4.s64 = 4096;
	// bl 0x82b380f0
	sub_82B380F0(ctx, base);
	// stw r3,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r3.u32);
loc_82BE4F44:
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4EC0) {
	__imp__sub_82BE4EC0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE4F60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lwz r8,12(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82be4fc8
	if (cr6.eq) goto loc_82BE4FC8;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r7,16(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(16) );
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(16) );
	// add r6,r10,r9
	ctx.r6.u64 = ctx.r10.u64 + ctx.r9.u64;
	// cmplw cr6,r7,r6
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r6.u32, xer);
	// bne cr6,0x82be4fe8
	if (!cr6.eq) goto loc_82BE4FE8;
	// subf r9,r9,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r9.s64;
	// li r10,0
	ctx.r10.s64 = 0;
	// stw r9,16(r11)
	PPC_STORE_U32(r11.u32 + 16, ctx.r9.u32);
	// stw r10,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r10.u32);
	// stw r10,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r10.u32);
	// stw r10,16(r31)
	PPC_STORE_U32(r31.u32 + 16, ctx.r10.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_82BE4FC8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be4fe8
	if (cr6.eq) goto loc_82BE4FE8;
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// subf r3,r10,r11
	ctx.r3.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r9,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r9.u32);
loc_82BE4FE8:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE4F60) {
	__imp__sub_82BE4F60(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5000) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// bl 0x82be5050
	sub_82BE5050(ctx, base);
	// clrlwi r11,r30,31
	r11.u64 = r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5038
	if (cr6.eq) goto loc_82BE5038;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
loc_82BE5038:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE5000) {
	__imp__sub_82BE5000(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5050) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r9,r10,-3520
	ctx.r9.s64 = ctx.r10.s64 + -3520;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5088
	if (cr6.eq) goto loc_82BE5088;
	// lwz r10,-8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-8) );
	// subf r3,r10,r11
	ctx.r3.s64 = r11.s64 - ctx.r10.s64;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
loc_82BE5088:
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// li r11,0
	r11.s64 = 0;
	// addi r9,r10,-1124
	ctx.r9.s64 = ctx.r10.s64 + -1124;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// stw r11,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r11.u32);
	// stw r11,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r11.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE5050) {
	__imp__sub_82BE5050(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE50C0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addis r10,r4,1109
	ctx.r10.s64 = ctx.r4.s64 + 72679424;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r11,r4,127
	r11.s64 = ctx.r4.s64 + 127;
	// addi r10,r10,32703
	ctx.r10.s64 = ctx.r10.s64 + 32703;
	// li r30,0
	r30.s64 = 0;
	// rlwinm r9,r11,0,0,25
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFC0;
	// rlwinm r8,r10,0,0,25
	ctx.r8.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFC0;
	// stw r30,8(r31)
	PPC_STORE_U32(r31.u32 + 8, r30.u32);
	// stw r9,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r9.u32);
	// addi r11,r31,20
	r11.s64 = r31.s64 + 20;
	// stw r8,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r8.u32);
	// li r10,31
	ctx.r10.s64 = 31;
	// stw r30,12(r31)
	PPC_STORE_U32(r31.u32 + 12, r30.u32);
	// stw r30,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r30.u32);
loc_82BE510C:
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r30,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r30.u32);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// bge 0x82be510c
	if (!cr0.lt) goto loc_82BE510C;
	// addi r3,r31,404
	ctx.r3.s64 = r31.s64 + 404;
	// bl 0x832b258c
	__imp__RtlInitializeCriticalSection(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lis r11,-21555
	r11.s64 = -1412628480;
	// li r9,64
	ctx.r9.s64 = 64;
	// ori r11,r11,43981
	r11.u64 = r11.u64 | 43981;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// lwz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// stw r30,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, r30.u32);
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r30,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, r30.u32);
	// lwz r5,0(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// stw r30,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, r30.u32);
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r30,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r30.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r8,36(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(36) );
	// oris r7,r8,32768
	ctx.r7.u64 = ctx.r8.u64 | 2147483648;
	// stw r7,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, ctx.r7.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r6,36(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(36) );
	// oris r5,r6,32768
	ctx.r5.u64 = ctx.r6.u64 | 2147483648;
	// stw r5,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, ctx.r5.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r4,36(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(36) );
	// oris r8,r4,16384
	ctx.r8.u64 = ctx.r4.u64 | 1073741824;
	// stw r8,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, ctx.r8.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r7,36(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(36) );
	// oris r6,r7,16384
	ctx.r6.u64 = ctx.r7.u64 | 1073741824;
	// stw r6,36(r10)
	PPC_STORE_U32(ctx.r10.u32 + 36, ctx.r6.u32);
	// lwz r5,0(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// stw r9,12(r5)
	PPC_STORE_U32(ctx.r5.u32 + 12, ctx.r9.u32);
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r9,12(r4)
	PPC_STORE_U32(ctx.r4.u32 + 12, ctx.r9.u32);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// stw r30,28(r10)
	PPC_STORE_U32(ctx.r10.u32 + 28, r30.u32);
	// lwz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r30,28(r9)
	PPC_STORE_U32(ctx.r9.u32 + 28, r30.u32);
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// stw r11,40(r8)
	PPC_STORE_U32(ctx.r8.u32 + 40, r11.u32);
	// lwz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// stw r11,40(r7)
	PPC_STORE_U32(ctx.r7.u32 + 40, r11.u32);
	// lwz r6,4(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r5,4(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(4) );
	// subf r10,r5,r6
	ctx.r10.s64 = ctx.r6.s64 - ctx.r5.s64;
	// lwz r4,-28(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-28) );
	// clrlwi r9,r4,2
	ctx.r9.u64 = ctx.r4.u32 & 0x3FFFFFFF;
	// stw r11,-64(r10)
	PPC_STORE_U32(ctx.r10.u32 + -64, r11.u32);
	// addi r4,r10,-64
	ctx.r4.s64 = ctx.r10.s64 + -64;
	// stw r9,-28(r10)
	PPC_STORE_U32(ctx.r10.u32 + -28, ctx.r9.u32);
	// lwz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// subf r10,r7,r8
	ctx.r10.s64 = ctx.r8.s64 - ctx.r7.s64;
	// addi r6,r10,-128
	ctx.r6.s64 = ctx.r10.s64 + -128;
	// stw r30,8(r4)
	PPC_STORE_U32(ctx.r4.u32 + 8, r30.u32);
	// rotlwi r10,r6,0
	ctx.r10.u64 = rotl32(ctx.r6.u32, 0);
	// stw r6,4(r4)
	PPC_STORE_U32(ctx.r4.u32 + 4, ctx.r6.u32);
	// lwz r5,0(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// stw r10,8(r5)
	PPC_STORE_U32(ctx.r5.u32 + 8, ctx.r10.u32);
	// stw r11,40(r4)
	PPC_STORE_U32(ctx.r4.u32 + 40, r11.u32);
	// bl 0x82be5700
	sub_82BE5700(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE50C0) {
	__imp__sub_82BE50C0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5240) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r30,404
	ctx.r4.s64 = r30.s64 + 404;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// mr r27,r7
	r27.u64 = ctx.r7.u64;
	// mr r26,r8
	r26.u64 = ctx.r8.u64;
	// bl 0x82200688
	sub_82200688(ctx, base);
	// cmplwi cr6,r31,64
	cr6.compare<uint32_t>(r31.u32, 64, xer);
	// bge cr6,0x82be5280
	if (!cr6.lt) goto loc_82BE5280;
	// li r31,64
	r31.s64 = 64;
loc_82BE5280:
	// cmplwi cr6,r29,64
	cr6.compare<uint32_t>(r29.u32, 64, xer);
	// bge cr6,0x82be528c
	if (!cr6.lt) goto loc_82BE528C;
	// li r29,64
	r29.s64 = 64;
loc_82BE528C:
	// cntlzw r11,r31
	r11.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// li r9,1
	ctx.r9.s64 = 1;
	// subfic r11,r11,31
	xer.ca = r11.u32 <= 31;
	r11.s64 = 31 - r11.s64;
	// addi r5,r29,63
	ctx.r5.s64 = r29.s64 + 63;
	// slw r4,r9,r11
	ctx.r4.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// xor r3,r4,r31
	ctx.r3.u64 = ctx.r4.u64 ^ r31.u64;
	// mr r8,r26
	ctx.r8.u64 = r26.u64;
	// cntlzw r10,r3
	ctx.r10.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// mr r7,r27
	ctx.r7.u64 = r27.u64;
	// rlwinm r4,r10,27,31,31
	ctx.r4.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// xori r10,r4,1
	ctx.r10.u64 = ctx.r4.u64 ^ 1;
	// rlwinm r4,r5,0,0,25
	ctx.r4.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0xFFFFFFC0;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// slw r5,r9,r11
	ctx.r5.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// bl 0x82be5338
	sub_82BE5338(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be5314
	if (cr6.eq) goto loc_82BE5314;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// li r10,0
	ctx.r10.s64 = 0;
	// lbz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r1.u32 + 84);
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// stw r8,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r8.u32);
	// lwz r6,4(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// subf r31,r6,r3
	r31.s64 = ctx.r3.s64 - ctx.r6.s64;
	// stw r10,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r10.u32);
	// beq cr6,0x82be5308
	if (cr6.eq) goto loc_82BE5308;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// bl 0x832b226c
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_82BE5308:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c30
	return;
loc_82BE5314:
	// lbz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 84);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be5328
	if (cr6.eq) goto loc_82BE5328;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// bl 0x832b226c
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_82BE5328:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BE5240) {
	__imp__sub_82BE5240(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5338) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bcc
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// cntlzw r11,r25
	r11.u64 = r25.u32 == 0 ? 32 : __builtin_clz(r25.u32);
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// subfic r11,r11,31
	xer.ca = r11.u32 <= 31;
	r11.s64 = 31 - r11.s64;
	// mr r23,r6
	r23.u64 = ctx.r6.u64;
	// mr r22,r7
	r22.u64 = ctx.r7.u64;
	// mr r21,r8
	r21.u64 = ctx.r8.u64;
	// cmpwi cr6,r11,31
	cr6.compare<int32_t>(r11.s32, 31, xer);
	// bgt cr6,0x82be5414
	if (cr6.gt) goto loc_82BE5414;
	// li r24,-1
	r24.s64 = -1;
loc_82BE5370:
	// lwz r10,16(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + int32_t(16) );
	// slw r9,r24,r11
	ctx.r9.u64 = r11.u8 & 0x20 ? 0 : (r24.u32 << (r11.u8 & 0x3F));
	// and r11,r9,r10
	r11.u64 = ctx.r9.u64 & ctx.r10.u64;
	// addi r8,r11,-1
	ctx.r8.s64 = r11.s64 + -1;
	// andc r7,r8,r11
	ctx.r7.u64 = ctx.r8.u64 & ~r11.u64;
	// cntlzw r6,r7
	ctx.r6.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// cntlzw r5,r6
	ctx.r5.u64 = ctx.r6.u32 == 0 ? 32 : __builtin_clz(ctx.r6.u32);
	// subfic r4,r6,32
	xer.ca = ctx.r6.u32 <= 32;
	ctx.r4.s64 = 32 - ctx.r6.s64;
	// rlwinm r11,r5,27,31,31
	r11.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 27) & 0x1;
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// orc r29,r4,r3
	r29.u64 = ctx.r4.u64 | ~ctx.r3.u64;
	// cmpwi cr6,r29,-1
	cr6.compare<int32_t>(r29.s32, -1, xer);
	// beq cr6,0x82be5414
	if (cr6.eq) goto loc_82BE5414;
	// rlwinm r11,r29,1,0,30
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r11,r29,r11
	r11.u64 = r29.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r26
	r11.u64 = r11.u64 + r26.u64;
	// addi r27,r11,20
	r27.s64 = r11.s64 + 20;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be66b8
	sub_82BE66B8(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be5408
	if (cr6.eq) goto loc_82BE5408;
	// neg r28,r25
	r28.s64 = -r25.s64;
loc_82BE53D4:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// subf r11,r11,r31
	r11.s64 = r31.s64 - r11.s64;
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// and r9,r10,r28
	ctx.r9.u64 = ctx.r10.u64 & r28.u64;
	// subf r8,r9,r31
	ctx.r8.s64 = r31.s64 - ctx.r9.s64;
	// cmpw cr6,r8,r30
	cr6.compare<int32_t>(ctx.r8.s32, r30.s32, xer);
	// bge cr6,0x82be5420
	if (!cr6.lt) goto loc_82BE5420;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be6508
	sub_82BE6508(ctx, base);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// bne cr6,0x82be53d4
	if (!cr6.eq) goto loc_82BE53D4;
loc_82BE5408:
	// addi r11,r29,1
	r11.s64 = r29.s64 + 1;
	// cmpwi cr6,r11,31
	cr6.compare<int32_t>(r11.s32, 31, xer);
	// ble cr6,0x82be5370
	if (!cr6.gt) goto loc_82BE5370;
loc_82BE5414:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c1c
	return;
loc_82BE5420:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82be57f8
	sub_82BE57F8(ctx, base);
	// mr r9,r21
	ctx.r9.u64 = r21.u64;
	// mr r8,r22
	ctx.r8.u64 = r22.u64;
	// mr r7,r23
	ctx.r7.u64 = r23.u64;
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82be5458
	sub_82BE5458(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c1c
	return;
}

PPC_WEAK_FUNC(sub_82BE5338) {
	__imp__sub_82BE5338(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5458) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bcc
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r24,r6
	r24.u64 = ctx.r6.u64;
	// mr r23,r7
	r23.u64 = ctx.r7.u64;
	// mr r21,r9
	r21.u64 = ctx.r9.u64;
	// neg r9,r24
	ctx.r9.s64 = -r24.s64;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r22,r8
	r22.u64 = ctx.r8.u64;
	// lis r8,-21555
	ctx.r8.s64 = -1412628480;
	// subf r10,r11,r31
	ctx.r10.s64 = r31.s64 - r11.s64;
	// mr r26,r3
	r26.u64 = ctx.r3.u64;
	// add r10,r10,r24
	ctx.r10.u64 = ctx.r10.u64 + r24.u64;
	// mr r25,r5
	r25.u64 = ctx.r5.u64;
	// addi r7,r10,-1
	ctx.r7.s64 = ctx.r10.s64 + -1;
	// ori r28,r8,43981
	r28.u64 = ctx.r8.u64 | 43981;
	// and r6,r7,r9
	ctx.r6.u64 = ctx.r7.u64 & ctx.r9.u64;
	// mr r30,r31
	r30.u64 = r31.u64;
	// subf r10,r31,r6
	ctx.r10.s64 = ctx.r6.s64 - r31.s64;
	// add. r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be554c
	if (cr0.eq) goto loc_82BE554C;
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r9,r31
	ctx.r10.s64 = r31.s64 - ctx.r9.s64;
	// stw r9,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r9.u32);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// addi r29,r10,-64
	r29.s64 = ctx.r10.s64 + -64;
	// addi r11,r11,-64
	r11.s64 = r11.s64 + -64;
	// subf r8,r11,r29
	ctx.r8.s64 = r29.s64 - r11.s64;
	// lwz r7,-28(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-28) );
	// clrlwi r6,r7,2
	ctx.r6.u64 = ctx.r7.u32 & 0x3FFFFFFF;
	// stw r11,-60(r10)
	PPC_STORE_U32(ctx.r10.u32 + -60, r11.u32);
	// stw r28,-64(r10)
	PPC_STORE_U32(ctx.r10.u32 + -64, r28.u32);
	// stw r6,-28(r10)
	PPC_STORE_U32(ctx.r10.u32 + -28, ctx.r6.u32);
	// stw r28,-24(r10)
	PPC_STORE_U32(ctx.r10.u32 + -24, r28.u32);
	// stw r9,-56(r10)
	PPC_STORE_U32(ctx.r10.u32 + -56, ctx.r9.u32);
	// stw r11,-56(r8)
	PPC_STORE_U32(ctx.r8.u32 + -56, r11.u32);
	// lwz r5,-60(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-60) );
	// subf r11,r5,r29
	r11.s64 = r29.s64 - ctx.r5.s64;
	// lwz r4,-28(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-28) );
	// rlwinm r3,r4,0,0,0
	ctx.r3.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x80000000;
	// addi r27,r11,-64
	r27.s64 = r11.s64 + -64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be5534
	if (!cr6.eq) goto loc_82BE5534;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bl 0x82be57f8
	sub_82BE57F8(ctx, base);
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lwz r11,4(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + int32_t(4) );
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
	// lwz r10,4(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + int32_t(4) );
	// subf r9,r10,r27
	ctx.r9.s64 = r27.s64 - ctx.r10.s64;
	// stw r11,-56(r9)
	PPC_STORE_U32(ctx.r9.u32 + -56, r11.u32);
loc_82BE5534:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// oris r10,r11,32768
	ctx.r10.u64 = r11.u64 | 2147483648;
	// stw r10,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r10.u32);
	// bl 0x82be5700
	sub_82BE5700(ctx, base);
loc_82BE554C:
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmplw cr6,r10,r25
	cr6.compare<uint32_t>(ctx.r10.u32, r25.u32, xer);
	// ble cr6,0x82be5600
	if (!cr6.gt) goto loc_82BE5600;
	// subf r11,r25,r10
	r11.s64 = ctx.r10.s64 - r25.s64;
	// addi r11,r11,-64
	r11.s64 = r11.s64 + -64;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// subf r9,r11,r31
	ctx.r9.s64 = r31.s64 - r11.s64;
	// subf r10,r11,r10
	ctx.r10.s64 = ctx.r10.s64 - r11.s64;
	// addi r30,r9,-64
	r30.s64 = ctx.r9.s64 + -64;
	// addi r10,r10,-64
	ctx.r10.s64 = ctx.r10.s64 + -64;
	// subf r8,r10,r30
	ctx.r8.s64 = r30.s64 - ctx.r10.s64;
	// stw r10,-60(r9)
	PPC_STORE_U32(ctx.r9.u32 + -60, ctx.r10.u32);
	// stw r11,-56(r9)
	PPC_STORE_U32(ctx.r9.u32 + -56, r11.u32);
	// stw r28,-64(r9)
	PPC_STORE_U32(ctx.r9.u32 + -64, r28.u32);
	// stw r28,-24(r9)
	PPC_STORE_U32(ctx.r9.u32 + -24, r28.u32);
	// lwz r7,-28(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(-28) );
	// clrlwi r6,r7,2
	ctx.r6.u64 = ctx.r7.u32 & 0x3FFFFFFF;
	// stw r6,-28(r9)
	PPC_STORE_U32(ctx.r9.u32 + -28, ctx.r6.u32);
	// stw r10,-56(r8)
	PPC_STORE_U32(ctx.r8.u32 + -56, ctx.r10.u32);
	// lwz r5,-28(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(-28) );
	// oris r11,r5,32768
	r11.u64 = ctx.r5.u64 | 2147483648;
	// stw r11,-28(r9)
	PPC_STORE_U32(ctx.r9.u32 + -28, r11.u32);
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + r31.u64;
	// lwz r4,100(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(100) );
	// rlwinm r3,r4,0,0,0
	ctx.r3.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// addi r29,r10,64
	r29.s64 = ctx.r10.s64 + 64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// bne cr6,0x82be55f0
	if (!cr6.eq) goto loc_82BE55F0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82be57f8
	sub_82BE57F8(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// stw r11,4(r29)
	PPC_STORE_U32(r29.u32 + 4, r11.u32);
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// b 0x82be55fc
	goto loc_82BE55FC;
loc_82BE55F0:
	// oris r11,r11,32768
	r11.u64 = r11.u64 | 2147483648;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// stw r11,36(r30)
	PPC_STORE_U32(r30.u32 + 36, r11.u32);
loc_82BE55FC:
	// bl 0x82be5700
	sub_82BE5700(ctx, base);
loc_82BE5600:
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// li r10,1
	ctx.r10.s64 = 1;
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r24,12(r30)
	PPC_STORE_U32(r30.u32 + 12, r24.u32);
	// rlwimi r11,r10,31,0,1
	r11.u64 = (rotl32(ctx.r10.u32, 31) & 0xC0000000) | (r11.u64 & 0xFFFFFFFF3FFFFFFF);
	// stw r23,20(r30)
	PPC_STORE_U32(r30.u32 + 20, r23.u32);
	// stw r28,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r28.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stw r21,24(r30)
	PPC_STORE_U32(r30.u32 + 24, r21.u32);
	// stw r22,28(r30)
	PPC_STORE_U32(r30.u32 + 28, r22.u32);
	// stw r9,32(r30)
	PPC_STORE_U32(r30.u32 + 32, ctx.r9.u32);
	// stw r28,40(r30)
	PPC_STORE_U32(r30.u32 + 40, r28.u32);
	// stw r11,36(r30)
	PPC_STORE_U32(r30.u32 + 36, r11.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c1c
	return;
}

PPC_WEAK_FUNC(sub_82BE5458) {
	__imp__sub_82BE5458(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5640) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// addi r29,r31,4
	r29.s64 = r31.s64 + 4;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r30,r11,64
	r30.s64 = r11.s64 + 64;
	// subf r11,r10,r31
	r11.s64 = r31.s64 - ctx.r10.s64;
	// addi r28,r11,-64
	r28.s64 = r11.s64 + -64;
	// lwz r9,-28(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-28) );
	// rlwinm r8,r9,0,0,0
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x82be56a4
	if (!cr6.eq) goto loc_82BE56A4;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// bl 0x82be57f8
	sub_82BE57F8(ctx, base);
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// subf r10,r11,r31
	ctx.r10.s64 = r31.s64 - r11.s64;
	// stw r11,0(r29)
	PPC_STORE_U32(r29.u32 + 0, r11.u32);
	// stw r11,-56(r10)
	PPC_STORE_U32(ctx.r10.u32 + -56, r11.u32);
loc_82BE56A4:
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be56e4
	if (!cr6.eq) goto loc_82BE56E4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be57f8
	sub_82BE57F8(ctx, base);
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// mr r31,r30
	r31.u64 = r30.u64;
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// rotlwi r10,r11,0
	ctx.r10.u64 = rotl32(r11.u32, 0);
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// subf r9,r10,r30
	ctx.r9.s64 = r30.s64 - ctx.r10.s64;
	// stw r10,-56(r9)
	PPC_STORE_U32(ctx.r9.u32 + -56, ctx.r10.u32);
loc_82BE56E4:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be5700
	sub_82BE5700(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BE5640) {
	__imp__sub_82BE5640(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5700) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(12) );
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, r11.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r9,36(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// clrlwi r8,r9,2
	ctx.r8.u64 = ctx.r9.u32 & 0x3FFFFFFF;
	// stw r8,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r8.u32);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be57e0
	if (cr6.eq) goto loc_82BE57E0;
	// subf r11,r10,r31
	r11.s64 = r31.s64 - ctx.r10.s64;
	// li r9,1
	ctx.r9.s64 = 1;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r8,r11,-1
	ctx.r8.s64 = r11.s64 + -1;
	// addi r7,r10,-1
	ctx.r7.s64 = ctx.r10.s64 + -1;
	// xor r6,r7,r8
	ctx.r6.u64 = ctx.r7.u64 ^ ctx.r8.u64;
	// cntlzw r5,r6
	ctx.r5.u64 = ctx.r6.u32 == 0 ? 32 : __builtin_clz(ctx.r6.u32);
	// subfic r11,r5,31
	xer.ca = ctx.r5.u32 <= 31;
	r11.s64 = 31 - ctx.r5.s64;
	// slw r9,r9,r11
	ctx.r9.u64 = r11.u8 & 0x20 ? 0 : (ctx.r9.u32 << (r11.u8 & 0x3F));
	// stw r9,12(r31)
	PPC_STORE_U32(r31.u32 + 12, ctx.r9.u32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r8,16(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(16) );
	// or r7,r9,r8
	ctx.r7.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stw r7,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r7.u32);
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r11,r6,2,0,29
	r11.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r3
	r11.u64 = r11.u64 + ctx.r3.u64;
	// addi r30,r11,20
	r30.s64 = r11.s64 + 20;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be6cf8
	sub_82BE6CF8(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r11,r31,20
	r11.s64 = r31.s64 + 20;
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r10,24(r31)
	PPC_STORE_U32(r31.u32 + 24, ctx.r10.u32);
	// beq cr6,0x82be57c0
	if (cr6.eq) goto loc_82BE57C0;
	// lwz r9,20(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(20) );
	// stw r3,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r3.u32);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// stw r10,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r10.u32);
	// b 0x82be57d0
	goto loc_82BE57D0;
loc_82BE57C0:
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be57d0
	if (cr6.eq) goto loc_82BE57D0;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_82BE57D0:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// stw r31,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r31.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
loc_82BE57E0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE5700) {
	__imp__sub_82BE5700(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE57F8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	r28.u64 = ctx.r3.u64;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r11,12(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(12) );
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r9,r11,-64
	ctx.r9.s64 = r11.s64 + -64;
	// stw r9,12(r28)
	PPC_STORE_U32(r28.u32 + 12, ctx.r9.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be5884
	if (cr6.eq) goto loc_82BE5884;
	// subf r11,r10,r31
	r11.s64 = r31.s64 - ctx.r10.s64;
	// li r5,0
	ctx.r5.s64 = 0;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// xor r9,r10,r11
	ctx.r9.u64 = ctx.r10.u64 ^ r11.u64;
	// cntlzw r8,r9
	ctx.r8.u64 = ctx.r9.u32 == 0 ? 32 : __builtin_clz(ctx.r9.u32);
	// subfic r30,r8,31
	xer.ca = ctx.r8.u32 <= 31;
	r30.s64 = 31 - ctx.r8.s64;
	// rlwinm r11,r30,1,0,30
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r7,r30,r11
	ctx.r7.u64 = r30.u64 + r11.u64;
	// rlwinm r11,r7,2,0,29
	r11.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r29,r11,r28
	r29.u64 = r11.u64 + r28.u64;
	// addi r3,r29,20
	ctx.r3.s64 = r29.s64 + 20;
	// bl 0x82be6860
	sub_82BE6860(ctx, base);
	// lwz r6,28(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + int32_t(28) );
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// bne cr6,0x82be5884
	if (!cr6.eq) goto loc_82BE5884;
	// li r11,1
	r11.s64 = 1;
	// lwz r10,16(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(16) );
	// slw r9,r11,r30
	ctx.r9.u64 = r30.u8 & 0x20 ? 0 : (r11.u32 << (r30.u8 & 0x3F));
	// andc r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 & ~ctx.r9.u64;
	// stw r8,16(r28)
	PPC_STORE_U32(r28.u32 + 16, ctx.r8.u32);
loc_82BE5884:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// oris r10,r11,32768
	ctx.r10.u64 = r11.u64 | 2147483648;
	// stw r10,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE57F8) {
	__imp__sub_82BE57F8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5898) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bb8
	// addi r31,r1,-672
	r31.s64 = ctx.r1.s64 + -672;
	// stwu r1,-672(r1)
	ea = -672 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r16,r3
	r16.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r16,404
	ctx.r4.s64 = r16.s64 + 404;
	// addi r3,r31,96
	ctx.r3.s64 = r31.s64 + 96;
	// bl 0x82200688
	sub_82200688(ctx, base);
	// li r29,0
	r29.s64 = 0;
	// addi r11,r31,144
	r11.s64 = r31.s64 + 144;
	// mr r21,r29
	r21.u64 = r29.u64;
	// stw r29,104(r31)
	PPC_STORE_U32(r31.u32 + 104, r29.u32);
	// mr r17,r29
	r17.u64 = r29.u64;
	// stw r21,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r21.u32);
	// li r10,31
	ctx.r10.s64 = 31;
	// stw r17,112(r31)
	PPC_STORE_U32(r31.u32 + 112, r17.u32);
loc_82BE58DC:
	// stw r29,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r29.u32);
	// addic. r10,r10,-1
	xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r29,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r29.u32);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// bge 0x82be58dc
	if (!cr0.lt) goto loc_82BE58DC;
	// lwz r11,0(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(0) );
	// mr r19,r29
	r19.u64 = r29.u64;
	// stw r29,120(r31)
	PPC_STORE_U32(r31.u32 + 120, r29.u32);
	// mr r23,r29
	r23.u64 = r29.u64;
	// stw r19,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r19.u32);
	// mr r20,r29
	r20.u64 = r29.u64;
	// stwu r11,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, r11.u32);
	ctx.r1.u32 = ea;
	// addic. r26,r1,80
	xer.ca = ctx.r1.u32 > 4294967215;
	r26.s64 = ctx.r1.s64 + 80;
	cr0.compare<int32_t>(r26.s32, 0, xer);
	// beq 0x82be592c
	if (cr0.eq) goto loc_82BE592C;
	// stw r29,8(r26)
	PPC_STORE_U32(r26.u32 + 8, r29.u32);
	// stw r29,12(r26)
	PPC_STORE_U32(r26.u32 + 12, r29.u32);
	// stw r29,16(r26)
	PPC_STORE_U32(r26.u32 + 16, r29.u32);
	// stw r29,20(r26)
	PPC_STORE_U32(r26.u32 + 20, r29.u32);
	// stw r29,24(r26)
	PPC_STORE_U32(r26.u32 + 24, r29.u32);
	// b 0x82be5930
	goto loc_82BE5930;
loc_82BE592C:
	// mr r26,r29
	r26.u64 = r29.u64;
loc_82BE5930:
	// lwz r11,8(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + int32_t(8) );
	// lwz r28,0(r16)
	r28.u64 = PPC_LOAD_U32(r16.u32 + int32_t(0) );
	// rlwinm r11,r11,5,0,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 5) & 0xFFFFFFE0;
	// addi r3,r11,80
	ctx.r3.s64 = r11.s64 + 80;
	// cmplwi cr6,r3,1024
	cr6.compare<uint32_t>(ctx.r3.u32, 1024, xer);
	// bgt cr6,0x82be597c
	if (cr6.gt) goto loc_82BE597C;
	// neg r11,r3
	r11.s64 = -ctx.r3.s64;
	// rlwinm r12,r11,0,0,27
	r12.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFF0;
	// bl 0x82ca9e84
	sub_82CA9E84(ctx, base);
	// lwz r10,0(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(0) );
	// stwux r10,r1,r12
	ea = ctx.r1.u32 + r12.u32;
	PPC_STORE_U32(ea, ctx.r10.u32);
	ctx.r1.u32 = ea;
	// addic. r11,r1,80
	xer.ca = ctx.r1.u32 > 4294967215;
	r11.s64 = ctx.r1.s64 + 80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be5974
	if (cr0.eq) goto loc_82BE5974;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r10,52428
	ctx.r9.u64 = ctx.r10.u64 | 52428;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r11,r11,16
	r11.s64 = r11.s64 + 16;
loc_82BE5974:
	// mr r18,r11
	r18.u64 = r11.u64;
	// b 0x82be599c
	goto loc_82BE599C;
loc_82BE597C:
	// bl 0x82ca3c68
	sub_82CA3C68(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be5998
	if (cr6.eq) goto loc_82BE5998;
	// lis r11,0
	r11.s64 = 0;
	// ori r10,r11,56797
	ctx.r10.u64 = r11.u64 | 56797;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
loc_82BE5998:
	// mr r18,r3
	r18.u64 = ctx.r3.u64;
loc_82BE599C:
	// mr r22,r29
	r22.u64 = r29.u64;
	// mr r24,r18
	r24.u64 = r18.u64;
	// stw r22,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r22.u32);
loc_82BE59A8:
	// lwz r10,36(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(36) );
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r9,r10,0,0,0
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	// addi r25,r11,64
	r25.s64 = r11.s64 + 64;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82be5c10
	if (cr6.eq) goto loc_82BE5C10;
	// mr r30,r24
	r30.u64 = r24.u64;
	// subf r10,r11,r28
	ctx.r10.s64 = r28.s64 - r11.s64;
	// addi r24,r24,32
	r24.s64 = r24.s64 + 32;
	// lwz r11,28(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(28) );
	// stw r10,12(r30)
	PPC_STORE_U32(r30.u32 + 12, ctx.r10.u32);
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// stw r28,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r28.u32);
	// lwz r8,12(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + int32_t(12) );
	// stw r8,20(r30)
	PPC_STORE_U32(r30.u32 + 20, ctx.r8.u32);
	// stw r9,28(r30)
	PPC_STORE_U32(r30.u32 + 28, ctx.r9.u32);
	// lwz r7,36(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + int32_t(36) );
	// rlwinm r3,r7,2,31,31
	ctx.r3.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0x1;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be5a18
	if (!cr6.eq) goto loc_82BE5A18;
	// lwz r11,24(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(24) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5a18
	if (cr6.eq) goto loc_82BE5A18;
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lwz r3,28(r28)
	ctx.r3.u64 = PPC_LOAD_U32(r28.u32 + int32_t(28) );
	// subf r4,r10,r28
	ctx.r4.s64 = r28.s64 - ctx.r10.s64;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
loc_82BE5A18:
	// clrlwi r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5b70
	if (cr6.eq) goto loc_82BE5B70;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// cmplwi cr6,r23,0
	cr6.compare<uint32_t>(r23.u32, 0, xer);
	// stb r29,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r29.u8);
	// subf r10,r11,r28
	ctx.r10.s64 = r28.s64 - r11.s64;
	// stw r10,16(r30)
	PPC_STORE_U32(r30.u32 + 16, ctx.r10.u32);
	// beq cr6,0x82be5a48
	if (cr6.eq) goto loc_82BE5A48;
	// stw r30,0(r23)
	PPC_STORE_U32(r23.u32 + 0, r30.u32);
	// stw r23,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r23.u32);
	// b 0x82be5a50
	goto loc_82BE5A50;
loc_82BE5A48:
	// stw r30,120(r31)
	PPC_STORE_U32(r31.u32 + 120, r30.u32);
	// stw r29,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r29.u32);
loc_82BE5A50:
	// stw r29,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r29.u32);
	// mr r23,r30
	r23.u64 = r30.u64;
	// stw r29,32(r28)
	PPC_STORE_U32(r28.u32 + 32, r29.u32);
	// addi r20,r20,1
	r20.s64 = r20.s64 + 1;
	// lwz r11,8(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(8) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5ac8
	if (cr6.eq) goto loc_82BE5AC8;
	// stw r30,12(r26)
	PPC_STORE_U32(r26.u32 + 12, r30.u32);
	// cmplwi cr6,r21,0
	cr6.compare<uint32_t>(r21.u32, 0, xer);
	// beq cr6,0x82be5a84
	if (cr6.eq) goto loc_82BE5A84;
	// stw r26,0(r21)
	PPC_STORE_U32(r21.u32 + 0, r26.u32);
	// stw r21,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r21.u32);
	// b 0x82be5a8c
	goto loc_82BE5A8C;
loc_82BE5A84:
	// stw r26,104(r31)
	PPC_STORE_U32(r31.u32 + 104, r26.u32);
	// stw r29,4(r26)
	PPC_STORE_U32(r26.u32 + 4, r29.u32);
loc_82BE5A8C:
	// lwz r11,0(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(0) );
	// mr r21,r26
	r21.u64 = r26.u64;
	// stw r29,0(r26)
	PPC_STORE_U32(r26.u32 + 0, r29.u32);
	// addi r17,r17,1
	r17.s64 = r17.s64 + 1;
	// stwu r11,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, r11.u32);
	ctx.r1.u32 = ea;
	// addic. r11,r1,80
	xer.ca = ctx.r1.u32 > 4294967215;
	r11.s64 = ctx.r1.s64 + 80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be5ac4
	if (cr0.eq) goto loc_82BE5AC4;
	// stw r29,8(r11)
	PPC_STORE_U32(r11.u32 + 8, r29.u32);
	// mr r26,r11
	r26.u64 = r11.u64;
	// stw r29,12(r11)
	PPC_STORE_U32(r11.u32 + 12, r29.u32);
	// stw r29,16(r11)
	PPC_STORE_U32(r11.u32 + 16, r29.u32);
	// stw r29,20(r11)
	PPC_STORE_U32(r11.u32 + 20, r29.u32);
	// stw r29,24(r11)
	PPC_STORE_U32(r11.u32 + 24, r29.u32);
	// b 0x82be5ac8
	goto loc_82BE5AC8;
loc_82BE5AC4:
	// mr r26,r29
	r26.u64 = r29.u64;
loc_82BE5AC8:
	// lwz r11,4(r16)
	r11.u64 = PPC_LOAD_U32(r16.u32 + int32_t(4) );
	// cmplw cr6,r28,r11
	cr6.compare<uint32_t>(r28.u32, r11.u32, xer);
	// bne cr6,0x82be5c10
	if (!cr6.eq) goto loc_82BE5C10;
	// stw r17,112(r31)
	PPC_STORE_U32(r31.u32 + 112, r17.u32);
	// addi r11,r31,80
	r11.s64 = r31.s64 + 80;
	// stw r21,108(r31)
	PPC_STORE_U32(r31.u32 + 108, r21.u32);
	// addi r4,r31,80
	ctx.r4.s64 = r31.s64 + 80;
	// addi r3,r31,104
	ctx.r3.s64 = r31.s64 + 104;
	// stw r19,84(r31)
	PPC_STORE_U32(r31.u32 + 84, r19.u32);
	// stw r22,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r22.u32);
	// stw r20,128(r31)
	PPC_STORE_U32(r31.u32 + 128, r20.u32);
	// stb r29,0(r11)
	PPC_STORE_U8(r11.u32 + 0, r29.u8);
	// stw r23,124(r31)
	PPC_STORE_U32(r31.u32 + 124, r23.u32);
	// bl 0x82be6978
	sub_82BE6978(ctx, base);
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// bl 0x82be6418
	sub_82BE6418(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// addi r8,r31,84
	ctx.r8.s64 = r31.s64 + 84;
	// addi r7,r31,88
	ctx.r7.s64 = r31.s64 + 88;
	// addi r6,r31,120
	ctx.r6.s64 = r31.s64 + 120;
	// addi r5,r31,144
	ctx.r5.s64 = r31.s64 + 144;
	// addi r4,r31,104
	ctx.r4.s64 = r31.s64 + 104;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// bl 0x82be5d10
	sub_82BE5D10(ctx, base);
	// lwz r10,84(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(84) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be5c38
	if (cr6.eq) goto loc_82BE5C38;
	// cmplwi cr6,r18,0
	cr6.compare<uint32_t>(r18.u32, 0, xer);
	// beq cr6,0x82be5b50
	if (cr6.eq) goto loc_82BE5B50;
	// lwz r11,-16(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + int32_t(-16) );
	// addi r3,r18,-16
	ctx.r3.s64 = r18.s64 + -16;
	// cmplwi cr6,r11,56797
	cr6.compare<uint32_t>(r11.u32, 56797, xer);
	// bne cr6,0x82be5b50
	if (!cr6.eq) goto loc_82BE5B50;
	// bl 0x82ca5dc0
	sub_82CA5DC0(ctx, base);
loc_82BE5B50:
	// lbz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 100);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be5b64
	if (cr6.eq) goto loc_82BE5B64;
	// lwz r3,96(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(96) );
	// bl 0x832b226c
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_82BE5B64:
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r31,672
	ctx.r1.s64 = r31.s64 + 672;
	// b 0x82ca2c08
	return;
loc_82BE5B70:
	// lwz r11,12(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(12) );
	// lwz r10,8(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + int32_t(8) );
	// or r22,r22,r11
	r22.u64 = r22.u64 | r11.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be5b88
	if (!cr6.eq) goto loc_82BE5B88;
	// stw r23,8(r26)
	PPC_STORE_U32(r26.u32 + 8, r23.u32);
loc_82BE5B88:
	// lwz r11,16(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(16) );
	// addi r9,r31,516
	ctx.r9.s64 = r31.s64 + 516;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// add r8,r11,r25
	ctx.r8.u64 = r11.u64 + r25.u64;
	// stw r8,16(r26)
	PPC_STORE_U32(r26.u32 + 16, ctx.r8.u32);
	// stw r29,16(r30)
	PPC_STORE_U32(r30.u32 + 16, r29.u32);
	// stb r29,24(r30)
	PPC_STORE_U8(r30.u32 + 24, r29.u8);
	// stw r30,32(r28)
	PPC_STORE_U32(r28.u32 + 32, r30.u32);
	// lwz r7,12(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + int32_t(12) );
	// cntlzw r11,r7
	r11.u64 = ctx.r7.u32 == 0 ? 32 : __builtin_clz(ctx.r7.u32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r6,r11,r10
	ctx.r6.u64 = r11.u64 + ctx.r10.u64;
	// rlwinm r5,r6,2,0,29
	ctx.r5.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r27,r5,r9
	r27.s64 = ctx.r9.s64 - ctx.r5.s64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be6fa8
	sub_82BE6FA8(ctx, base);
	// stw r29,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r29.u32);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// stw r29,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r29.u32);
	// beq cr6,0x82be5bec
	if (cr6.eq) goto loc_82BE5BEC;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r3,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r3.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// stw r29,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r29.u32);
	// b 0x82be5bfc
	goto loc_82BE5BFC;
loc_82BE5BEC:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5bfc
	if (cr6.eq) goto loc_82BE5BFC;
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
loc_82BE5BFC:
	// lwz r11,8(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + int32_t(8) );
	// addi r19,r19,1
	r19.s64 = r19.s64 + 1;
	// stw r30,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r30.u32);
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,8(r27)
	PPC_STORE_U32(r27.u32 + 8, r11.u32);
loc_82BE5C10:
	// lwz r11,8(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(8) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5c28
	if (cr6.eq) goto loc_82BE5C28;
	// lwz r11,20(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(20) );
	// add r11,r11,r25
	r11.u64 = r11.u64 + r25.u64;
	// stw r11,20(r26)
	PPC_STORE_U32(r26.u32 + 20, r11.u32);
loc_82BE5C28:
	// lwz r11,8(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(8) );
	// add r11,r11,r28
	r11.u64 = r11.u64 + r28.u64;
	// addi r28,r11,64
	r28.s64 = r11.s64 + 64;
	// b 0x82be59a8
	goto loc_82BE59A8;
loc_82BE5C38:
	// lwz r11,104(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(104) );
	// stw r29,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r29.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5c7c
	if (cr6.eq) goto loc_82BE5C7C;
loc_82BE5C48:
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// lwz r9,24(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// subf r10,r9,r10
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
	// stw r10,84(r31)
	PPC_STORE_U32(r31.u32 + 84, ctx.r10.u32);
	// cmplw cr6,r10,r29
	cr6.compare<uint32_t>(ctx.r10.u32, r29.u32, xer);
	// addi r10,r31,88
	ctx.r10.s64 = r31.s64 + 88;
	// blt cr6,0x82be5c68
	if (cr6.lt) goto loc_82BE5C68;
	// addi r10,r31,84
	ctx.r10.s64 = r31.s64 + 84;
loc_82BE5C68:
	// lwz r29,0(r10)
	r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// stw r29,88(r31)
	PPC_STORE_U32(r31.u32 + 88, r29.u32);
	// bne cr6,0x82be5c48
	if (!cr6.eq) goto loc_82BE5C48;
loc_82BE5C7C:
	// cmplw cr6,r29,r30
	cr6.compare<uint32_t>(r29.u32, r30.u32, xer);
	// bge cr6,0x82be5cc0
	if (!cr6.lt) goto loc_82BE5CC0;
	// cmplwi cr6,r18,0
	cr6.compare<uint32_t>(r18.u32, 0, xer);
	// beq cr6,0x82be5ca0
	if (cr6.eq) goto loc_82BE5CA0;
	// lwz r11,-16(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + int32_t(-16) );
	// addi r3,r18,-16
	ctx.r3.s64 = r18.s64 + -16;
	// cmplwi cr6,r11,56797
	cr6.compare<uint32_t>(r11.u32, 56797, xer);
	// bne cr6,0x82be5ca0
	if (!cr6.eq) goto loc_82BE5CA0;
	// bl 0x82ca5dc0
	sub_82CA5DC0(ctx, base);
loc_82BE5CA0:
	// lbz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 100);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be5b64
	if (cr6.eq) goto loc_82BE5B64;
	// lwz r3,96(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(96) );
	// bl 0x832b226c
	__imp__RtlLeaveCriticalSection(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r31,672
	ctx.r1.s64 = r31.s64 + 672;
	// b 0x82ca2c08
	return;
loc_82BE5CC0:
	// addi r5,r31,144
	ctx.r5.s64 = r31.s64 + 144;
	// addi r4,r31,120
	ctx.r4.s64 = r31.s64 + 120;
	// mr r3,r16
	ctx.r3.u64 = r16.u64;
	// bl 0x82be5ff8
	sub_82BE5FF8(ctx, base);
	// cmplwi cr6,r18,0
	cr6.compare<uint32_t>(r18.u32, 0, xer);
	// beq cr6,0x82be5cec
	if (cr6.eq) goto loc_82BE5CEC;
	// lwz r11,-16(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + int32_t(-16) );
	// addi r3,r18,-16
	ctx.r3.s64 = r18.s64 + -16;
	// cmplwi cr6,r11,56797
	cr6.compare<uint32_t>(r11.u32, 56797, xer);
	// bne cr6,0x82be5cec
	if (!cr6.eq) goto loc_82BE5CEC;
	// bl 0x82ca5dc0
	sub_82CA5DC0(ctx, base);
loc_82BE5CEC:
	// lbz r10,100(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 100);
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be5d00
	if (cr6.eq) goto loc_82BE5D00;
	// lwz r3,96(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(96) );
	// bl 0x832b226c
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_82BE5D00:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r31,672
	ctx.r1.s64 = r31.s64 + 672;
	// b 0x82ca2c08
	return;
}

PPC_WEAK_FUNC(sub_82BE5898) {
	__imp__sub_82BE5898(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5D10) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r15{};
	PPCRegister r16{};
	PPCRegister r17{};
	PPCRegister r18{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bb4
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r20,0(r4)
	r20.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(0) );
	// mr r21,r5
	r21.u64 = ctx.r5.u64;
	// mr r22,r6
	r22.u64 = ctx.r6.u64;
	// mr r18,r7
	r18.u64 = ctx.r7.u64;
	// mr r17,r8
	r17.u64 = ctx.r8.u64;
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// beq cr6,0x82be5ff0
	if (cr6.eq) goto loc_82BE5FF0;
	// lwz r23,80(r1)
	r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// li r19,0
	r19.s64 = 0;
	// lwz r24,80(r1)
	r24.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// li r16,1
	r16.s64 = 1;
loc_82BE5D48:
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5ff0
	if (cr6.eq) goto loc_82BE5FF0;
	// lwz r15,12(r20)
	r15.u64 = PPC_LOAD_U32(r20.u32 + int32_t(12) );
	// lwz r25,8(r20)
	r25.u64 = PPC_LOAD_U32(r20.u32 + int32_t(8) );
	// cmplw cr6,r25,r15
	cr6.compare<uint32_t>(r25.u32, r15.u32, xer);
	// beq cr6,0x82be5fe4
	if (cr6.eq) goto loc_82BE5FE4;
loc_82BE5D64:
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5fe4
	if (cr6.eq) goto loc_82BE5FE4;
	// mr r27,r19
	r27.u64 = r19.u64;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// bne cr6,0x82be5d84
	if (!cr6.eq) goto loc_82BE5D84;
	// lwz r10,0(r22)
	ctx.r10.u64 = PPC_LOAD_U32(r22.u32 + int32_t(0) );
	// b 0x82be5d88
	goto loc_82BE5D88;
loc_82BE5D84:
	// lwz r10,0(r25)
	ctx.r10.u64 = PPC_LOAD_U32(r25.u32 + int32_t(0) );
loc_82BE5D88:
	// lwz r9,8(r25)
	ctx.r9.u64 = PPC_LOAD_U32(r25.u32 + int32_t(8) );
	// lwz r28,16(r10)
	r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(16) );
	// lwz r11,16(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + int32_t(16) );
	// addi r8,r28,-1
	ctx.r8.s64 = r28.s64 + -1;
	// lwz r7,0(r18)
	ctx.r7.u64 = PPC_LOAD_U32(r18.u32 + int32_t(0) );
	// lwz r10,4(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// addi r26,r11,-1
	r26.s64 = r11.s64 + -1;
	// cmplw cr6,r11,r28
	cr6.compare<uint32_t>(r11.u32, r28.u32, xer);
	// xor r6,r8,r26
	ctx.r6.u64 = ctx.r8.u64 ^ r26.u64;
	// cntlzw r5,r6
	ctx.r5.u64 = ctx.r6.u32 == 0 ? 32 : __builtin_clz(ctx.r6.u32);
	// subfic r4,r5,31
	xer.ca = ctx.r5.u32 <= 31;
	ctx.r4.s64 = 31 - ctx.r5.s64;
	// slw r11,r16,r4
	r11.u64 = ctx.r4.u8 & 0x20 ? 0 : (r16.u32 << (ctx.r4.u8 & 0x3F));
	// addi r3,r11,-1
	ctx.r3.s64 = r11.s64 + -1;
	// or r11,r3,r11
	r11.u64 = ctx.r3.u64 | r11.u64;
	// and r31,r11,r7
	r31.u64 = r11.u64 & ctx.r7.u64;
	// bge cr6,0x82be5fd8
	if (!cr6.lt) goto loc_82BE5FD8;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// beq cr6,0x82be5fd8
	if (cr6.eq) goto loc_82BE5FD8;
	// rlwinm r11,r31,31,1,31
	r11.u64 = rotl64(r31.u32 | (r31.u64 << 32), 31) & 0x7FFFFFFF;
	// cntlzw r10,r31
	ctx.r10.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// or r9,r11,r31
	ctx.r9.u64 = r11.u64 | r31.u64;
	// subfic r30,r10,31
	xer.ca = ctx.r10.u32 <= 31;
	r30.s64 = 31 - ctx.r10.s64;
	// rlwinm r8,r9,30,2,31
	ctx.r8.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 30) & 0x3FFFFFFF;
	// or r7,r8,r9
	ctx.r7.u64 = ctx.r8.u64 | ctx.r9.u64;
	// rlwinm r6,r7,28,4,31
	ctx.r6.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 28) & 0xFFFFFFF;
	// or r5,r6,r7
	ctx.r5.u64 = ctx.r6.u64 | ctx.r7.u64;
	// rlwinm r4,r5,24,8,31
	ctx.r4.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 24) & 0xFFFFFF;
	// or r3,r4,r5
	ctx.r3.u64 = ctx.r4.u64 | ctx.r5.u64;
	// rlwinm r11,r3,16,16,31
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 16) & 0xFFFF;
	// or r10,r11,r3
	ctx.r10.u64 = r11.u64 | ctx.r3.u64;
	// rlwinm r9,r10,31,1,31
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x7FFFFFFF;
	// andc r29,r10,r9
	r29.u64 = ctx.r10.u64 & ~ctx.r9.u64;
loc_82BE5E10:
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// bne cr6,0x82be5e94
	if (!cr6.eq) goto loc_82BE5E94;
	// rlwinm r11,r30,1,0,30
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r26,r29
	ctx.r10.u64 = r26.u64 + r29.u64;
	// neg r9,r29
	ctx.r9.s64 = -r29.s64;
	// add r8,r30,r11
	ctx.r8.u64 = r30.u64 + r11.u64;
	// and r24,r10,r9
	r24.u64 = ctx.r10.u64 & ctx.r9.u64;
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// subf r11,r24,r28
	r11.s64 = r28.s64 - r24.s64;
	// add r3,r10,r21
	ctx.r3.u64 = ctx.r10.u64 + r21.u64;
	// addi r4,r11,-64
	ctx.r4.s64 = r11.s64 + -64;
	// bl 0x82be6b60
	sub_82BE6B60(ctx, base);
	// xor r31,r29,r31
	r31.u64 = r29.u64 ^ r31.u64;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// rlwinm r7,r31,31,1,31
	ctx.r7.u64 = rotl64(r31.u32 | (r31.u64 << 32), 31) & 0x7FFFFFFF;
	// cntlzw r6,r31
	ctx.r6.u64 = r31.u32 == 0 ? 32 : __builtin_clz(r31.u32);
	// or r5,r7,r31
	ctx.r5.u64 = ctx.r7.u64 | r31.u64;
	// mr r23,r30
	r23.u64 = r30.u64;
	// rlwinm r4,r5,30,2,31
	ctx.r4.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 30) & 0x3FFFFFFF;
	// subfic r30,r6,31
	xer.ca = ctx.r6.u32 <= 31;
	r30.s64 = 31 - ctx.r6.s64;
	// or r3,r4,r5
	ctx.r3.u64 = ctx.r4.u64 | ctx.r5.u64;
	// cmpwi cr6,r31,0
	cr6.compare<int32_t>(r31.s32, 0, xer);
	// rlwinm r11,r3,28,4,31
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 28) & 0xFFFFFFF;
	// or r10,r11,r3
	ctx.r10.u64 = r11.u64 | ctx.r3.u64;
	// rlwinm r9,r10,24,8,31
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFFFFFF;
	// or r8,r9,r10
	ctx.r8.u64 = ctx.r9.u64 | ctx.r10.u64;
	// rlwinm r7,r8,16,16,31
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 16) & 0xFFFF;
	// or r6,r7,r8
	ctx.r6.u64 = ctx.r7.u64 | ctx.r8.u64;
	// rlwinm r5,r6,31,1,31
	ctx.r5.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 31) & 0x7FFFFFFF;
	// andc r29,r6,r5
	r29.u64 = ctx.r6.u64 & ~ctx.r5.u64;
	// bne cr6,0x82be5e10
	if (!cr6.eq) goto loc_82BE5E10;
	// cmplwi cr6,r27,0
	cr6.compare<uint32_t>(r27.u32, 0, xer);
	// beq cr6,0x82be5fd8
	if (cr6.eq) goto loc_82BE5FD8;
loc_82BE5E94:
	// rlwinm r11,r23,1,0,30
	r11.u64 = rotl64(r23.u32 | (r23.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r23,r11
	r11.u64 = r23.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r30,r11,r21
	r30.u64 = r11.u64 + r21.u64;
	// lwzx r31,r11,r21
	r31.u64 = PPC_LOAD_U32(r11.u32 + r21.u32);
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be5f04
	if (cr6.eq) goto loc_82BE5F04;
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be5ed4
	if (!cr6.eq) goto loc_82BE5ED4;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// b 0x82be5efc
	goto loc_82BE5EFC;
loc_82BE5ED4:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be65e8
	sub_82BE65E8(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be5ef4
	if (cr6.eq) goto loc_82BE5EF4;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// b 0x82be5efc
	goto loc_82BE5EFC;
loc_82BE5EF4:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
loc_82BE5EFC:
	// stw r19,0(r31)
	PPC_STORE_U32(r31.u32 + 0, r19.u32);
	// stw r19,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r19.u32);
loc_82BE5F04:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82be5f20
	if (!cr6.eq) goto loc_82BE5F20;
	// lwz r11,0(r18)
	r11.u64 = PPC_LOAD_U32(r18.u32 + int32_t(0) );
	// lwz r10,20(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + int32_t(20) );
	// andc r9,r11,r10
	ctx.r9.u64 = r11.u64 & ~ctx.r10.u64;
	// stw r9,0(r18)
	PPC_STORE_U32(r18.u32 + 0, ctx.r9.u32);
loc_82BE5F20:
	// stw r24,16(r27)
	PPC_STORE_U32(r27.u32 + 16, r24.u32);
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5f70
	if (cr6.eq) goto loc_82BE5F70;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + int32_t(0) );
	// stw r25,4(r27)
	PPC_STORE_U32(r27.u32 + 4, r25.u32);
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5f54
	if (cr6.eq) goto loc_82BE5F54;
	// stw r27,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r27.u32);
	// stw r27,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r27.u32);
	// b 0x82be5fa4
	goto loc_82BE5FA4;
loc_82BE5F54:
	// lwz r11,0(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + int32_t(0) );
	// stw r27,4(r22)
	PPC_STORE_U32(r22.u32 + 4, r27.u32);
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82be5f68
	if (!cr6.eq) goto loc_82BE5F68;
	// stw r27,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r27.u32);
loc_82BE5F68:
	// stw r27,0(r25)
	PPC_STORE_U32(r25.u32 + 0, r27.u32);
	// b 0x82be5fa4
	goto loc_82BE5FA4;
loc_82BE5F70:
	// lwz r11,4(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be5f94
	if (cr6.eq) goto loc_82BE5F94;
	// stw r27,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r27.u32);
	// lwz r11,4(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + int32_t(4) );
	// stw r19,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r19.u32);
	// stw r11,4(r27)
	PPC_STORE_U32(r27.u32 + 4, r11.u32);
	// stw r27,4(r22)
	PPC_STORE_U32(r22.u32 + 4, r27.u32);
	// b 0x82be5fa4
	goto loc_82BE5FA4;
loc_82BE5F94:
	// stw r27,4(r22)
	PPC_STORE_U32(r22.u32 + 4, r27.u32);
	// stw r27,0(r22)
	PPC_STORE_U32(r22.u32 + 0, r27.u32);
	// stw r19,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r19.u32);
	// stw r19,4(r27)
	PPC_STORE_U32(r27.u32 + 4, r19.u32);
loc_82BE5FA4:
	// lwz r11,8(r22)
	r11.u64 = PPC_LOAD_U32(r22.u32 + int32_t(8) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r11,8(r22)
	PPC_STORE_U32(r22.u32 + 8, r11.u32);
	// lwz r9,8(r27)
	ctx.r9.u64 = PPC_LOAD_U32(r27.u32 + int32_t(8) );
	// lwz r11,0(r17)
	r11.u64 = PPC_LOAD_U32(r17.u32 + int32_t(0) );
	// lwz r10,24(r20)
	ctx.r10.u64 = PPC_LOAD_U32(r20.u32 + int32_t(24) );
	// addi r8,r11,-1
	ctx.r8.s64 = r11.s64 + -1;
	// stw r8,0(r17)
	PPC_STORE_U32(r17.u32 + 0, ctx.r8.u32);
	// lwz r11,4(r9)
	r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r7,r11,64
	ctx.r7.s64 = r11.s64 + 64;
	// stw r7,24(r20)
	PPC_STORE_U32(r20.u32 + 24, ctx.r7.u32);
	// b 0x82be5fdc
	goto loc_82BE5FDC;
loc_82BE5FD8:
	// lwz r25,0(r25)
	r25.u64 = PPC_LOAD_U32(r25.u32 + int32_t(0) );
loc_82BE5FDC:
	// cmplw cr6,r25,r15
	cr6.compare<uint32_t>(r25.u32, r15.u32, xer);
	// bne cr6,0x82be5d64
	if (!cr6.eq) goto loc_82BE5D64;
loc_82BE5FE4:
	// lwz r20,0(r20)
	r20.u64 = PPC_LOAD_U32(r20.u32 + int32_t(0) );
	// cmplwi cr6,r20,0
	cr6.compare<uint32_t>(r20.u32, 0, xer);
	// bne cr6,0x82be5d48
	if (!cr6.eq) goto loc_82BE5D48;
loc_82BE5FF0:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x82ca2c04
	return;
}

PPC_WEAK_FUNC(sub_82BE5D10) {
	__imp__sub_82BE5D10(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE5FF8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r19{};
	PPCRegister r20{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bc4
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r19,r4
	r19.u64 = ctx.r4.u64;
	// mr r24,r3
	r24.u64 = ctx.r3.u64;
	// lwz r11,4(r19)
	r11.u64 = PPC_LOAD_U32(r19.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// mr r26,r11
	r26.u64 = r11.u64;
	// beq cr6,0x82be6020
	if (cr6.eq) goto loc_82BE6020;
	// lwz r26,4(r11)
	r26.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
loc_82BE6020:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// mr r22,r11
	r22.u64 = r11.u64;
	// beq cr6,0x82be6030
	if (cr6.eq) goto loc_82BE6030;
	// lwz r22,4(r26)
	r22.u64 = PPC_LOAD_U32(r26.u32 + int32_t(4) );
loc_82BE6030:
	// lwz r30,4(r24)
	r30.u64 = PPC_LOAD_U32(r24.u32 + int32_t(4) );
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// beq cr6,0x82be62f8
	if (cr6.eq) goto loc_82BE62F8;
	// lis r11,-21555
	r11.s64 = -1412628480;
	// lis r25,-31924
	r25.s64 = -2092171264;
	// ori r23,r11,43981
	r23.u64 = r11.u64 | 43981;
	// li r20,0
	r20.s64 = 0;
	// lis r21,-32768
	r21.s64 = -2147483648;
loc_82BE6050:
	// lwz r31,8(r26)
	r31.u64 = PPC_LOAD_U32(r26.u32 + int32_t(8) );
	// lwz r27,16(r26)
	r27.u64 = PPC_LOAD_U32(r26.u32 + int32_t(16) );
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// subf r10,r11,r31
	ctx.r10.s64 = r31.s64 - r11.s64;
	// cmplw cr6,r10,r27
	cr6.compare<uint32_t>(ctx.r10.u32, r27.u32, xer);
	// beq cr6,0x82be6280
	if (cr6.eq) goto loc_82BE6280;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// rlwinm r10,r11,0,1,1
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be6280
	if (!cr6.eq) goto loc_82BE6280;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// add r11,r11,r27
	r11.u64 = r11.u64 + r27.u64;
	// subf r9,r10,r30
	ctx.r9.s64 = r30.s64 - ctx.r10.s64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// cmplw cr6,r9,r11
	cr6.compare<uint32_t>(ctx.r9.u32, r11.u32, xer);
	// blt cr6,0x82be60b0
	if (cr6.lt) goto loc_82BE60B0;
loc_82BE6094:
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// subf r10,r10,r30
	ctx.r10.s64 = r30.s64 - ctx.r10.s64;
	// addi r30,r10,-64
	r30.s64 = ctx.r10.s64 + -64;
	// lwz r9,-60(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-60) );
	// subf r8,r9,r30
	ctx.r8.s64 = r30.s64 - ctx.r9.s64;
	// cmplw cr6,r8,r11
	cr6.compare<uint32_t>(ctx.r8.u32, r11.u32, xer);
	// bge cr6,0x82be6094
	if (!cr6.lt) goto loc_82BE6094;
loc_82BE60B0:
	// lwz r11,36(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// rlwinm r10,r11,0,0,0
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be60d4
	if (cr6.eq) goto loc_82BE60D4;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82be6300
	sub_82BE6300(ctx, base);
	// b 0x82be60d8
	goto loc_82BE60D8;
loc_82BE60D4:
	// bl 0x82be57f8
	sub_82BE57F8(ctx, base);
loc_82BE60D8:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// subf r10,r11,r30
	ctx.r10.s64 = r30.s64 - r11.s64;
	// cmplw cr6,r10,r27
	cr6.compare<uint32_t>(ctx.r10.u32, r27.u32, xer);
	// ble cr6,0x82be6158
	if (!cr6.gt) goto loc_82BE6158;
loc_82BE60E8:
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r11,-5544(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + int32_t(-5544) );
	// subf r10,r10,r30
	ctx.r10.s64 = r30.s64 - ctx.r10.s64;
	// addi r9,r11,1
	ctx.r9.s64 = r11.s64 + 1;
	// addi r4,r10,-64
	ctx.r4.s64 = ctx.r10.s64 + -64;
	// stw r9,-5544(r25)
	PPC_STORE_U32(r25.u32 + -5544, ctx.r9.u32);
	// lwz r8,-28(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-28) );
	// lwz r31,-60(r10)
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-60) );
	// lwz r11,-56(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-56) );
	// rlwinm r7,r8,0,0,0
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x80000000;
	// subf r28,r31,r4
	r28.s64 = ctx.r4.s64 - r31.s64;
	// add r29,r11,r4
	r29.u64 = r11.u64 + ctx.r4.u64;
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82be6130
	if (cr6.eq) goto loc_82BE6130;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82be6300
	sub_82BE6300(ctx, base);
	// b 0x82be6134
	goto loc_82BE6134;
loc_82BE6130:
	// bl 0x82be57f8
	sub_82BE57F8(ctx, base);
loc_82BE6134:
	// lwz r11,68(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(68) );
	// add r11,r11,r31
	r11.u64 = r11.u64 + r31.u64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// stw r11,68(r29)
	PPC_STORE_U32(r29.u32 + 68, r11.u32);
	// stw r11,-56(r28)
	PPC_STORE_U32(r28.u32 + -56, r11.u32);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// subf r10,r11,r30
	ctx.r10.s64 = r30.s64 - r11.s64;
	// cmplw cr6,r10,r27
	cr6.compare<uint32_t>(ctx.r10.u32, r27.u32, xer);
	// bgt cr6,0x82be60e8
	if (cr6.gt) goto loc_82BE60E8;
loc_82BE6158:
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// lwz r9,16(r26)
	ctx.r9.u64 = PPC_LOAD_U32(r26.u32 + int32_t(16) );
	// subf r10,r30,r11
	ctx.r10.s64 = r11.s64 - r30.s64;
	// lwz r28,8(r26)
	r28.u64 = PPC_LOAD_U32(r26.u32 + int32_t(8) );
	// add. r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be620c
	if (cr0.eq) goto loc_82BE620C;
	// subf r9,r10,r11
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
	// subf r10,r9,r30
	ctx.r10.s64 = r30.s64 - ctx.r9.s64;
	// stw r9,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r9.u32);
	// subf r11,r9,r11
	r11.s64 = r11.s64 - ctx.r9.s64;
	// addi r31,r10,-64
	r31.s64 = ctx.r10.s64 + -64;
	// addi r11,r11,-64
	r11.s64 = r11.s64 + -64;
	// subf r8,r11,r31
	ctx.r8.s64 = r31.s64 - r11.s64;
	// lwz r7,-28(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-28) );
	// clrlwi r6,r7,2
	ctx.r6.u64 = ctx.r7.u32 & 0x3FFFFFFF;
	// stw r11,-60(r10)
	PPC_STORE_U32(ctx.r10.u32 + -60, r11.u32);
	// stw r23,-64(r10)
	PPC_STORE_U32(ctx.r10.u32 + -64, r23.u32);
	// stw r23,-24(r10)
	PPC_STORE_U32(ctx.r10.u32 + -24, r23.u32);
	// stw r6,-28(r10)
	PPC_STORE_U32(ctx.r10.u32 + -28, ctx.r6.u32);
	// stw r9,-56(r10)
	PPC_STORE_U32(ctx.r10.u32 + -56, ctx.r9.u32);
	// stw r11,-56(r8)
	PPC_STORE_U32(ctx.r8.u32 + -56, r11.u32);
	// lwz r5,-60(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(-60) );
	// subf r11,r5,r31
	r11.s64 = r31.s64 - ctx.r5.s64;
	// lwz r4,-28(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(-28) );
	// rlwinm r3,r4,0,0,0
	ctx.r3.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 0) & 0x80000000;
	// addi r29,r11,-64
	r29.s64 = r11.s64 + -64;
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be6200
	if (!cr6.eq) goto loc_82BE6200;
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// oris r10,r11,32768
	ctx.r10.u64 = r11.u64 | 2147483648;
	// stw r10,36(r31)
	PPC_STORE_U32(r31.u32 + 36, ctx.r10.u32);
	// bl 0x82be57f8
	sub_82BE57F8(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// add r11,r11,r10
	r11.u64 = r11.u64 + ctx.r10.u64;
	// addi r11,r11,64
	r11.s64 = r11.s64 + 64;
	// stw r11,4(r31)
	PPC_STORE_U32(r31.u32 + 4, r11.u32);
	// lwz r9,4(r29)
	ctx.r9.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// subf r8,r9,r29
	ctx.r8.s64 = r29.s64 - ctx.r9.s64;
	// stw r11,-56(r8)
	PPC_STORE_U32(ctx.r8.u32 + -56, r11.u32);
loc_82BE6200:
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82be5700
	sub_82BE5700(ctx, base);
loc_82BE620C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// lwz r9,24(r28)
	ctx.r9.u64 = PPC_LOAD_U32(r28.u32 + int32_t(24) );
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// lwz r8,28(r28)
	ctx.r8.u64 = PPC_LOAD_U32(r28.u32 + int32_t(28) );
	// lwz r7,20(r28)
	ctx.r7.u64 = PPC_LOAD_U32(r28.u32 + int32_t(20) );
	// lwz r6,20(r26)
	ctx.r6.u64 = PPC_LOAD_U32(r26.u32 + int32_t(20) );
	// lwz r5,4(r28)
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// bl 0x82be5458
	sub_82BE5458(ctx, base);
	// stw r3,8(r26)
	PPC_STORE_U32(r26.u32 + 8, ctx.r3.u32);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// rotlwi r5,r10,0
	ctx.r5.u64 = rotl32(ctx.r10.u32, 0);
	// subf r4,r11,r28
	ctx.r4.s64 = r28.s64 - r11.s64;
	// subf r3,r10,r3
	ctx.r3.s64 = ctx.r3.s64 - ctx.r10.s64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// lwz r9,8(r26)
	ctx.r9.u64 = PPC_LOAD_U32(r26.u32 + int32_t(8) );
	// stw r26,32(r9)
	PPC_STORE_U32(ctx.r9.u32 + 32, r26.u32);
	// lbz r8,24(r26)
	ctx.r8.u64 = PPC_LOAD_U8(r26.u32 + 24);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82be626c
	if (cr6.eq) goto loc_82BE626C;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// subf r3,r11,r28
	ctx.r3.s64 = r28.s64 - r11.s64;
	// bl 0x8221be68
	sub_8221BE68(ctx, base);
	// b 0x82be6278
	goto loc_82BE6278;
loc_82BE626C:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r24
	ctx.r3.u64 = r24.u64;
	// bl 0x82be5640
	sub_82BE5640(ctx, base);
loc_82BE6278:
	// lwz r31,8(r26)
	r31.u64 = PPC_LOAD_U32(r26.u32 + int32_t(8) );
	// mr r30,r31
	r30.u64 = r31.u64;
loc_82BE6280:
	// lwz r3,12(r26)
	ctx.r3.u64 = PPC_LOAD_U32(r26.u32 + int32_t(12) );
	// lwz r11,16(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(16) );
	// cmplw cr6,r11,r3
	cr6.compare<uint32_t>(r11.u32, ctx.r3.u32, xer);
	// beq cr6,0x82be62c0
	if (cr6.eq) goto loc_82BE62C0;
	// lwz r11,12(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r10,20(r26)
	ctx.r10.u64 = PPC_LOAD_U32(r26.u32 + int32_t(20) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x82be62a4
	if (cr6.eq) goto loc_82BE62A4;
	// twi 31,r0,22
loc_82BE62A4:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r5,28(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// subf r4,r11,r31
	ctx.r4.s64 = r31.s64 - r11.s64;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// stw r20,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r20.u32);
loc_82BE62C0:
	// lwz r11,8(r26)
	r11.u64 = PPC_LOAD_U32(r26.u32 + int32_t(8) );
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(36) );
	// rlwinm r9,r10,0,0,0
	ctx.r9.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x80000000;
	// cmplw cr6,r9,r21
	cr6.compare<uint32_t>(ctx.r9.u32, r21.u32, xer);
	// beq cr6,0x82be62d8
	if (cr6.eq) goto loc_82BE62D8;
	// twi 31,r0,22
loc_82BE62D8:
	// mr r26,r22
	r26.u64 = r22.u64;
	// cmplwi cr6,r22,0
	cr6.compare<uint32_t>(r22.u32, 0, xer);
	// bne cr6,0x82be62ec
	if (!cr6.eq) goto loc_82BE62EC;
	// lwz r22,4(r19)
	r22.u64 = PPC_LOAD_U32(r19.u32 + int32_t(4) );
	// b 0x82be62f0
	goto loc_82BE62F0;
loc_82BE62EC:
	// lwz r22,4(r22)
	r22.u64 = PPC_LOAD_U32(r22.u32 + int32_t(4) );
loc_82BE62F0:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x82be6050
	if (!cr6.eq) goto loc_82BE6050;
loc_82BE62F8:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c14
	return;
}

PPC_WEAK_FUNC(sub_82BE5FF8) {
	__imp__sub_82BE5FF8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE6300) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// lwz r8,24(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// lwz r6,20(r31)
	ctx.r6.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// lwz r5,12(r31)
	ctx.r5.u64 = PPC_LOAD_U32(r31.u32 + int32_t(12) );
	// lwz r29,32(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lwz r7,28(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(28) );
	// lwz r4,4(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// bl 0x82be5338
	sub_82BE5338(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// bne cr6,0x82be637c
	if (!cr6.eq) goto loc_82BE637C;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// addi r3,r11,64
	ctx.r3.s64 = r11.s64 + 64;
	// bl 0x8221f388
	sub_8221F388(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be6358
	if (!cr6.eq) goto loc_82BE6358;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
loc_82BE6358:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// li r5,64
	ctx.r5.s64 = 64;
	// mr r4,r31
	ctx.r4.u64 = r31.u64;
	// add r30,r11,r3
	r30.u64 = r11.u64 + ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// li r11,1
	r11.s64 = 1;
	// stb r11,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r11.u8);
	// b 0x82be6380
	goto loc_82BE6380;
loc_82BE637C:
	// stb r28,24(r29)
	PPC_STORE_U8(r29.u32 + 24, r28.u8);
loc_82BE6380:
	// stw r30,8(r29)
	PPC_STORE_U32(r29.u32 + 8, r30.u32);
	// stw r29,32(r30)
	PPC_STORE_U32(r30.u32 + 32, r29.u32);
	// stw r28,28(r31)
	PPC_STORE_U32(r31.u32 + 28, r28.u32);
	// stw r28,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r28.u32);
	// lwz r11,4(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r5,r10
	ctx.r5.u64 = ctx.r10.u64;
	// subf r3,r11,r30
	ctx.r3.s64 = r30.s64 - r11.s64;
	// subf r4,r10,r31
	ctx.r4.s64 = r31.s64 - ctx.r10.s64;
	// bl 0x82ca2c60
	sub_82CA2C60(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE6300) {
	__imp__sub_82BE6300(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE63B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r31,404
	ctx.r4.s64 = r31.s64 + 404;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82200688
	sub_82200688(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be6418
	sub_82BE6418(ctx, base);
	// lbz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 84);
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be63fc
	if (cr6.eq) goto loc_82BE63FC;
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// bl 0x832b226c
	__imp__RtlLeaveCriticalSection(ctx, base);
loc_82BE63FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE63B8) {
	__imp__sub_82BE63B8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE6418) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// mr r3,r7
	ctx.r3.u64 = ctx.r7.u64;
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
	// li r6,31
	ctx.r6.s64 = 31;
	// stw r3,-80(r1)
	PPC_STORE_U32(ctx.r1.u32 + -80, ctx.r3.u32);
loc_82BE6430:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be64f4
	if (cr6.eq) goto loc_82BE64F4;
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// stw r7,-40(r1)
	PPC_STORE_U32(ctx.r1.u32 + -40, ctx.r7.u32);
	// addi r8,r1,-64
	ctx.r8.s64 = ctx.r1.s64 + -64;
	// stw r7,-44(r1)
	PPC_STORE_U32(ctx.r1.u32 + -44, ctx.r7.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82be64b8
	if (cr6.eq) goto loc_82BE64B8;
loc_82BE645C:
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// lwz r5,24(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(24) );
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82be648c
	if (cr6.eq) goto loc_82BE648C;
	// lwz r5,20(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(20) );
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r4,20(r9)
	PPC_STORE_U32(ctx.r9.u32 + 20, ctx.r4.u32);
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// lwz r10,24(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(24) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be64b8
	if (cr6.eq) goto loc_82BE64B8;
loc_82BE648C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r10,24(r8)
	PPC_STORE_U32(ctx.r8.u32 + 24, ctx.r10.u32);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r9,24(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(24) );
	// rotlwi r10,r9,0
	ctx.r10.u64 = rotl32(ctx.r9.u32, 0);
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// lwz r5,0(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// bne cr6,0x82be645c
	if (!cr6.eq) goto loc_82BE645C;
loc_82BE64B8:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// stw r9,24(r8)
	PPC_STORE_U32(ctx.r8.u32 + 24, ctx.r9.u32);
	// lwz r8,-40(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-40) );
	// stw r8,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r8.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be64f4
	if (cr6.eq) goto loc_82BE64F4;
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// cmplw cr6,r9,r3
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r3.u32, xer);
	// bge cr6,0x82be64ec
	if (!cr6.lt) goto loc_82BE64EC;
	// addi r10,r1,-80
	ctx.r10.s64 = ctx.r1.s64 + -80;
loc_82BE64EC:
	// lwz r3,0(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r3,-80(r1)
	PPC_STORE_U32(ctx.r1.u32 + -80, ctx.r3.u32);
loc_82BE64F4:
	// addic. r6,r6,-1
	xer.ca = ctx.r6.u32 > 0;
	ctx.r6.s64 = ctx.r6.s64 + -1;
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// addi r11,r11,12
	r11.s64 = r11.s64 + 12;
	// bne 0x82be6430
	if (!cr0.eq) goto loc_82BE6430;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE6418) {
	__imp__sub_82BE6418(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE6508) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be65e0
	if (cr6.eq) goto loc_82BE65E0;
	// lwz r11,24(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be65e0
	if (cr6.eq) goto loc_82BE65E0;
	// addi r9,r11,20
	ctx.r9.s64 = r11.s64 + 20;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r7,r1,-64
	ctx.r7.s64 = ctx.r1.s64 + -64;
	// stw r10,-40(r1)
	PPC_STORE_U32(ctx.r1.u32 + -40, ctx.r10.u32);
	// stw r10,-44(r1)
	PPC_STORE_U32(ctx.r1.u32 + -44, ctx.r10.u32);
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be658c
	if (cr6.eq) goto loc_82BE658C;
loc_82BE6540:
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(0) );
	// lwz r8,20(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82be6570
	if (cr6.eq) goto loc_82BE6570;
	// lwz r6,24(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// addi r8,r10,20
	ctx.r8.s64 = ctx.r10.s64 + 20;
	// stw r6,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r6.u32);
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// stw r11,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r11.u32);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// beq cr6,0x82be658c
	if (cr6.eq) goto loc_82BE658C;
loc_82BE6570:
	// stw r11,20(r7)
	PPC_STORE_U32(ctx.r7.u32 + 20, r11.u32);
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// addi r9,r11,20
	ctx.r9.s64 = r11.s64 + 20;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be6540
	if (!cr6.eq) goto loc_82BE6540;
loc_82BE658C:
	// lwz r9,20(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// addi r10,r11,20
	ctx.r10.s64 = r11.s64 + 20;
	// lwz r8,24(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// stw r9,-40(r1)
	PPC_STORE_U32(ctx.r1.u32 + -40, ctx.r9.u32);
	// stw r8,20(r7)
	PPC_STORE_U32(ctx.r7.u32 + 20, ctx.r8.u32);
	// lwz r6,-44(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-44) );
	// lwz r7,-40(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-40) );
	// stw r7,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r7.u32);
	// stw r6,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r6.u32);
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r11,24(r5)
	PPC_STORE_U32(ctx.r5.u32 + 24, r11.u32);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lwz r11,24(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be65d4
	if (cr6.eq) goto loc_82BE65D4;
	// lwz r9,20(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// stw r9,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, ctx.r9.u32);
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
loc_82BE65D4:
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82BE65E0:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE6508) {
	__imp__sub_82BE6508(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE65E8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be66b0
	if (cr6.eq) goto loc_82BE66B0;
	// lwz r11,4(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be66b0
	if (cr6.eq) goto loc_82BE66B0;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r9,r1,-32
	ctx.r9.s64 = ctx.r1.s64 + -32;
	// stw r10,-28(r1)
	PPC_STORE_U32(ctx.r1.u32 + -28, ctx.r10.u32);
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// stw r10,-32(r1)
	PPC_STORE_U32(ctx.r1.u32 + -32, ctx.r10.u32);
	// beq cr6,0x82be6660
	if (cr6.eq) goto loc_82BE6660;
loc_82BE661C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82be6648
	if (cr6.eq) goto loc_82BE6648;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// stw r11,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r11.u32);
	// mr r11,r10
	r11.u64 = ctx.r10.u64;
	// beq cr6,0x82be6660
	if (cr6.eq) goto loc_82BE6660;
loc_82BE6648:
	// stw r11,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r11.u32);
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// lwz r11,0(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be661c
	if (!cr6.eq) goto loc_82BE661C;
loc_82BE6660:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r10,-28(r1)
	PPC_STORE_U32(ctx.r1.u32 + -28, ctx.r10.u32);
	// stw r8,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r8.u32);
	// lwz r6,-28(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-28) );
	// lwz r7,-32(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-32) );
	// stw r7,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r7.u32);
	// stw r6,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r6.u32);
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r11,4(r5)
	PPC_STORE_U32(ctx.r5.u32 + 4, r11.u32);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// lwz r11,4(r10)
	r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be66a4
	if (cr6.eq) goto loc_82BE66A4;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
loc_82BE66A4:
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, r11.u32);
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// blr 
	return;
loc_82BE66B0:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE65E8) {
	__imp__sub_82BE65E8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE66B8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r31{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be6854
	if (cr6.eq) goto loc_82BE6854;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r7,r1,-80
	ctx.r7.s64 = ctx.r1.s64 + -80;
	// stw r5,-56(r1)
	PPC_STORE_U32(ctx.r1.u32 + -56, ctx.r5.u32);
	// addi r3,r1,-80
	ctx.r3.s64 = ctx.r1.s64 + -80;
	// stw r5,-60(r1)
	PPC_STORE_U32(ctx.r1.u32 + -60, ctx.r5.u32);
	// addi r6,r1,-80
	ctx.r6.s64 = ctx.r1.s64 + -80;
loc_82BE66E4:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// addi r9,r10,20
	ctx.r9.s64 = ctx.r10.s64 + 20;
	// lwz r10,4(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplw cr6,r10,r4
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r4.u32, xer);
	// blt cr6,0x82be6754
	if (cr6.lt) goto loc_82BE6754;
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be67a4
	if (cr6.eq) goto loc_82BE67A4;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplw cr6,r8,r4
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r4.u32, xer);
	// blt cr6,0x82be6734
	if (cr6.lt) goto loc_82BE6734;
	// lwz r31,24(r10)
	r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// addi r8,r10,20
	ctx.r8.s64 = ctx.r10.s64 + 20;
	// stw r31,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, r31.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, ctx.r9.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r8,20(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82be67a4
	if (cr6.eq) goto loc_82BE67A4;
loc_82BE6734:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// stw r10,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r10.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// lwz r8,20(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(20) );
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// b 0x82be66e4
	goto loc_82BE66E4;
loc_82BE6754:
	// lwz r10,4(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be67a4
	if (cr6.eq) goto loc_82BE67A4;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplw cr6,r8,r4
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r4.u32, xer);
	// bge cr6,0x82be678c
	if (!cr6.lt) goto loc_82BE678C;
	// lwz r8,20(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// stw r8,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r8.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,20(r10)
	PPC_STORE_U32(ctx.r10.u32 + 20, ctx.r9.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r8,24(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82be67a4
	if (cr6.eq) goto loc_82BE67A4;
loc_82BE678C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r10,24(r7)
	PPC_STORE_U32(ctx.r7.u32 + 24, ctx.r10.u32);
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r9,24(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(24) );
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// b 0x82be66e4
	goto loc_82BE66E4;
loc_82BE67A4:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// addi r10,r10,20
	ctx.r10.s64 = ctx.r10.s64 + 20;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r9,24(r7)
	PPC_STORE_U32(ctx.r7.u32 + 24, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r8.u32);
	// lwz r7,-56(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-56) );
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// lwz r9,-60(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-60) );
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r8,4(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplw cr6,r8,r4
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r4.u32, xer);
	// blt cr6,0x82be67e8
	if (cr6.lt) goto loc_82BE67E8;
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE67E8:
	// addi r8,r1,-80
	ctx.r8.s64 = ctx.r1.s64 + -80;
	// cmplw cr6,r6,r8
	cr6.compare<uint32_t>(ctx.r6.u32, ctx.r8.u32, xer);
	// beq cr6,0x82be6824
	if (cr6.eq) goto loc_82BE6824;
	// cmplw cr6,r6,r9
	cr6.compare<uint32_t>(ctx.r6.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be6824
	if (cr6.eq) goto loc_82BE6824;
	// lwz r9,24(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(24) );
	// stw r9,20(r6)
	PPC_STORE_U32(ctx.r6.u32 + 20, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r8.u32);
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r7,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r7.u32);
	// stw r5,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r5.u32);
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE6824:
	// lwz r10,-60(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-60) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be6854
	if (cr6.eq) goto loc_82BE6854;
	// lwz r3,24(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(24) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be6848
	if (cr6.eq) goto loc_82BE6848;
	// lwz r10,20(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(20) );
	// stw r10,24(r9)
	PPC_STORE_U32(ctx.r9.u32 + 24, ctx.r10.u32);
	// stw r9,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r9.u32);
loc_82BE6848:
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE6854:
	// li r3,0
	ctx.r3.s64 = 0;
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE66B8) {
	__imp__sub_82BE66B8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE6860) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lwz r27,8(r30)
	r27.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// bl 0x82be7198
	sub_82BE7198(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be6968
	if (cr6.eq) goto loc_82BE6968;
	// li r28,0
	r28.s64 = 0;
loc_82BE6888:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// subfc r9,r3,r29
	xer.ca = r29.u32 >= ctx.r3.u32;
	ctx.r9.s64 = r29.s64 - ctx.r3.s64;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// beq cr6,0x82be68a0
	if (cr6.eq) goto loc_82BE68A0;
	// subfc r9,r10,r11
	xer.ca = r11.u32 >= ctx.r10.u32;
	ctx.r9.s64 = r11.s64 - ctx.r10.s64;
loc_82BE68A0:
	// subfe r8,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r9,r8,31
	ctx.r9.u64 = ctx.r8.u32 & 0x1;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82be68e0
	if (!cr6.eq) goto loc_82BE68E0;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82be68c4
	if (!cr6.eq) goto loc_82BE68C4;
	// subfc r11,r29,r3
	xer.ca = ctx.r3.u32 >= r29.u32;
	r11.s64 = ctx.r3.s64 - r29.s64;
	// b 0x82be68c8
	goto loc_82BE68C8;
loc_82BE68C4:
	// subfc r11,r11,r10
	xer.ca = ctx.r10.u32 >= r11.u32;
	r11.s64 = ctx.r10.s64 - r11.s64;
loc_82BE68C8:
	// subfe r10,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r10,31
	r11.u64 = ctx.r10.u32 & 0x1;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq cr6,0x82be68e4
	if (cr6.eq) goto loc_82BE68E4;
loc_82BE68E0:
	// mr r11,r28
	r11.u64 = r28.u64;
loc_82BE68E4:
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be6968
	if (cr6.eq) goto loc_82BE6968;
	// lwz r31,0(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be6968
	if (cr6.eq) goto loc_82BE6968;
	// lwz r10,8(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// addi r11,r31,20
	r11.s64 = r31.s64 + 20;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// stw r10,8(r30)
	PPC_STORE_U32(r30.u32 + 8, ctx.r10.u32);
	// lwz r9,24(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(24) );
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82be692c
	if (!cr6.eq) goto loc_82BE692C;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
	// stw r28,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r28.u32);
	// stw r28,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r28.u32);
	// b 0x82be695c
	goto loc_82BE695C;
loc_82BE692C:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82be6508
	sub_82BE6508(ctx, base);
	// lwz r11,0(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be694c
	if (cr6.eq) goto loc_82BE694C;
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(20) );
	// stw r10,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r10.u32);
	// b 0x82be6954
	goto loc_82BE6954;
loc_82BE694C:
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// stw r10,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r10.u32);
loc_82BE6954:
	// stw r28,24(r31)
	PPC_STORE_U32(r31.u32 + 24, r28.u32);
	// stw r28,20(r31)
	PPC_STORE_U32(r31.u32 + 20, r28.u32);
loc_82BE695C:
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// bne cr6,0x82be6888
	if (!cr6.eq) goto loc_82BE6888;
loc_82BE6968:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// subf r3,r11,r27
	ctx.r3.s64 = r27.s64 - r11.s64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BE6860) {
	__imp__sub_82BE6860(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE6978) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bdc
	// addi r31,r1,-144
	r31.s64 = ctx.r1.s64 + -144;
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// mr r25,r4
	r25.u64 = ctx.r4.u64;
	// lwz r9,8(r30)
	ctx.r9.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// cmplwi cr6,r9,1
	cr6.compare<uint32_t>(ctx.r9.u32, 1, xer);
	// ble cr6,0x82be6b54
	if (!cr6.gt) goto loc_82BE6B54;
	// rlwinm r11,r9,2,0,29
	r11.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// neg r10,r11
	ctx.r10.s64 = -r11.s64;
	// rlwinm r12,r10,0,0,27
	r12.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFF0;
	// bl 0x82ca9e84
	sub_82CA9E84(ctx, base);
	// lwz r8,0(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(0) );
	// li r26,0
	r26.s64 = 0;
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// mr r11,r26
	r11.u64 = r26.u64;
	// stwux r8,r1,r12
	ea = ctx.r1.u32 + r12.u32;
	PPC_STORE_U32(ea, ctx.r8.u32);
	ctx.r1.u32 = ea;
	// addi r27,r1,80
	r27.s64 = ctx.r1.s64 + 80;
	// beq cr6,0x82be69ec
	if (cr6.eq) goto loc_82BE69EC;
	// mr r9,r27
	ctx.r9.u64 = r27.u64;
loc_82BE69D0:
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// stw r10,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r10.u32);
	// lwz r8,8(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// addi r9,r9,4
	ctx.r9.s64 = ctx.r9.s64 + 4;
	// lwz r10,0(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// blt cr6,0x82be69d0
	if (cr6.lt) goto loc_82BE69D0;
loc_82BE69EC:
	// lwz r28,8(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// addic. r29,r28,-1
	xer.ca = r28.u32 > 0;
	r29.s64 = r28.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// blt 0x82be6a14
	if (cr0.lt) goto loc_82BE6A14;
loc_82BE69F8:
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be73c8
	sub_82BE73C8(ctx, base);
	// addic. r29,r29,-1
	xer.ca = r29.u32 > 0;
	r29.s64 = r29.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// bge 0x82be69f8
	if (!cr0.lt) goto loc_82BE69F8;
loc_82BE6A14:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// addic. r29,r11,-1
	xer.ca = r11.u32 > 0;
	r29.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// ble 0x82be6a58
	if (!cr0.gt) goto loc_82BE6A58;
	// rlwinm r11,r29,2,0,29
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// add r28,r11,r27
	r28.u64 = r11.u64 + r27.u64;
loc_82BE6A28:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// mr r6,r25
	ctx.r6.u64 = r25.u64;
	// lwz r10,0(r27)
	ctx.r10.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,0(r27)
	PPC_STORE_U32(r27.u32 + 0, r11.u32);
	// stw r10,0(r28)
	PPC_STORE_U32(r28.u32 + 0, ctx.r10.u32);
	// bl 0x82be73c8
	sub_82BE73C8(ctx, base);
	// addic. r29,r29,-1
	xer.ca = r29.u32 > 0;
	r29.s64 = r29.s64 + -1;
	cr0.compare<int32_t>(r29.s32, 0, xer);
	// addi r28,r28,-4
	r28.s64 = r28.s64 + -4;
	// bgt 0x82be6a28
	if (cr0.gt) goto loc_82BE6A28;
loc_82BE6A58:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// mr r9,r26
	ctx.r9.u64 = r26.u64;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// ble cr6,0x82be6b54
	if (!cr6.gt) goto loc_82BE6B54;
loc_82BE6A68:
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(0) );
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82be6aac
	if (!cr6.eq) goto loc_82BE6AAC;
	// lwz r8,4(r30)
	ctx.r8.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// cmplw cr6,r8,r11
	cr6.compare<uint32_t>(ctx.r8.u32, r11.u32, xer);
	// bne cr6,0x82be6a98
	if (!cr6.eq) goto loc_82BE6A98;
	// stw r26,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r26.u32);
	// stw r26,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r26.u32);
	// stw r26,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r26.u32);
	// stw r26,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r26.u32);
	// b 0x82be6af0
	goto loc_82BE6AF0;
loc_82BE6A98:
	// lwz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r26,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, r26.u32);
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r7,0(r30)
	PPC_STORE_U32(r30.u32 + 0, ctx.r7.u32);
	// b 0x82be6aec
	goto loc_82BE6AEC;
loc_82BE6AAC:
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82be6ad0
	if (!cr6.eq) goto loc_82BE6AD0;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r26,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r26.u32);
	// lwz r7,4(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r7,4(r30)
	PPC_STORE_U32(r30.u32 + 4, ctx.r7.u32);
	// stw r26,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r26.u32);
	// b 0x82be6af0
	goto loc_82BE6AF0;
loc_82BE6AD0:
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// lwz r7,4(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r7,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r7.u32);
	// stw r26,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r26.u32);
loc_82BE6AEC:
	// stw r26,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r26.u32);
loc_82BE6AF0:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// lwz r11,0(r27)
	r11.u64 = PPC_LOAD_U32(r27.u32 + int32_t(0) );
	// beq cr6,0x82be6b24
	if (cr6.eq) goto loc_82BE6B24;
	// stw r11,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, r11.u32);
	// lwz r10,4(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(4) );
	// stw r26,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r26.u32);
	// stw r10,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r10.u32);
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// b 0x82be6b34
	goto loc_82BE6B34;
loc_82BE6B24:
	// stw r11,4(r30)
	PPC_STORE_U32(r30.u32 + 4, r11.u32);
	// stw r11,0(r30)
	PPC_STORE_U32(r30.u32 + 0, r11.u32);
	// stw r26,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r26.u32);
	// stw r26,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r26.u32);
loc_82BE6B34:
	// lwz r11,8(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(8) );
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// addi r27,r27,4
	r27.s64 = r27.s64 + 4;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rotlwi r10,r11,0
	ctx.r10.u64 = rotl32(r11.u32, 0);
	// stw r11,8(r30)
	PPC_STORE_U32(r30.u32 + 8, r11.u32);
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// blt cr6,0x82be6a68
	if (cr6.lt) goto loc_82BE6A68;
loc_82BE6B54:
	// addi r1,r31,144
	ctx.r1.s64 = r31.s64 + 144;
	// b 0x82ca2c2c
	return;
}

PPC_WEAK_FUNC(sub_82BE6978) {
	__imp__sub_82BE6978(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE6B60) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be6cf0
	if (cr6.eq) goto loc_82BE6CF0;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r8,r1,-32
	ctx.r8.s64 = ctx.r1.s64 + -32;
	// stw r6,-28(r1)
	PPC_STORE_U32(ctx.r1.u32 + -28, ctx.r6.u32);
	// addi r3,r1,-32
	ctx.r3.s64 = ctx.r1.s64 + -32;
	// stw r6,-32(r1)
	PPC_STORE_U32(ctx.r1.u32 + -32, ctx.r6.u32);
	// addi r7,r1,-32
	ctx.r7.s64 = ctx.r1.s64 + -32;
loc_82BE6B88:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r10,8(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(8) );
	// lwz r5,4(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplw cr6,r5,r4
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r4.u32, xer);
	// bgt cr6,0x82be6bf8
	if (cr6.gt) goto loc_82BE6BF8;
	// lwz r10,0(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be6c4c
	if (cr6.eq) goto loc_82BE6C4C;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// lwz r5,4(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(4) );
	// cmplw cr6,r5,r4
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r4.u32, xer);
	// bgt cr6,0x82be6bd8
	if (cr6.gt) goto loc_82BE6BD8;
	// lwz r5,4(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r5,0(r9)
	PPC_STORE_U32(ctx.r9.u32 + 0, ctx.r5.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r5,0(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82be6c4c
	if (cr6.eq) goto loc_82BE6C4C;
loc_82BE6BD8:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lwz r5,0(r9)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(0) );
	// stw r5,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r5.u32);
	// b 0x82be6b88
	goto loc_82BE6B88;
loc_82BE6BF8:
	// lwz r10,4(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be6c4c
	if (cr6.eq) goto loc_82BE6C4C;
	// lwz r5,8(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// lwz r5,4(r5)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(4) );
	// cmplw cr6,r5,r4
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r4.u32, xer);
	// ble cr6,0x82be6c34
	if (!cr6.gt) goto loc_82BE6C34;
	// lwz r5,0(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r5,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r5.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r5,4(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplwi cr6,r5,0
	cr6.compare<uint32_t>(ctx.r5.u32, 0, xer);
	// beq cr6,0x82be6c4c
	if (cr6.eq) goto loc_82BE6C4C;
loc_82BE6C34:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r10,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r10.u32);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r9,4(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(4) );
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// b 0x82be6b88
	goto loc_82BE6B88;
loc_82BE6C4C:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r9,4(r8)
	PPC_STORE_U32(ctx.r8.u32 + 4, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r8.u32);
	// lwz r5,-28(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-28) );
	// stw r5,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r5.u32);
	// lwz r9,-32(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-32) );
	// stw r9,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r9.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r8,8(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(8) );
	// lwz r5,4(r8)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(4) );
	// cmplw cr6,r5,r4
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r4.u32, xer);
	// bgt cr6,0x82be6c8c
	if (cr6.gt) goto loc_82BE6C8C;
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// blr 
	return;
loc_82BE6C8C:
	// addi r8,r1,-32
	ctx.r8.s64 = ctx.r1.s64 + -32;
	// cmplw cr6,r7,r8
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r8.u32, xer);
	// beq cr6,0x82be6cc4
	if (cr6.eq) goto loc_82BE6CC4;
	// cmplw cr6,r7,r9
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be6cc4
	if (cr6.eq) goto loc_82BE6CC4;
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// stw r9,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r7,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r7.u32);
	// stw r6,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r6.u32);
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// blr 
	return;
loc_82BE6CC4:
	// lwz r10,-32(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-32) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be6cf0
	if (cr6.eq) goto loc_82BE6CF0;
	// lwz r3,4(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be6ce8
	if (cr6.eq) goto loc_82BE6CE8;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
loc_82BE6CE8:
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// blr 
	return;
loc_82BE6CF0:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE6B60) {
	__imp__sub_82BE6B60(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE6CF8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	// std r30,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r30.u64);
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be6f98
	if (cr6.eq) goto loc_82BE6F98;
	// li r30,0
	r30.s64 = 0;
	// addi r5,r1,-80
	ctx.r5.s64 = ctx.r1.s64 + -80;
	// stw r30,-56(r1)
	PPC_STORE_U32(ctx.r1.u32 + -56, r30.u32);
	// addi r3,r1,-80
	ctx.r3.s64 = ctx.r1.s64 + -80;
	// stw r30,-60(r1)
	PPC_STORE_U32(ctx.r1.u32 + -60, r30.u32);
	// addi r31,r1,-80
	r31.s64 = ctx.r1.s64 + -80;
loc_82BE6D28:
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// addi r6,r11,20
	ctx.r6.s64 = r11.s64 + 20;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// subfc r11,r11,r4
	xer.ca = ctx.r4.u32 >= r11.u32;
	r11.s64 = ctx.r4.s64 - r11.s64;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be6d48
	if (cr6.eq) goto loc_82BE6D48;
	// subfc r11,r9,r10
	xer.ca = ctx.r10.u32 >= ctx.r9.u32;
	r11.s64 = ctx.r10.s64 - ctx.r9.s64;
loc_82BE6D48:
	// subfe r9,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r9,31
	r11.u64 = ctx.r9.u32 & 0x1;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be6e48
	if (cr6.eq) goto loc_82BE6E48;
	// lwz r11,0(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be6eb8
	if (cr6.eq) goto loc_82BE6EB8;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// subfc r8,r11,r4
	xer.ca = ctx.r4.u32 >= r11.u32;
	ctx.r8.s64 = ctx.r4.s64 - r11.s64;
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be6d7c
	if (cr6.eq) goto loc_82BE6D7C;
	// subfc r8,r9,r10
	xer.ca = ctx.r10.u32 >= ctx.r9.u32;
	ctx.r8.s64 = ctx.r10.s64 - ctx.r9.s64;
loc_82BE6D7C:
	// subfe r8,r8,r8
	temp.u8 = (~ctx.r8.u32 + ctx.r8.u32 < ~ctx.r8.u32) | (~ctx.r8.u32 + ctx.r8.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~ctx.r8.u64 + ctx.r8.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r8,r8,31
	ctx.r8.u64 = ctx.r8.u32 & 0x1;
	// clrlwi r8,r8,24
	ctx.r8.u64 = ctx.r8.u32 & 0xFF;
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// bne cr6,0x82be6dbc
	if (!cr6.eq) goto loc_82BE6DBC;
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x82be6da0
	if (!cr6.eq) goto loc_82BE6DA0;
	// subfc r9,r4,r11
	xer.ca = r11.u32 >= ctx.r4.u32;
	ctx.r9.s64 = r11.s64 - ctx.r4.s64;
	// b 0x82be6da4
	goto loc_82BE6DA4;
loc_82BE6DA0:
	// subfc r9,r10,r9
	xer.ca = ctx.r9.u32 >= ctx.r10.u32;
	ctx.r9.s64 = ctx.r9.s64 - ctx.r10.s64;
loc_82BE6DA4:
	// subfe r8,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r9,r8,31
	ctx.r9.u64 = ctx.r8.u32 & 0x1;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// li r9,1
	ctx.r9.s64 = 1;
	// beq cr6,0x82be6dc0
	if (cr6.eq) goto loc_82BE6DC0;
loc_82BE6DBC:
	// mr r9,r30
	ctx.r9.u64 = r30.u64;
loc_82BE6DC0:
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82be6dd8
	if (cr6.eq) goto loc_82BE6DD8;
	// lwz r9,24(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82be6eb8
	if (cr6.eq) goto loc_82BE6EB8;
loc_82BE6DD8:
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be6dec
	if (!cr6.eq) goto loc_82BE6DEC;
	// subfc r10,r11,r4
	xer.ca = ctx.r4.u32 >= r11.u32;
	ctx.r10.s64 = ctx.r4.s64 - r11.s64;
	// b 0x82be6df0
	goto loc_82BE6DF0;
loc_82BE6DEC:
	// subfc r10,r9,r10
	xer.ca = ctx.r10.u32 >= ctx.r9.u32;
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
loc_82BE6DF0:
	// subfe r9,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r10,r9,31
	ctx.r10.u64 = ctx.r9.u32 & 0x1;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be6e28
	if (cr6.eq) goto loc_82BE6E28;
	// lwz r9,24(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// addi r10,r11,20
	ctx.r10.s64 = r11.s64 + 20;
	// stw r9,0(r6)
	PPC_STORE_U32(ctx.r6.u32 + 0, ctx.r9.u32);
	// lwz r8,0(r7)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// stw r8,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r8.u32);
	// stw r11,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r11.u32);
	// lwz r6,20(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// beq cr6,0x82be6eb8
	if (cr6.eq) goto loc_82BE6EB8;
loc_82BE6E28:
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// stw r9,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r9.u32);
	// b 0x82be6d28
	goto loc_82BE6D28;
loc_82BE6E48:
	// lwz r11,4(r6)
	r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be6eb8
	if (cr6.eq) goto loc_82BE6EB8;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmplw cr6,r10,r9
	cr6.compare<uint32_t>(ctx.r10.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be6e68
	if (!cr6.eq) goto loc_82BE6E68;
	// subfc r10,r11,r4
	xer.ca = ctx.r4.u32 >= r11.u32;
	ctx.r10.s64 = ctx.r4.s64 - r11.s64;
	// b 0x82be6e6c
	goto loc_82BE6E6C;
loc_82BE6E68:
	// subfc r10,r9,r10
	xer.ca = ctx.r10.u32 >= ctx.r9.u32;
	ctx.r10.s64 = ctx.r10.s64 - ctx.r9.s64;
loc_82BE6E6C:
	// subfe r9,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r10,r9,31
	ctx.r10.u64 = ctx.r9.u32 & 0x1;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be6ea0
	if (!cr6.eq) goto loc_82BE6EA0;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// stw r10,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r10.u32);
	// lwz r9,0(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// stw r9,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r9.u32);
	// stw r11,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, r11.u32);
	// lwz r8,24(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// cmplwi cr6,r8,0
	cr6.compare<uint32_t>(ctx.r8.u32, 0, xer);
	// beq cr6,0x82be6eb8
	if (cr6.eq) goto loc_82BE6EB8;
loc_82BE6EA0:
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// stw r11,24(r5)
	PPC_STORE_U32(ctx.r5.u32 + 24, r11.u32);
	// lwz r5,0(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// lwz r10,24(r5)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r5.u32 + int32_t(24) );
	// stw r10,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r10.u32);
	// b 0x82be6d28
	goto loc_82BE6D28;
loc_82BE6EB8:
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r10,24(r5)
	PPC_STORE_U32(ctx.r5.u32 + 24, ctx.r10.u32);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r9,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r9.u32);
	// lwz r8,-56(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-56) );
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// lwz r6,-60(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-60) );
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// lwz r9,4(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// bne cr6,0x82be6efc
	if (!cr6.eq) goto loc_82BE6EFC;
	// subfc r9,r10,r4
	xer.ca = ctx.r4.u32 >= ctx.r10.u32;
	ctx.r9.s64 = ctx.r4.s64 - ctx.r10.s64;
	// b 0x82be6f00
	goto loc_82BE6F00;
loc_82BE6EFC:
	// subfc r9,r8,r9
	xer.ca = ctx.r9.u32 >= ctx.r8.u32;
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
loc_82BE6F00:
	// subfe r8,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r8.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r9,r8,31
	ctx.r9.u64 = ctx.r8.u32 & 0x1;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82be6f24
	if (cr6.eq) goto loc_82BE6F24;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE6F24:
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// cmplw cr6,r31,r9
	cr6.compare<uint32_t>(r31.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be6f64
	if (cr6.eq) goto loc_82BE6F64;
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// beq cr6,0x82be6f64
	if (cr6.eq) goto loc_82BE6F64;
	// lwz r10,24(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(24) );
	// stw r10,20(r31)
	PPC_STORE_U32(r31.u32 + 20, ctx.r10.u32);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r9,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r9.u32);
	// lwz r8,0(r7)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// stw r8,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r8.u32);
	// stw r30,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r30.u32);
	// stw r3,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r3.u32);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE6F64:
	// lwz r11,-60(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-60) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be6f98
	if (cr6.eq) goto loc_82BE6F98;
	// lwz r3,24(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be6f88
	if (cr6.eq) goto loc_82BE6F88;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(20) );
	// stw r11,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r11.u32);
	// stw r10,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r10.u32);
loc_82BE6F88:
	// stw r3,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r3.u32);
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE6F98:
	// li r3,0
	ctx.r3.s64 = 0;
	// ld r30,-16(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE6CF8) {
	__imp__sub_82BE6CF8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE6FA8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r31{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// mr r11,r3
	r11.u64 = ctx.r3.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be718c
	if (cr6.eq) goto loc_82BE718C;
	// li r31,0
	r31.s64 = 0;
	// addi r6,r1,-48
	ctx.r6.s64 = ctx.r1.s64 + -48;
	// stw r31,-44(r1)
	PPC_STORE_U32(ctx.r1.u32 + -44, r31.u32);
	// addi r3,r1,-48
	ctx.r3.s64 = ctx.r1.s64 + -48;
	// stw r31,-48(r1)
	PPC_STORE_U32(ctx.r1.u32 + -48, r31.u32);
	// addi r5,r1,-48
	ctx.r5.s64 = ctx.r1.s64 + -48;
loc_82BE6FD4:
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r10,8(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(8) );
	// lwz r9,8(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(8) );
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// lwz r10,4(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplw cr6,r8,r10
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r10.u32, xer);
	// ble cr6,0x82be7080
	if (!cr6.gt) goto loc_82BE7080;
	// lwz r10,0(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be70d4
	if (cr6.eq) goto loc_82BE70D4;
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// lwz r9,4(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplw cr6,r9,r8
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r8.u32, xer);
	// blt cr6,0x82be7014
	if (cr6.lt) goto loc_82BE7014;
	// li r9,1
	ctx.r9.s64 = 1;
	// ble cr6,0x82be7018
	if (!cr6.gt) goto loc_82BE7018;
loc_82BE7014:
	// mr r9,r31
	ctx.r9.u64 = r31.u64;
loc_82BE7018:
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82be7030
	if (cr6.eq) goto loc_82BE7030;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// beq cr6,0x82be70d4
	if (cr6.eq) goto loc_82BE70D4;
loc_82BE7030:
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// lwz r9,4(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplw cr6,r8,r9
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r9.u32, xer);
	// ble cr6,0x82be7060
	if (!cr6.gt) goto loc_82BE7060;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r9,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r9.u32);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r8,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r8.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82be70d4
	if (cr6.eq) goto loc_82BE70D4;
loc_82BE7060:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lwz r8,0(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(0) );
	// stw r8,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r8.u32);
	// b 0x82be6fd4
	goto loc_82BE6FD4;
loc_82BE7080:
	// lwz r10,4(r7)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(4) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be70d4
	if (cr6.eq) goto loc_82BE70D4;
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(8) );
	// lwz r9,4(r9)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplw cr6,r8,r9
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r9.u32, xer);
	// bgt cr6,0x82be70bc
	if (cr6.gt) goto loc_82BE70BC;
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r9,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r9.u32);
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r8,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r8.u32);
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r7,4(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82be70d4
	if (cr6.eq) goto loc_82BE70D4;
loc_82BE70BC:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r10,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r10.u32);
	// lwz r6,0(r11)
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r9,4(r6)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(4) );
	// stw r9,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r9.u32);
	// b 0x82be6fd4
	goto loc_82BE6FD4;
loc_82BE70D4:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(0) );
	// stw r9,4(r6)
	PPC_STORE_U32(ctx.r6.u32 + 4, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r8.u32);
	// lwz r7,-44(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-44) );
	// stw r7,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r7.u32);
	// lwz r6,-48(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-48) );
	// stw r6,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, ctx.r6.u32);
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// lwz r4,8(r4)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(8) );
	// lwz r8,8(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(8) );
	// lwz r7,4(r4)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// lwz r6,4(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(4) );
	// cmplw cr6,r7,r6
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r6.u32, xer);
	// ble cr6,0x82be7120
	if (!cr6.gt) goto loc_82BE7120;
	// mr r3,r9
	ctx.r3.u64 = ctx.r9.u64;
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE7120:
	// addi r8,r1,-48
	ctx.r8.s64 = ctx.r1.s64 + -48;
	// cmplw cr6,r5,r8
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r8.u32, xer);
	// beq cr6,0x82be715c
	if (cr6.eq) goto loc_82BE715C;
	// cmplw cr6,r5,r9
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be715c
	if (cr6.eq) goto loc_82BE715C;
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(4) );
	// stw r9,0(r5)
	PPC_STORE_U32(ctx.r5.u32 + 0, ctx.r9.u32);
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r7,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r7.u32);
	// stw r31,4(r10)
	PPC_STORE_U32(ctx.r10.u32 + 4, r31.u32);
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE715C:
	// lwz r10,-48(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-48) );
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be718c
	if (cr6.eq) goto loc_82BE718C;
	// lwz r3,4(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(4) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be7180
	if (cr6.eq) goto loc_82BE7180;
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// stw r10,4(r9)
	PPC_STORE_U32(ctx.r9.u32 + 4, ctx.r10.u32);
	// stw r9,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r9.u32);
loc_82BE7180:
	// stw r3,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r3.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE718C:
	// li r3,0
	ctx.r3.s64 = 0;
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE6FA8) {
	__imp__sub_82BE6FA8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE7198) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r31{};
	PPCRegister temp{};
	// std r31,-8(r1)
	PPC_STORE_U64(ctx.r1.u32 + -8, r31.u64);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be73b8
	if (cr6.eq) goto loc_82BE73B8;
	// li r31,0
	r31.s64 = 0;
	// addi r6,r1,-80
	ctx.r6.s64 = ctx.r1.s64 + -80;
	// stw r31,-56(r1)
	PPC_STORE_U32(ctx.r1.u32 + -56, r31.u32);
	// addi r3,r1,-80
	ctx.r3.s64 = ctx.r1.s64 + -80;
	// stw r31,-60(r1)
	PPC_STORE_U32(ctx.r1.u32 + -60, r31.u32);
	// addi r5,r1,-80
	ctx.r5.s64 = ctx.r1.s64 + -80;
loc_82BE71C4:
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// addi r7,r11,20
	ctx.r7.s64 = r11.s64 + 20;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// subfc r11,r4,r11
	xer.ca = r11.u32 >= ctx.r4.u32;
	r11.s64 = r11.s64 - ctx.r4.s64;
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// beq cr6,0x82be71e4
	if (cr6.eq) goto loc_82BE71E4;
	// subfc r11,r10,r9
	xer.ca = ctx.r9.u32 >= ctx.r10.u32;
	r11.s64 = ctx.r9.s64 - ctx.r10.s64;
loc_82BE71E4:
	// subfe r9,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r11,r9,31
	r11.u64 = ctx.r9.u32 & 0x1;
	// clrlwi r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// bne cr6,0x82be7274
	if (!cr6.eq) goto loc_82BE7274;
	// lwz r11,0(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(0) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be72e4
	if (cr6.eq) goto loc_82BE72E4;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x82be7218
	if (!cr6.eq) goto loc_82BE7218;
	// subfc r10,r4,r11
	xer.ca = r11.u32 >= ctx.r4.u32;
	ctx.r10.s64 = r11.s64 - ctx.r4.s64;
	// b 0x82be721c
	goto loc_82BE721C;
loc_82BE7218:
	// subfc r10,r10,r9
	xer.ca = ctx.r9.u32 >= ctx.r10.u32;
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
loc_82BE721C:
	// subfe r9,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r10,r9,31
	ctx.r10.u64 = ctx.r9.u32 & 0x1;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// bne cr6,0x82be7254
	if (!cr6.eq) goto loc_82BE7254;
	// lwz r9,24(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// addi r10,r11,20
	ctx.r10.s64 = r11.s64 + 20;
	// stw r9,0(r7)
	PPC_STORE_U32(ctx.r7.u32 + 0, ctx.r9.u32);
	// lwz r7,0(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// stw r7,24(r11)
	PPC_STORE_U32(r11.u32 + 24, ctx.r7.u32);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// lwz r11,20(r11)
	r11.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be72e4
	if (cr6.eq) goto loc_82BE72E4;
loc_82BE7254:
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// stw r11,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, r11.u32);
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// lwz r9,20(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// stw r9,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r9.u32);
	// b 0x82be71c4
	goto loc_82BE71C4;
loc_82BE7274:
	// lwz r11,4(r7)
	r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(4) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be72e4
	if (cr6.eq) goto loc_82BE72E4;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x82be7294
	if (!cr6.eq) goto loc_82BE7294;
	// subfc r10,r4,r11
	xer.ca = r11.u32 >= ctx.r4.u32;
	ctx.r10.s64 = r11.s64 - ctx.r4.s64;
	// b 0x82be7298
	goto loc_82BE7298;
loc_82BE7294:
	// subfc r10,r10,r9
	xer.ca = ctx.r9.u32 >= ctx.r10.u32;
	ctx.r10.s64 = ctx.r9.s64 - ctx.r10.s64;
loc_82BE7298:
	// subfe r9,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r10,r9,31
	ctx.r10.u64 = ctx.r9.u32 & 0x1;
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be72cc
	if (cr6.eq) goto loc_82BE72CC;
	// lwz r10,20(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(20) );
	// stw r10,4(r7)
	PPC_STORE_U32(ctx.r7.u32 + 4, ctx.r10.u32);
	// lwz r9,0(r8)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// stw r9,20(r11)
	PPC_STORE_U32(r11.u32 + 20, ctx.r9.u32);
	// stw r11,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, r11.u32);
	// lwz r7,24(r11)
	ctx.r7.u64 = PPC_LOAD_U32(r11.u32 + int32_t(24) );
	// cmplwi cr6,r7,0
	cr6.compare<uint32_t>(ctx.r7.u32, 0, xer);
	// beq cr6,0x82be72e4
	if (cr6.eq) goto loc_82BE72E4;
loc_82BE72CC:
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// stw r11,24(r6)
	PPC_STORE_U32(ctx.r6.u32 + 24, r11.u32);
	// lwz r6,0(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// lwz r10,24(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(24) );
	// stw r10,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r10.u32);
	// b 0x82be71c4
	goto loc_82BE71C4;
loc_82BE72E4:
	// lwz r11,0(r8)
	r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// addi r11,r11,20
	r11.s64 = r11.s64 + 20;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// stw r10,24(r6)
	PPC_STORE_U32(ctx.r6.u32 + 24, ctx.r10.u32);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r9,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r9.u32);
	// lwz r7,-56(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-56) );
	// stw r7,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r7.u32);
	// lwz r6,-60(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-60) );
	// stw r6,4(r11)
	PPC_STORE_U32(r11.u32 + 4, ctx.r6.u32);
	// lwz r10,0(r8)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// lwz r9,4(r4)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r4.u32 + int32_t(4) );
	// lwz r7,4(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(4) );
	// cmplw cr6,r7,r9
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be7328
	if (!cr6.eq) goto loc_82BE7328;
	// subfc r9,r4,r10
	xer.ca = ctx.r10.u32 >= ctx.r4.u32;
	ctx.r9.s64 = ctx.r10.s64 - ctx.r4.s64;
	// b 0x82be732c
	goto loc_82BE732C;
loc_82BE7328:
	// subfc r9,r9,r7
	xer.ca = ctx.r7.u32 >= ctx.r9.u32;
	ctx.r9.s64 = ctx.r7.s64 - ctx.r9.s64;
loc_82BE732C:
	// subfe r7,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r7.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// clrlwi r9,r7,31
	ctx.r9.u64 = ctx.r7.u32 & 0x1;
	// clrlwi r9,r9,24
	ctx.r9.u64 = ctx.r9.u32 & 0xFF;
	// cmplwi cr6,r9,0
	cr6.compare<uint32_t>(ctx.r9.u32, 0, xer);
	// bne cr6,0x82be734c
	if (!cr6.eq) goto loc_82BE734C;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE734C:
	// addi r9,r1,-80
	ctx.r9.s64 = ctx.r1.s64 + -80;
	// cmplw cr6,r5,r9
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be7388
	if (cr6.eq) goto loc_82BE7388;
	// cmplw cr6,r5,r10
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r10.u32, xer);
	// beq cr6,0x82be7388
	if (cr6.eq) goto loc_82BE7388;
	// lwz r10,24(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(24) );
	// stw r10,20(r5)
	PPC_STORE_U32(ctx.r5.u32 + 20, ctx.r10.u32);
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(r11.u32 + int32_t(4) );
	// stw r9,24(r3)
	PPC_STORE_U32(ctx.r3.u32 + 24, ctx.r9.u32);
	// lwz r7,0(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + int32_t(0) );
	// stw r7,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r7.u32);
	// stw r31,4(r11)
	PPC_STORE_U32(r11.u32 + 4, r31.u32);
	// stw r3,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r3.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE7388:
	// lwz r11,-60(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-60) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be73b8
	if (cr6.eq) goto loc_82BE73B8;
	// lwz r3,24(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(24) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be73ac
	if (cr6.eq) goto loc_82BE73AC;
	// lwz r11,20(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(20) );
	// stw r11,24(r10)
	PPC_STORE_U32(ctx.r10.u32 + 24, r11.u32);
	// stw r10,20(r3)
	PPC_STORE_U32(ctx.r3.u32 + 20, ctx.r10.u32);
loc_82BE73AC:
	// stw r3,0(r8)
	PPC_STORE_U32(ctx.r8.u32 + 0, ctx.r3.u32);
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
loc_82BE73B8:
	// li r3,0
	ctx.r3.s64 = 0;
	// ld r31,-8(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE7198) {
	__imp__sub_82BE7198(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE73C8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
loc_82BE73C8:
	// rlwinm r10,r5,1,0,30
	ctx.r10.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r8,r5
	ctx.r8.u64 = ctx.r5.u64;
	// addi r11,r10,1
	r11.s64 = ctx.r10.s64 + 1;
	// cmplw cr6,r11,r4
	cr6.compare<uint32_t>(r11.u32, ctx.r4.u32, xer);
	// bge cr6,0x82be7404
	if (!cr6.lt) goto loc_82BE7404;
	// rlwinm r9,r5,3,0,28
	ctx.r9.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 3) & 0xFFFFFFF8;
	// rlwinm r7,r5,2,0,29
	ctx.r7.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r9,r3
	ctx.r6.u64 = ctx.r9.u64 + ctx.r3.u64;
	// lwzx r9,r7,r3
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r3.u32);
	// lwz r7,4(r6)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(4) );
	// lwz r6,20(r9)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + int32_t(20) );
	// lwz r9,20(r7)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r7.u32 + int32_t(20) );
	// cmplw cr6,r9,r6
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r6.u32, xer);
	// bge cr6,0x82be7404
	if (!cr6.lt) goto loc_82BE7404;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
loc_82BE7404:
	// addi r11,r10,2
	r11.s64 = ctx.r10.s64 + 2;
	// cmplw cr6,r11,r4
	cr6.compare<uint32_t>(r11.u32, ctx.r4.u32, xer);
	// bge cr6,0x82be7438
	if (!cr6.lt) goto loc_82BE7438;
	// addi r10,r8,1
	ctx.r10.s64 = ctx.r8.s64 + 1;
	// rlwinm r9,r5,2,0,29
	ctx.r9.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r7,r10,3,0,28
	ctx.r7.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r6,r9,r3
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r3.u32);
	// lwzx r10,r7,r3
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r3.u32);
	// lwz r9,20(r6)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r6.u32 + int32_t(20) );
	// lwz r7,20(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + int32_t(20) );
	// cmplw cr6,r7,r9
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r9.u32, xer);
	// bge cr6,0x82be7438
	if (!cr6.lt) goto loc_82BE7438;
	// mr r5,r11
	ctx.r5.u64 = r11.u64;
loc_82BE7438:
	// cmplw cr6,r8,r5
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r5.u32, xer);
	// beqlr cr6
	if (cr6.eq) return;
	// rlwinm r10,r5,2,0,29
	ctx.r10.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// rlwinm r11,r8,2,0,29
	r11.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r10,r3
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r3.u32);
	// lwzx r8,r11,r3
	ctx.r8.u64 = PPC_LOAD_U32(r11.u32 + ctx.r3.u32);
	// stwx r9,r11,r3
	PPC_STORE_U32(r11.u32 + ctx.r3.u32, ctx.r9.u32);
	// stwx r8,r10,r3
	PPC_STORE_U32(ctx.r10.u32 + ctx.r3.u32, ctx.r8.u32);
	// b 0x82be73c8
	goto loc_82BE73C8;
}

PPC_WEAK_FUNC(sub_82BE73C8) {
	__imp__sub_82BE73C8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE745C) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE745C) {
	__imp__sub_82BE745C(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE7460) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r30,0
	r30.s64 = 0;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// lis r9,-32245
	ctx.r9.s64 = -2113208320;
	// lfs f0,-16596(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r11.u32 + -16596);
	f0.f64 = double(temp.f32);
	// addi r6,r10,-3512
	ctx.r6.s64 = ctx.r10.s64 + -3512;
	// stfs f0,44(r31)
	temp.f32 = float(f0.f64);
	PPC_STORE_U32(r31.u32 + 44, temp.u32);
	// stw r30,32(r31)
	PPC_STORE_U32(r31.u32 + 32, r30.u32);
	// stw r30,36(r31)
	PPC_STORE_U32(r31.u32 + 36, r30.u32);
	// addi r5,r9,-6332
	ctx.r5.s64 = ctx.r9.s64 + -6332;
	// stw r30,40(r31)
	PPC_STORE_U32(r31.u32 + 40, r30.u32);
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x82ca3eb8
	sub_82CA3EB8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,10
	ctx.r4.s64 = 10;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bbf648
	sub_82BBF648(ctx, base);
	// li r5,216
	ctx.r5.s64 = 216;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,48
	ctx.r3.s64 = r31.s64 + 48;
	// bl 0x82ca3190
	sub_82CA3190(ctx, base);
	// li r5,216
	ctx.r5.s64 = 216;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,264
	ctx.r3.s64 = r31.s64 + 264;
	// bl 0x82ca3190
	sub_82CA3190(ctx, base);
	// lwz r8,40(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r7,r10,r11
	ctx.r7.u64 = ctx.r10.u64 + r11.u64;
	// cmplw cr6,r11,r7
	cr6.compare<uint32_t>(r11.u32, ctx.r7.u32, xer);
	// beq cr6,0x82be7514
	if (cr6.eq) goto loc_82BE7514;
loc_82BE74F4:
	// stw r30,0(r11)
	PPC_STORE_U32(r11.u32 + 0, r30.u32);
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r10,32(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// lwz r9,40(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// rlwinm r9,r9,2,0,29
	ctx.r9.u64 = rotl64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// add r8,r9,r10
	ctx.r8.u64 = ctx.r9.u64 + ctx.r10.u64;
	// cmplw cr6,r11,r8
	cr6.compare<uint32_t>(r11.u32, ctx.r8.u32, xer);
	// bne cr6,0x82be74f4
	if (!cr6.eq) goto loc_82BE74F4;
loc_82BE7514:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE7460) {
	__imp__sub_82BE7460(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE7530) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// lwz r11,40(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(40) );
	// lwz r31,32(r30)
	r31.u64 = PPC_LOAD_U32(r30.u32 + int32_t(32) );
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r31
	ctx.r10.u64 = r11.u64 + r31.u64;
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// beq cr6,0x82be75a8
	if (cr6.eq) goto loc_82BE75A8;
loc_82BE7558:
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be758c
	if (cr6.eq) goto loc_82BE758C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// lwz r29,0(r31)
	r29.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// bl 0x82ba8718
	sub_82BA8718(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r5,876
	ctx.r5.s64 = 876;
	// bl 0x82ba9068
	sub_82BA9068(ctx, base);
loc_82BE758C:
	// lwz r11,40(r30)
	r11.u64 = PPC_LOAD_U32(r30.u32 + int32_t(40) );
	// addi r31,r31,4
	r31.s64 = r31.s64 + 4;
	// lwz r10,32(r30)
	ctx.r10.u64 = PPC_LOAD_U32(r30.u32 + int32_t(32) );
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// cmplw cr6,r31,r10
	cr6.compare<uint32_t>(r31.u32, ctx.r10.u32, xer);
	// bne cr6,0x82be7558
	if (!cr6.eq) goto loc_82BE7558;
loc_82BE75A8:
	// li r31,0
	r31.s64 = 0;
	// lwz r29,36(r30)
	r29.u64 = PPC_LOAD_U32(r30.u32 + int32_t(36) );
	// lwz r28,32(r30)
	r28.u64 = PPC_LOAD_U32(r30.u32 + int32_t(32) );
	// stw r31,40(r30)
	PPC_STORE_U32(r30.u32 + 40, r31.u32);
	// bl 0x82ba8718
	sub_82BA8718(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// rlwinm r5,r29,2,0,29
	ctx.r5.u64 = rotl64(r29.u32 | (r29.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x82ba9068
	sub_82BA9068(ctx, base);
	// stw r31,36(r30)
	PPC_STORE_U32(r30.u32 + 36, r31.u32);
	// stw r31,32(r30)
	PPC_STORE_U32(r30.u32 + 32, r31.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE7530) {
	__imp__sub_82BE7530(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE75D8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r29,r5
	r29.u64 = ctx.r5.u64;
	// addi r28,r11,-3496
	r28.s64 = r11.s64 + -3496;
	// addi r27,r10,-3392
	r27.s64 = ctx.r10.s64 + -3392;
	// bl 0x82ba8718
	sub_82BA8718(ctx, base);
	// li r4,876
	ctx.r4.s64 = 876;
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// mr r6,r28
	ctx.r6.u64 = r28.u64;
	// li r7,71
	ctx.r7.s64 = 71;
	// bl 0x82ba8f18
	sub_82BA8F18(ctx, base);
	// cmplwi cr6,r3,0
	cr6.compare<uint32_t>(ctx.r3.u32, 0, xer);
	// beq cr6,0x82be7634
	if (cr6.eq) goto loc_82BE7634;
	// mr r5,r29
	ctx.r5.u64 = r29.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// bl 0x82ba92e0
	sub_82BA92E0(ctx, base);
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// b 0x82be7638
	goto loc_82BE7638;
loc_82BE7634:
	// li r30,0
	r30.s64 = 0;
loc_82BE7638:
	// lwz r11,36(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(36) );
	// lwz r10,40(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// cmpw cr6,r10,r11
	cr6.compare<int32_t>(ctx.r10.s32, r11.s32, xer);
	// bne cr6,0x82be7680
	if (!cr6.eq) goto loc_82BE7680;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// lfs f0,44(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(r31.u32 + 44);
	f0.f64 = double(temp.f32);
	// li r5,0
	ctx.r5.s64 = 0;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, r11.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f12,f13
	ctx.f12.f64 = double(ctx.f13.s64);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// frsp f11,f12
	ctx.f11.f64 = double(float(ctx.f12.f64));
	// fmuls f10,f0,f11
	ctx.f10.f64 = double(float(f0.f64 * ctx.f11.f64));
	// fctiwz f9,f10
	ctx.f9.u64 = uint64_t(int32_t(std::trunc(ctx.f10.f64)));
	// stfd f9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f9.u64);
	// lwz r11,84(r1)
	r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(84) );
	// addi r4,r11,1
	ctx.r4.s64 = r11.s64 + 1;
	// bl 0x82bbf648
	sub_82BBF648(ctx, base);
loc_82BE7680:
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,32(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r30,r9,r10
	PPC_STORE_U32(ctx.r9.u32 + ctx.r10.u32, r30.u32);
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// addi r8,r11,1
	ctx.r8.s64 = r11.s64 + 1;
	// stw r8,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r8.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BE75D8) {
	__imp__sub_82BE75D8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE76A8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be8
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// li r28,0
	r28.s64 = 0;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r30,r28
	r30.u64 = r28.u64;
	// lwz r10,40(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// lwz r11,32(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r10,r11
	ctx.r9.u64 = ctx.r10.u64 + r11.u64;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be776c
	if (cr6.eq) goto loc_82BE776C;
loc_82BE76DC:
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// cmplw cr6,r29,r10
	cr6.compare<uint32_t>(r29.u32, ctx.r10.u32, xer);
	// beq cr6,0x82be770c
	if (cr6.eq) goto loc_82BE770C;
	// lwz r10,40(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// lwz r9,32(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// addi r30,r30,1
	r30.s64 = r30.s64 + 1;
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be76dc
	if (!cr6.eq) goto loc_82BE76DC;
	// b 0x82be776c
	goto loc_82BE776C;
loc_82BE770C:
	// cmplwi cr6,r29,0
	cr6.compare<uint32_t>(r29.u32, 0, xer);
	// beq cr6,0x82be773c
	if (cr6.eq) goto loc_82BE773C;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = r29.u64;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(r11.u32 + int32_t(0) );
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// bl 0x82ba8718
	sub_82BA8718(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// li r5,876
	ctx.r5.s64 = 876;
	// bl 0x82ba9068
	sub_82BA9068(ctx, base);
loc_82BE773C:
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// rlwinm r10,r30,2,0,29
	ctx.r10.u64 = rotl64(r30.u32 | (r30.u64 << 32), 2) & 0xFFFFFFFC;
	// lwz r9,32(r31)
	ctx.r9.u64 = PPC_LOAD_U32(r31.u32 + int32_t(32) );
	// subf r11,r30,r11
	r11.s64 = r11.s64 - r30.s64;
	// add r3,r10,r9
	ctx.r3.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r10,r11,-1
	ctx.r10.s64 = r11.s64 + -1;
	// addi r4,r3,4
	ctx.r4.s64 = ctx.r3.s64 + 4;
	// rlwinm r5,r10,2,0,29
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// bl 0x82caa2e0
	sub_82CAA2E0(ctx, base);
	// lwz r11,40(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(40) );
	// addi r9,r11,-1
	ctx.r9.s64 = r11.s64 + -1;
	// stw r9,40(r31)
	PPC_STORE_U32(r31.u32 + 40, ctx.r9.u32);
loc_82BE776C:
	// lwz r11,252(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(252) );
	// cmplw cr6,r29,r11
	cr6.compare<uint32_t>(r29.u32, r11.u32, xer);
	// bne cr6,0x82be7784
	if (!cr6.eq) goto loc_82BE7784;
	// stw r28,472(r31)
	PPC_STORE_U32(r31.u32 + 472, r28.u32);
	// stw r28,252(r31)
	PPC_STORE_U32(r31.u32 + 252, r28.u32);
	// stw r28,256(r31)
	PPC_STORE_U32(r31.u32 + 256, r28.u32);
loc_82BE7784:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x82ca2c38
	return;
}

PPC_WEAK_FUNC(sub_82BE76A8) {
	__imp__sub_82BE76A8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE7790) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bcc
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// mr r11,r4
	r11.u64 = ctx.r4.u64;
	// addi r4,r10,25232
	ctx.r4.s64 = ctx.r10.s64 + 25232;
	// mr r25,r3
	r25.u64 = ctx.r3.u64;
	// mr r24,r5
	r24.u64 = ctx.r5.u64;
	// mr r29,r6
	r29.u64 = ctx.r6.u64;
	// mr r26,r7
	r26.u64 = ctx.r7.u64;
	// mr r22,r8
	r22.u64 = ctx.r8.u64;
	// mr r23,r9
	r23.u64 = ctx.r9.u64;
	// clrlwi r31,r11,26
	r31.u64 = r11.u32 & 0x3F;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// li r21,0
	r21.s64 = 0;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x82be77e0
	if (!cr6.eq) goto loc_82BE77E0;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// bne cr6,0x82be77e4
	if (!cr6.eq) goto loc_82BE77E4;
loc_82BE77E0:
	// mr r11,r21
	r11.u64 = r21.u64;
loc_82BE77E4:
	// clrlwi r28,r11,24
	r28.u64 = r11.u32 & 0xFF;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// bne cr6,0x82be7808
	if (!cr6.eq) goto loc_82BE7808;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82be7800
	if (cr6.eq) goto loc_82BE7800;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// bne cr6,0x82be7808
	if (!cr6.eq) goto loc_82BE7808;
loc_82BE7800:
	// li r11,1
	r11.s64 = 1;
	// b 0x82be780c
	goto loc_82BE780C;
loc_82BE7808:
	// mr r11,r21
	r11.u64 = r21.u64;
loc_82BE780C:
	// clrlwi r27,r11,24
	r27.u64 = r11.u32 & 0xFF;
	// li r30,-1
	r30.s64 = -1;
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// beq cr6,0x82be78c4
	if (cr6.eq) goto loc_82BE78C4;
	// cmpwi cr6,r31,32
	cr6.compare<int32_t>(r31.s32, 32, xer);
	// beq cr6,0x82be78b8
	if (cr6.eq) goto loc_82BE78B8;
	// ble cr6,0x82be7868
	if (!cr6.gt) goto loc_82BE7868;
	// cmpwi cr6,r31,37
	cr6.compare<int32_t>(r31.s32, 37, xer);
	// ble cr6,0x82be7858
	if (!cr6.gt) goto loc_82BE7858;
	// cmpwi cr6,r31,62
	cr6.compare<int32_t>(r31.s32, 62, xer);
	// beq cr6,0x82be784c
	if (cr6.eq) goto loc_82BE784C;
	// cmpwi cr6,r31,63
	cr6.compare<int32_t>(r31.s32, 63, xer);
	// bne cr6,0x82be7868
	if (!cr6.eq) goto loc_82BE7868;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-980
	ctx.r5.s64 = r11.s64 + -980;
	// b 0x82be78d0
	goto loc_82BE78D0;
loc_82BE784C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-988
	ctx.r5.s64 = r11.s64 + -988;
	// b 0x82be78d0
	goto loc_82BE78D0;
loc_82BE7858:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r30,r31,-33
	r30.s64 = r31.s64 + -33;
	// addi r5,r11,-992
	ctx.r5.s64 = r11.s64 + -992;
	// b 0x82be78d0
	goto loc_82BE78D0;
loc_82BE7868:
	// lwz r11,8(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + int32_t(8) );
	// rlwinm. r11,r11,29,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be78ac
	if (cr0.eq) goto loc_82BE78AC;
	// lwz r11,0(r25)
	r11.u64 = PPC_LOAD_U32(r25.u32 + int32_t(0) );
	// rlwinm r10,r11,4,29,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 4) & 0x7;
	// cmpw cr6,r31,r10
	cr6.compare<int32_t>(r31.s32, ctx.r10.s32, xer);
	// bge cr6,0x82be7890
	if (!cr6.lt) goto loc_82BE7890;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-972
	ctx.r5.s64 = r11.s64 + -972;
	// b 0x82be78cc
	goto loc_82BE78CC;
loc_82BE7890:
	// cmpwi cr6,r31,61
	cr6.compare<int32_t>(r31.s32, 61, xer);
	// bne cr6,0x82be78ac
	if (!cr6.eq) goto loc_82BE78AC;
	// rlwinm. r11,r11,0,4,4
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be78ac
	if (cr0.eq) goto loc_82BE78AC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-968
	ctx.r5.s64 = r11.s64 + -968;
	// b 0x82be78d0
	goto loc_82BE78D0;
loc_82BE78AC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-960
	ctx.r5.s64 = r11.s64 + -960;
	// b 0x82be78cc
	goto loc_82BE78CC;
loc_82BE78B8:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-996
	ctx.r5.s64 = r11.s64 + -996;
	// b 0x82be78d0
	goto loc_82BE78D0;
loc_82BE78C4:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r5,r11,11932
	ctx.r5.s64 = r11.s64 + 11932;
loc_82BE78CC:
	// mr r30,r31
	r30.u64 = r31.u64;
loc_82BE78D0:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,-6332
	ctx.r4.s64 = r11.s64 + -6332;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// clrlwi. r31,r28,24
	r31.u64 = r28.u32 & 0xFF;
	cr0.compare<int32_t>(r31.s32, 0, xer);
	// beq 0x82be78f8
	if (cr0.eq) goto loc_82BE78F8;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,29656
	ctx.r4.s64 = r11.s64 + 29656;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE78F8:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x82be7918
	if (!cr6.eq) goto loc_82BE7918;
	// cmpwi cr6,r26,0
	cr6.compare<int32_t>(r26.s32, 0, xer);
	// beq cr6,0x82be7918
	if (cr6.eq) goto loc_82BE7918;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,-956
	ctx.r4.s64 = r11.s64 + -956;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7918:
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// blt cr6,0x82be7934
	if (cr6.lt) goto loc_82BE7934;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,2864
	ctx.r4.s64 = r11.s64 + 2864;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7934:
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82be794c
	if (cr6.eq) goto loc_82BE794C;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,29664
	ctx.r4.s64 = r11.s64 + 29664;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE794C:
	// clrlwi. r11,r27,24
	r11.u64 = r27.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be7960
	if (cr0.eq) goto loc_82BE7960;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-952
	ctx.r4.s64 = r11.s64 + -952;
	// b 0x82be7af4
	goto loc_82BE7AF4;
loc_82BE7960:
	// cmpwi cr6,r29,0
	cr6.compare<int32_t>(r29.s32, 0, xer);
	// bne cr6,0x82be79dc
	if (!cr6.eq) goto loc_82BE79DC;
	// cmpwi cr6,r24,15
	cr6.compare<int32_t>(r24.s32, 15, xer);
	// beq cr6,0x82be7afc
	if (cr6.eq) goto loc_82BE7AFC;
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,-6348
	ctx.r4.s64 = r11.s64 + -6348;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// clrlwi. r11,r24,31
	r11.u64 = r24.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be7998
	if (cr0.eq) goto loc_82BE7998;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,-9824
	ctx.r4.s64 = r11.s64 + -9824;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7998:
	// rlwinm. r11,r24,0,30,30
	r11.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be79b0
	if (cr0.eq) goto loc_82BE79B0;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,-9820
	ctx.r4.s64 = r11.s64 + -9820;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE79B0:
	// rlwinm. r11,r24,0,29,29
	r11.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be79c8
	if (cr0.eq) goto loc_82BE79C8;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,-9816
	ctx.r4.s64 = r11.s64 + -9816;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE79C8:
	// rlwinm. r11,r24,0,28,28
	r11.u64 = rotl64(r24.u32 | (r24.u64 << 32), 0) & 0x8;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be7afc
	if (cr0.eq) goto loc_82BE7AFC;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r4,r11,11952
	ctx.r4.s64 = r11.s64 + 11952;
	// b 0x82be7af4
	goto loc_82BE7AF4;
loc_82BE79DC:
	// cmpwi cr6,r24,15
	cr6.compare<int32_t>(r24.s32, 15, xer);
	// bne cr6,0x82be79ec
	if (!cr6.eq) goto loc_82BE79EC;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x82be7afc
	if (cr6.eq) goto loc_82BE7AFC;
loc_82BE79EC:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// addi r4,r11,-6348
	ctx.r4.s64 = r11.s64 + -6348;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32250
	r11.s64 = -2113536000;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
	// addi r9,r11,-25120
	ctx.r9.s64 = r11.s64 + -25120;
loc_82BE7A08:
	// li r11,1
	r11.s64 = 1;
	// slw r11,r11,r10
	r11.u64 = ctx.r10.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r10.u8 & 0x3F));
	// and. r8,r11,r24
	ctx.r8.u64 = r11.u64 & r24.u64;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// beq 0x82be7a30
	if (cr0.eq) goto loc_82BE7A30;
	// and. r11,r11,r23
	r11.u64 = r11.u64 & r23.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be7a28
	if (cr0.eq) goto loc_82BE7A28;
	// li r11,49
	r11.s64 = 49;
	// b 0x82be7a54
	goto loc_82BE7A54;
loc_82BE7A28:
	// lbzx r11,r10,r9
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + ctx.r9.u32);
	// b 0x82be7a54
	goto loc_82BE7A54;
loc_82BE7A30:
	// and. r11,r11,r23
	r11.u64 = r11.u64 & r23.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be7a40
	if (cr0.eq) goto loc_82BE7A40;
	// li r11,95
	r11.s64 = 95;
	// b 0x82be7a54
	goto loc_82BE7A54;
loc_82BE7A40:
	// subfic r11,r22,0
	xer.ca = r22.u32 <= 0;
	r11.s64 = 0 - r22.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,31,27
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFF1;
	// rlwinm r11,r11,0,27,25
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFDF;
	// addi r11,r11,95
	r11.s64 = r11.s64 + 95;
loc_82BE7A54:
	// addi r8,r1,144
	ctx.r8.s64 = ctx.r1.s64 + 144;
	// stbx r11,r10,r8
	PPC_STORE_U8(ctx.r10.u32 + ctx.r8.u32, r11.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// blt cr6,0x82be7a08
	if (cr6.lt) goto loc_82BE7A08;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r8,r1,152
	ctx.r8.s64 = ctx.r1.s64 + 152;
	// mr r10,r21
	ctx.r10.u64 = r21.u64;
loc_82BE7A74:
	// addi r11,r1,144
	r11.s64 = ctx.r1.s64 + 144;
	// lbzx r9,r10,r11
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// extsb r11,r9
	r11.s64 = ctx.r9.s8;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// beq cr6,0x82be7ab0
	if (cr6.eq) goto loc_82BE7AB0;
	// cmpwi cr6,r11,49
	cr6.compare<int32_t>(r11.s32, 49, xer);
	// beq cr6,0x82be7ab0
	if (cr6.eq) goto loc_82BE7AB0;
	// cmpwi cr6,r11,95
	cr6.compare<int32_t>(r11.s32, 95, xer);
	// beq cr6,0x82be7aa0
	if (cr6.eq) goto loc_82BE7AA0;
	// stb r9,0(r8)
	PPC_STORE_U8(ctx.r8.u32 + 0, ctx.r9.u8);
	// addi r8,r8,1
	ctx.r8.s64 = ctx.r8.s64 + 1;
loc_82BE7AA0:
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r10,4
	cr6.compare<int32_t>(ctx.r10.s32, 4, xer);
	// blt cr6,0x82be7a74
	if (cr6.lt) goto loc_82BE7A74;
	// b 0x82be7ab4
	goto loc_82BE7AB4;
loc_82BE7AB0:
	// mr r7,r21
	ctx.r7.u64 = r21.u64;
loc_82BE7AB4:
	// clrlwi. r11,r7,24
	r11.u64 = ctx.r7.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be7ac8
	if (cr0.eq) goto loc_82BE7AC8;
	// stb r21,0(r8)
	PPC_STORE_U8(ctx.r8.u32 + 0, r21.u8);
	// addi r4,r1,152
	ctx.r4.s64 = ctx.r1.s64 + 152;
	// b 0x82be7af4
	goto loc_82BE7AF4;
loc_82BE7AC8:
	// li r11,3
	r11.s64 = 3;
	// stb r21,148(r1)
	PPC_STORE_U8(ctx.r1.u32 + 148, r21.u8);
loc_82BE7AD0:
	// addi r10,r1,144
	ctx.r10.s64 = ctx.r1.s64 + 144;
	// add r10,r11,r10
	ctx.r10.u64 = r11.u64 + ctx.r10.u64;
	// lbz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,95
	cr6.compare<uint32_t>(ctx.r9.u32, 95, xer);
	// bne cr6,0x82be7af0
	if (!cr6.eq) goto loc_82BE7AF0;
	// addic. r11,r11,-1
	xer.ca = r11.u32 > 0;
	r11.s64 = r11.s64 + -1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stb r21,0(r10)
	PPC_STORE_U8(ctx.r10.u32 + 0, r21.u8);
	// bgt 0x82be7ad0
	if (cr0.gt) goto loc_82BE7AD0;
loc_82BE7AF0:
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
loc_82BE7AF4:
	// mr r3,r25
	ctx.r3.u64 = r25.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7AFC:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82ca2c1c
	return;
}

PPC_WEAK_FUNC(sub_82BE7790) {
	__imp__sub_82BE7790(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE7B08) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bcc
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	r30.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r22,r7
	r22.u64 = ctx.r7.u64;
	// mr r28,r10
	r28.u64 = ctx.r10.u64;
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// bne cr6,0x82be7b34
	if (!cr6.eq) goto loc_82BE7B34;
	// cmpwi cr6,r8,0
	cr6.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne cr6,0x82be7b44
	if (!cr6.eq) goto loc_82BE7B44;
loc_82BE7B34:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82be7b4c
	if (!cr6.eq) goto loc_82BE7B4C;
	// rlwinm. r11,r5,0,24,24
	r11.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be7b4c
	if (cr0.eq) goto loc_82BE7B4C;
loc_82BE7B44:
	// li r21,1
	r21.s64 = 1;
	// b 0x82be7b50
	goto loc_82BE7B50;
loc_82BE7B4C:
	// li r21,0
	r21.s64 = 0;
loc_82BE7B50:
	// srawi r11,r5,6
	xer.ca = (ctx.r5.s32 < 0) & ((ctx.r5.u32 & 0x3F) != 0);
	r11.s64 = ctx.r5.s32 >> 6;
	// subfic r10,r30,0
	xer.ca = r30.u32 <= 0;
	ctx.r10.s64 = 0 - r30.s64;
	// and r7,r11,r30
	ctx.r7.u64 = r11.u64 & r30.u64;
	// subfe r10,r10,r10
	temp.u8 = (~ctx.r10.u32 + ctx.r10.u32 < ~ctx.r10.u32) | (~ctx.r10.u32 + ctx.r10.u32 + xer.ca < xer.ca);
	ctx.r10.u64 = ~ctx.r10.u64 + ctx.r10.u64 + xer.ca;
	xer.ca = temp.u8;
	// cntlzw r8,r30
	ctx.r8.u64 = r30.u32 == 0 ? 32 : __builtin_clz(r30.u32);
	// rlwinm r11,r10,0,0,25
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFC0;
	// rlwinm r10,r8,27,31,31
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x1;
	// rlwinm r11,r11,0,25,23
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFF7F;
	// clrlwi r27,r7,31
	r27.u64 = ctx.r7.u32 & 0x1;
	// addi r11,r11,255
	r11.s64 = r11.s64 + 255;
	// and r23,r10,r6
	r23.u64 = ctx.r10.u64 & ctx.r6.u64;
	// and r24,r11,r5
	r24.u64 = r11.u64 & ctx.r5.u64;
	// cmpwi cr6,r9,0
	cr6.compare<int32_t>(ctx.r9.s32, 0, xer);
	// beq cr6,0x82be7b98
	if (cr6.eq) goto loc_82BE7B98;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,31244
	ctx.r4.s64 = r11.s64 + 31244;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7B98:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// bne cr6,0x82be7bac
	if (!cr6.eq) goto loc_82BE7BAC;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// li r10,0
	ctx.r10.s64 = 0;
	// beq cr6,0x82be7bb0
	if (cr6.eq) goto loc_82BE7BB0;
loc_82BE7BAC:
	// li r10,1
	ctx.r10.s64 = 1;
loc_82BE7BB0:
	// subfic r9,r30,0
	xer.ca = r30.u32 <= 0;
	ctx.r9.s64 = 0 - r30.s64;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// subfe r9,r9,r9
	temp.u8 = (~ctx.r9.u32 + ctx.r9.u32 < ~ctx.r9.u32) | (~ctx.r9.u32 + ctx.r9.u32 + xer.ca < xer.ca);
	ctx.r9.u64 = ~ctx.r9.u64 + ctx.r9.u64 + xer.ca;
	xer.ca = temp.u8;
	// addi r26,r11,12872
	r26.s64 = r11.s64 + 12872;
	// clrlwi r11,r9,28
	r11.u64 = ctx.r9.u32 & 0xF;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r5,r11,99
	ctx.r5.s64 = r11.s64 + 99;
	// clrlwi r30,r10,24
	r30.u64 = ctx.r10.u32 & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r25,r30
	r25.u64 = r30.u64;
	// cmplwi r30,0
	cr0.compare<uint32_t>(r30.u32, 0, xer);
	// addi r29,r11,-948
	r29.s64 = r11.s64 + -948;
	// beq 0x82be7c10
	if (cr0.eq) goto loc_82BE7C10;
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x82be7c00
	if (cr6.eq) goto loc_82BE7C00;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7C00:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,29656
	ctx.r4.s64 = r11.s64 + 29656;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7C10:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r24
	ctx.r5.u64 = r24.u64;
	// addi r4,r11,2864
	ctx.r4.s64 = r11.s64 + 2864;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// addi r30,r11,-940
	r30.s64 = r11.s64 + -940;
	// beq cr6,0x82be7c40
	if (cr6.eq) goto loc_82BE7C40;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7C40:
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x82be7c68
	if (cr6.eq) goto loc_82BE7C68;
	// cmpwi cr6,r22,0
	cr6.compare<int32_t>(r22.s32, 0, xer);
	// beq cr6,0x82be7c5c
	if (cr6.eq) goto loc_82BE7C5C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-936
	ctx.r4.s64 = r11.s64 + -936;
	// b 0x82be7c60
	goto loc_82BE7C60;
loc_82BE7C5C:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BE7C60:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7C68:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82be7c7c
	if (cr6.eq) goto loc_82BE7C7C;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r4,r11,29664
	ctx.r4.s64 = r11.s64 + 29664;
	// b 0x82be7c88
	goto loc_82BE7C88;
loc_82BE7C7C:
	// cmpwi cr6,r21,0
	cr6.compare<int32_t>(r21.s32, 0, xer);
	// beq cr6,0x82be7c90
	if (cr6.eq) goto loc_82BE7C90;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
loc_82BE7C88:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7C90:
	// lwz r29,340(r1)
	r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(340) );
	// cmpwi cr6,r29,4
	cr6.compare<int32_t>(r29.s32, 4, xer);
	// bge cr6,0x82be7d04
	if (!cr6.lt) goto loc_82BE7D04;
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6348
	ctx.r4.s64 = r11.s64 + -6348;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// srawi r11,r28,6
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3F) != 0);
	r11.s64 = r28.s32 >> 6;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r30,r10,-932
	r30.s64 = ctx.r10.s64 + -932;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r30
	r11.u64 = PPC_LOAD_U8(r11.u32 + r30.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// cmpwi cr6,r29,1
	cr6.compare<int32_t>(r29.s32, 1, xer);
	// ble cr6,0x82be7dcc
	if (!cr6.gt) goto loc_82BE7DCC;
	// lbz r11,351(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 351);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82be7cf8
	if (cr0.eq) goto loc_82BE7CF8;
	// srawi r11,r28,4
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0xF) != 0);
	r11.s64 = r28.s32 >> 4;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// b 0x82be7cfc
	goto loc_82BE7CFC;
loc_82BE7CF8:
	// clrlwi r11,r28,30
	r11.u64 = r28.u32 & 0x3;
loc_82BE7CFC:
	// lbzx r11,r11,r30
	r11.u64 = PPC_LOAD_U8(r11.u32 + r30.u32);
	// b 0x82be7dbc
	goto loc_82BE7DBC;
loc_82BE7D04:
	// cmpwi cr6,r28,0
	cr6.compare<int32_t>(r28.s32, 0, xer);
	// beq cr6,0x82be7dcc
	if (cr6.eq) goto loc_82BE7DCC;
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6348
	ctx.r4.s64 = r11.s64 + -6348;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// srawi r9,r28,2
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3) != 0);
	ctx.r9.s64 = r28.s32 >> 2;
	// addi r29,r11,-932
	r29.s64 = r11.s64 + -932;
	// srawi r10,r28,4
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0xF) != 0);
	ctx.r10.s64 = r28.s32 >> 4;
	// srawi r11,r28,6
	xer.ca = (r28.s32 < 0) & ((r28.u32 & 0x3F) != 0);
	r11.s64 = r28.s32 >> 6;
	// clrlwi r30,r28,30
	r30.u64 = r28.u32 & 0x3;
	// addi r11,r11,-1
	r11.s64 = r11.s64 + -1;
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// clrlwi r25,r11,30
	r25.u64 = r11.u32 & 0x3;
	// addi r10,r10,-2
	ctx.r10.s64 = ctx.r10.s64 + -2;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// clrlwi r28,r9,30
	r28.u64 = ctx.r9.u32 & 0x3;
	// clrlwi r27,r10,30
	r27.u64 = ctx.r10.u32 & 0x3;
	// lbzx r11,r30,r29
	r11.u64 = PPC_LOAD_U8(r30.u32 + r29.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// cmpw cr6,r28,r30
	cr6.compare<int32_t>(r28.s32, r30.s32, xer);
	// bne cr6,0x82be7d78
	if (!cr6.eq) goto loc_82BE7D78;
	// cmpw cr6,r27,r30
	cr6.compare<int32_t>(r27.s32, r30.s32, xer);
	// bne cr6,0x82be7d78
	if (!cr6.eq) goto loc_82BE7D78;
	// cmpw cr6,r25,r30
	cr6.compare<int32_t>(r25.s32, r30.s32, xer);
	// beq cr6,0x82be7dcc
	if (cr6.eq) goto loc_82BE7DCC;
loc_82BE7D78:
	// lbzx r11,r28,r29
	r11.u64 = PPC_LOAD_U8(r28.u32 + r29.u32);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// cmpw cr6,r27,r28
	cr6.compare<int32_t>(r27.s32, r28.s32, xer);
	// bne cr6,0x82be7d9c
	if (!cr6.eq) goto loc_82BE7D9C;
	// cmpw cr6,r25,r28
	cr6.compare<int32_t>(r25.s32, r28.s32, xer);
	// beq cr6,0x82be7dcc
	if (cr6.eq) goto loc_82BE7DCC;
loc_82BE7D9C:
	// lbzx r11,r27,r29
	r11.u64 = PPC_LOAD_U8(r27.u32 + r29.u32);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// cmpw cr6,r25,r27
	cr6.compare<int32_t>(r25.s32, r27.s32, xer);
	// beq cr6,0x82be7dcc
	if (cr6.eq) goto loc_82BE7DCC;
	// lbzx r11,r25,r29
	r11.u64 = PPC_LOAD_U8(r25.u32 + r29.u32);
loc_82BE7DBC:
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7DCC:
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x82ca2c1c
	return;
}

PPC_WEAK_FUNC(sub_82BE7B08) {
	__imp__sub_82BE7B08(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE7DD8) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be4
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// srawi r11,r4,7
	xer.ca = (ctx.r4.s32 < 0) & ((ctx.r4.u32 & 0x7F) != 0);
	r11.s64 = ctx.r4.s32 >> 7;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// clrlwi r28,r4,26
	r28.u64 = ctx.r4.u32 & 0x3F;
	// clrlwi r27,r11,31
	r27.u64 = r11.u32 & 0x1;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq cr6,0x82be7e0c
	if (cr6.eq) goto loc_82BE7E0C;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r4,r11,31244
	ctx.r4.s64 = r11.s64 + 31244;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7E0C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// addi r29,r11,-924
	r29.s64 = r11.s64 + -924;
	// beq cr6,0x82be7e28
	if (cr6.eq) goto loc_82BE7E28;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7E28:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r28
	ctx.r5.u64 = r28.u64;
	// addi r4,r11,-920
	ctx.r4.s64 = r11.s64 + -920;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,29664
	ctx.r4.s64 = r11.s64 + 29664;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// cmpwi cr6,r30,0
	cr6.compare<int32_t>(r30.s32, 0, xer);
	// beq cr6,0x82be7ef8
	if (cr6.eq) goto loc_82BE7EF8;
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6348
	ctx.r4.s64 = r11.s64 + -6348;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// clrlwi r10,r30,30
	ctx.r10.u64 = r30.u32 & 0x3;
	// addi r11,r11,-932
	r11.s64 = r11.s64 + -932;
	// lis r9,-32241
	ctx.r9.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r28,r9,12872
	r28.s64 = ctx.r9.s64 + 12872;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// lbzx r11,r10,r11
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// srawi r11,r30,2
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x3) != 0);
	r11.s64 = r30.s32 >> 2;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// addi r10,r10,-912
	ctx.r10.s64 = ctx.r10.s64 + -912;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// srawi r11,r30,4
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0xF) != 0);
	r11.s64 = r30.s32 >> 4;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// addi r10,r10,-904
	ctx.r10.s64 = ctx.r10.s64 + -904;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// srawi r11,r30,6
	xer.ca = (r30.s32 < 0) & ((r30.u32 & 0x3F) != 0);
	r11.s64 = r30.s32 >> 6;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// addi r10,r10,-896
	ctx.r10.s64 = ctx.r10.s64 + -896;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r10
	r11.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE7EF8:
	// cmpwi cr6,r27,0
	cr6.compare<int32_t>(r27.s32, 0, xer);
	// beq cr6,0x82be7f08
	if (cr6.eq) goto loc_82BE7F08;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// b 0x82be7f10
	goto loc_82BE7F10;
loc_82BE7F08:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,3224
	ctx.r4.s64 = r11.s64 + 3224;
loc_82BE7F10:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x82ca2c34
	return;
}

PPC_WEAK_FUNC(sub_82BE7DD8) {
	__imp__sub_82BE7DD8(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE7F20) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// li r3,0
	ctx.r3.s64 = 0;
	// rlwinm. r11,r6,0,16,16
	r11.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beqlr 
	if (cr0.eq) return;
	// li r9,0
	ctx.r9.s64 = 0;
	// rlwinm r8,r6,16,16,31
	ctx.r8.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 16) & 0xFFFF;
	// rlwinm r7,r6,12,20,31
	ctx.r7.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 12) & 0xFFF;
loc_82BE7F3C:
	// li r11,1
	r11.s64 = 1;
	// slw r11,r11,r9
	r11.u64 = ctx.r9.u8 & 0x20 ? 0 : (r11.u32 << (ctx.r9.u8 & 0x3F));
	// and r10,r11,r8
	ctx.r10.u64 = r11.u64 & ctx.r8.u64;
	// and r11,r7,r11
	r11.u64 = ctx.r7.u64 & r11.u64;
	// clrlwi r10,r10,28
	ctx.r10.u64 = ctx.r10.u32 & 0xF;
	// clrlwi r11,r11,28
	r11.u64 = r11.u32 & 0xF;
	// cntlzw r10,r10
	ctx.r10.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm r10,r10,28,30,30
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 28) & 0x2;
	// rlwinm r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// xori r10,r10,2
	ctx.r10.u64 = ctx.r10.u64 ^ 2;
	// xori r11,r11,1
	r11.u64 = r11.u64 ^ 1;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// cmplwi cr6,r11,1
	cr6.compare<uint32_t>(r11.u32, 1, xer);
	// blt cr6,0x82be7fa0
	if (cr6.lt) goto loc_82BE7FA0;
	// beq cr6,0x82be7f98
	if (cr6.eq) goto loc_82BE7F98;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// blt cr6,0x82be7f90
	if (cr6.lt) goto loc_82BE7F90;
	// bne cr6,0x82be7fac
	if (!cr6.eq) goto loc_82BE7FAC;
	// ori r3,r3,8
	ctx.r3.u64 = ctx.r3.u64 | 8;
	// b 0x82be7fac
	goto loc_82BE7FAC;
loc_82BE7F90:
	// ori r3,r3,1
	ctx.r3.u64 = ctx.r3.u64 | 1;
	// b 0x82be7fac
	goto loc_82BE7FAC;
loc_82BE7F98:
	// ori r3,r3,2
	ctx.r3.u64 = ctx.r3.u64 | 2;
	// b 0x82be7fac
	goto loc_82BE7FAC;
loc_82BE7FA0:
	// rlwinm. r11,r6,0,17,17
	r11.u64 = rotl64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0x4000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be7fac
	if (cr0.eq) goto loc_82BE7FAC;
	// ori r3,r3,4
	ctx.r3.u64 = ctx.r3.u64 | 4;
loc_82BE7FAC:
	// addi r9,r9,1
	ctx.r9.s64 = ctx.r9.s64 + 1;
	// cmpwi cr6,r9,4
	cr6.compare<int32_t>(ctx.r9.s32, 4, xer);
	// blt cr6,0x82be7f3c
	if (cr6.lt) goto loc_82BE7F3C;
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE7F20) {
	__imp__sub_82BE7F20(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE7FC0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lbz r11,8(r3)
	r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 8);
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// bne cr6,0x82be801c
	if (!cr6.eq) goto loc_82BE801C;
	// lwz r11,0(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(0) );
	// rlwinm. r10,r11,0,16,16
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be8010
	if (cr0.eq) goto loc_82BE8010;
	// bl 0x82be7f20
	sub_82BE7F20(ctx, base);
	// clrlwi. r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be801c
	if (!cr0.eq) goto loc_82BE801C;
	// rlwinm. r11,r3,0,30,30
	r11.u64 = rotl64(ctx.r3.u32 | (ctx.r3.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8004
	if (cr0.eq) goto loc_82BE8004;
	// li r3,1
	ctx.r3.s64 = 1;
	// b 0x82be8020
	goto loc_82BE8020;
loc_82BE8004:
	// cntlzw r11,r3
	r11.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// rlwinm r3,r11,27,31,31
	ctx.r3.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	// b 0x82be8020
	goto loc_82BE8020;
loc_82BE8010:
	// rlwinm. r11,r11,0,12,15
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xF0000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r3,1
	ctx.r3.s64 = 1;
	// beq 0x82be8020
	if (cr0.eq) goto loc_82BE8020;
loc_82BE801C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_82BE8020:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE7FC0) {
	__imp__sub_82BE7FC0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE8030) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd8
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// mr r30,r3
	r30.u64 = ctx.r3.u64;
	// li r26,0
	r26.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r24,r26
	r24.u64 = r26.u64;
	// mr r25,r26
	r25.u64 = r26.u64;
	// bl 0x82be7fc0
	sub_82BE7FC0(ctx, base);
	// clrlwi. r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8078
	if (cr0.eq) goto loc_82BE8078;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-888
	ctx.r4.s64 = r11.s64 + -888;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bea7f0
	sub_82BEA7F0(ctx, base);
	// b 0x82be8408
	goto loc_82BE8408;
loc_82BE8078:
	// lbz r11,8(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32768
	ctx.r9.s64 = -2147483648;
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// addi r10,r10,-1152
	ctx.r10.s64 = ctx.r10.s64 + -1152;
	// cmplwi cr6,r11,2
	cr6.compare<uint32_t>(r11.u32, 2, xer);
	// lbzx r27,r11,r10
	r27.u64 = PPC_LOAD_U8(r11.u32 + ctx.r10.u32);
	// bne cr6,0x82be810c
	if (!cr6.eq) goto loc_82BE810C;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r10,r11,31,1,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x7FFFFFFF;
	// xor r11,r10,r11
	r11.u64 = ctx.r10.u64 ^ r11.u64;
	// rlwinm. r11,r11,0,6,6
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x2000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be810c
	if (!cr0.eq) goto loc_82BE810C;
	// lbz r11,10(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// lbz r10,9(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82be810c
	if (!cr6.eq) goto loc_82BE810C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r10,r11,31,1,1
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x40000000;
	// rlwinm r11,r11,0,1,1
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82be810c
	if (!cr6.eq) goto loc_82BE810C;
	// lbz r11,6(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// lbz r10,5(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82be810c
	if (!cr6.eq) goto loc_82BE810C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r11,r11,0,0,0
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be8104
	if (cr6.eq) goto loc_82BE8104;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r10,r11,31,1,1
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x40000000;
	// rlwinm r11,r11,0,1,1
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	// cmplw cr6,r10,r11
	cr6.compare<uint32_t>(ctx.r10.u32, r11.u32, xer);
	// bne cr6,0x82be810c
	if (!cr6.eq) goto loc_82BE810C;
loc_82BE8104:
	// li r11,1
	r11.s64 = 1;
	// b 0x82be8110
	goto loc_82BE8110;
loc_82BE810C:
	// mr r11,r26
	r11.u64 = r26.u64;
loc_82BE8110:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8130
	if (cr0.eq) goto loc_82BE8130;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r4,r10,-884
	ctx.r4.s64 = ctx.r10.s64 + -884;
loc_82BE8120:
	// lbz r11,0(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// li r27,1
	r27.s64 = 1;
	// clrlwi r5,r11,31
	ctx.r5.u64 = r11.u32 & 0x1;
	// b 0x82be81e0
	goto loc_82BE81E0;
loc_82BE8130:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r10,r11,8,27,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 8) & 0x1F;
	// cmplwi cr6,r10,29
	cr6.compare<uint32_t>(ctx.r10.u32, 29, xer);
	// bne cr6,0x82be81b0
	if (!cr6.eq) goto loc_82BE81B0;
	// lwz r8,4(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r7,r8,31,1,31
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x7FFFFFFF;
	// xor r8,r7,r8
	ctx.r8.u64 = ctx.r7.u64 ^ ctx.r8.u64;
	// rlwinm. r8,r8,0,6,6
	ctx.r8.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x2000000;
	cr0.compare<int32_t>(ctx.r8.s32, 0, xer);
	// bne 0x82be81b0
	if (!cr0.eq) goto loc_82BE81B0;
	// lbz r8,10(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// lbz r7,9(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// cmplw cr6,r7,r8
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r8.u32, xer);
	// bne cr6,0x82be81b0
	if (!cr6.eq) goto loc_82BE81B0;
	// rotlwi r8,r11,0
	ctx.r8.u64 = rotl32(r11.u32, 0);
	// rlwinm r7,r8,31,1,1
	ctx.r7.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 31) & 0x40000000;
	// rlwinm r8,r8,0,1,1
	ctx.r8.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0x40000000;
	// cmplw cr6,r7,r8
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r8.u32, xer);
	// bne cr6,0x82be81b0
	if (!cr6.eq) goto loc_82BE81B0;
	// lbz r8,6(r31)
	ctx.r8.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// lbz r7,5(r31)
	ctx.r7.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// cmplw cr6,r7,r8
	cr6.compare<uint32_t>(ctx.r7.u32, ctx.r8.u32, xer);
	// bne cr6,0x82be81b0
	if (!cr6.eq) goto loc_82BE81B0;
	// rlwinm r11,r11,0,0,0
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplw cr6,r11,r9
	cr6.compare<uint32_t>(r11.u32, ctx.r9.u32, xer);
	// beq cr6,0x82be81a8
	if (cr6.eq) goto loc_82BE81A8;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r9,r11,31,1,1
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x40000000;
	// rlwinm r11,r11,0,1,1
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	// cmplw cr6,r9,r11
	cr6.compare<uint32_t>(ctx.r9.u32, r11.u32, xer);
	// bne cr6,0x82be81b0
	if (!cr6.eq) goto loc_82BE81B0;
loc_82BE81A8:
	// li r11,1
	r11.s64 = 1;
	// b 0x82be81b4
	goto loc_82BE81B4;
loc_82BE81B0:
	// mr r11,r26
	r11.u64 = r26.u64;
loc_82BE81B4:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be81c8
	if (cr0.eq) goto loc_82BE81C8;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r4,r10,-880
	ctx.r4.s64 = ctx.r10.s64 + -880;
	// b 0x82be8120
	goto loc_82BE8120;
loc_82BE81C8:
	// lis r11,-31951
	r11.s64 = -2093940736;
	// lbz r9,0(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 0);
	// rlwinm r10,r10,2,0,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r11,r11,17944
	r11.s64 = r11.s64 + 17944;
	// clrlwi r5,r9,31
	ctx.r5.u64 = ctx.r9.u32 & 0x1;
	// lwzx r4,r10,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
loc_82BE81E0:
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bea7f0
	sub_82BEA7F0(ctx, base);
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// rlwinm r9,r11,12,28,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 12) & 0xF;
	// rlwinm r8,r11,18,31,31
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 18) & 0x1;
	// rlwinm r7,r11,26,31,31
	ctx.r7.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	// rlwinm r6,r11,17,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 17) & 0x1;
	// rlwinm r5,r11,16,28,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 16) & 0xF;
	// clrlwi r4,r11,26
	ctx.r4.u64 = r11.u32 & 0x3F;
	// bl 0x82be7790
	sub_82BE7790(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// addi r29,r11,7908
	r29.s64 = r11.s64 + 7908;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be8244
	if (!cr0.eq) goto loc_82BE8244;
	// rlwinm. r10,r11,0,1,1
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be8244
	if (!cr0.eq) goto loc_82BE8244;
	// rlwinm. r11,r11,0,2,2
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8244
	if (cr0.eq) goto loc_82BE8244;
	// li r24,1
	r24.s64 = 1;
loc_82BE8244:
	// li r28,4
	r28.s64 = 4;
	// cmplwi cr6,r27,1
	cr6.compare<uint32_t>(r27.u32, 1, xer);
	// blt cr6,0x82be82c0
	if (cr6.lt) goto loc_82BE82C0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,1,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// not r10,r11
	ctx.r10.u64 = ~r11.u64;
	// clrlwi r25,r10,31
	r25.u64 = ctx.r10.u32 & 0x1;
	// bne 0x82be8288
	if (!cr0.eq) goto loc_82BE8288;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82be8288
	if (cr6.eq) goto loc_82BE8288;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lbz r6,5(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rlwinm r5,r11,6,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0x1;
	// lbz r4,9(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// bl 0x82be7dd8
	sub_82BE7DD8(ctx, base);
	// b 0x82be82c0
	goto loc_82BE82C0;
loc_82BE8288:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r9,r11,6,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0x1;
	// rlwinm r8,r10,25,31,31
	ctx.r8.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 25) & 0x1;
	// lbz r10,5(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 5);
	// rlwinm r7,r11,3,31,31
	ctx.r7.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// lbz r5,9(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 9);
	// rlwinm r6,r11,1,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// stb r26,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r26.u8);
	// rlwinm r4,r4,1,31,31
	ctx.r4.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 1) & 0x1;
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// bl 0x82be7b08
	sub_82BE7B08(ctx, base);
loc_82BE82C0:
	// cmplwi cr6,r27,2
	cr6.compare<uint32_t>(r27.u32, 2, xer);
	// blt cr6,0x82be8364
	if (cr6.lt) goto loc_82BE8364;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,1,1
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be82e0
	if (!cr0.eq) goto loc_82BE82E0;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x82be82e0
	if (!cr6.eq) goto loc_82BE82E0;
	// li r25,2
	r25.s64 = 2;
loc_82BE82E0:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,1,1
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be831c
	if (!cr0.eq) goto loc_82BE831C;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82be831c
	if (cr6.eq) goto loc_82BE831C;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lbz r6,6(r31)
	ctx.r6.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// rlwinm r5,r11,7,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 7) & 0x1;
	// lbz r4,10(r31)
	ctx.r4.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// bl 0x82be7dd8
	sub_82BE7DD8(ctx, base);
	// b 0x82be8364
	goto loc_82BE8364;
loc_82BE831C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmpwi cr6,r25,2
	cr6.compare<int32_t>(r25.s32, 2, xer);
	// rlwinm r6,r11,1,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// beq cr6,0x82be8330
	if (cr6.eq) goto loc_82BE8330;
	// rlwinm r6,r11,2,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
loc_82BE8330:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r9,r11,7,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 7) & 0x1;
	// rlwinm r8,r10,25,31,31
	ctx.r8.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 25) & 0x1;
	// lbz r10,6(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 6);
	// rlwinm r7,r11,3,31,31
	ctx.r7.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// lbz r5,10(r31)
	ctx.r5.u64 = PPC_LOAD_U8(r31.u32 + 10);
	// rlwinm r4,r4,2,31,31
	ctx.r4.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0x1;
	// stb r26,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r26.u8);
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// bl 0x82be7b08
	sub_82BE7B08(ctx, base);
loc_82BE8364:
	// cmplwi cr6,r27,3
	cr6.compare<uint32_t>(r27.u32, 3, xer);
	// blt cr6,0x82be8408
	if (cr6.lt) goto loc_82BE8408;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,2,2
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be8384
	if (!cr0.eq) goto loc_82BE8384;
	// cmpwi cr6,r25,0
	cr6.compare<int32_t>(r25.s32, 0, xer);
	// bne cr6,0x82be8384
	if (!cr6.eq) goto loc_82BE8384;
	// li r25,3
	r25.s64 = 3;
loc_82BE8384:
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r11,0,2,2
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be83c0
	if (!cr0.eq) goto loc_82BE83C0;
	// cmpwi cr6,r24,0
	cr6.compare<int32_t>(r24.s32, 0, xer);
	// beq cr6,0x82be83c0
	if (cr6.eq) goto loc_82BE83C0;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// clrlwi r6,r10,24
	ctx.r6.u64 = ctx.r10.u32 & 0xFF;
	// rlwinm r5,r10,8,31,31
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0x1;
	// bl 0x82be7dd8
	sub_82BE7DD8(ctx, base);
	// b 0x82be8408
	goto loc_82BE8408;
loc_82BE83C0:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// cmpwi cr6,r25,3
	cr6.compare<int32_t>(r25.s32, 3, xer);
	// rlwinm r6,r11,1,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// beq cr6,0x82be83d4
	if (cr6.eq) goto loc_82BE83D4;
	// rlwinm r6,r11,2,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
loc_82BE83D4:
	// stw r28,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r28.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// clrlwi r5,r4,24
	ctx.r5.u64 = ctx.r4.u32 & 0xFF;
	// clrlwi r10,r11,24
	ctx.r10.u64 = r11.u32 & 0xFF;
	// stb r26,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r26.u8);
	// rlwinm r9,r11,8,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 8) & 0x1;
	// rlwinm r7,r11,3,31,31
	ctx.r7.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0x1;
	// rlwinm r8,r8,25,31,31
	ctx.r8.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 25) & 0x1;
	// rlwinm r4,r4,3,31,31
	ctx.r4.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0x1;
	// bl 0x82be7b08
	sub_82BE7B08(ctx, base);
loc_82BE8408:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c28
	return;
}

PPC_WEAK_FUNC(sub_82BE8030) {
	__imp__sub_82BE8030(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE8410) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	r31.u64 = ctx.r4.u64;
	// li r25,0
	r25.s64 = 0;
	// mr r27,r3
	r27.u64 = ctx.r3.u64;
	// mr r23,r25
	r23.u64 = r25.u64;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm. r10,r11,0,0,0
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be844c
	if (!cr0.eq) goto loc_82BE844C;
	// rlwinm. r10,r11,0,1,1
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be844c
	if (!cr0.eq) goto loc_82BE844C;
	// rlwinm. r11,r11,0,2,2
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be844c
	if (cr0.eq) goto loc_82BE844C;
	// li r23,1
	r23.s64 = 1;
loc_82BE844C:
	// lbz r11,8(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 8);
	// mr r24,r25
	r24.u64 = r25.u64;
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// blt cr6,0x82be846c
	if (cr6.lt) goto loc_82BE846C;
	// cmplwi cr6,r11,14
	cr6.compare<uint32_t>(r11.u32, 14, xer);
	// bgt cr6,0x82be846c
	if (cr6.gt) goto loc_82BE846C;
	// li r24,1
	r24.s64 = 1;
loc_82BE846C:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// clrlwi. r9,r24,24
	ctx.r9.u64 = r24.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r10,r11,26,6,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x3FFFFFF;
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// clrlwi r10,r10,30
	ctx.r10.u64 = ctx.r10.u32 & 0x3;
	// beq 0x82be848c
	if (cr0.eq) goto loc_82BE848C;
	// rlwinm r11,r11,28,4,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 28) & 0xFFFFFFF;
	// addi r11,r11,-2
	r11.s64 = r11.s64 + -2;
loc_82BE848C:
	// clrlwi r11,r11,30
	r11.u64 = r11.u32 & 0x3;
	// li r26,1
	r26.s64 = 1;
	// subf r11,r11,r10
	r11.s64 = ctx.r10.s64 - r11.s64;
	// cntlzw r11,r11
	r11.u64 = r11.u32 == 0 ? 32 : __builtin_clz(r11.u32);
	// rlwinm. r11,r11,27,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r10,r11
	ctx.r10.u64 = r11.u64;
	// beq 0x82be84c8
	if (cr0.eq) goto loc_82BE84C8;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lis r9,5120
	ctx.r9.s64 = 335544320;
	// rlwinm r8,r11,0,0,5
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFC000000;
	// cmplw cr6,r8,r9
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be84c8
	if (!cr6.eq) goto loc_82BE84C8;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r4,r10,-872
	ctx.r4.s64 = ctx.r10.s64 + -872;
	// b 0x82be8514
	goto loc_82BE8514;
loc_82BE84C8:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be8524
	if (cr6.eq) goto loc_82BE8524;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lis r9,23552
	ctx.r9.s64 = 1543503872;
	// rlwinm r8,r11,0,0,5
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFC000000;
	// cmplw cr6,r8,r9
	cr6.compare<uint32_t>(ctx.r8.u32, ctx.r9.u32, xer);
	// bne cr6,0x82be84f0
	if (!cr6.eq) goto loc_82BE84F0;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r4,r10,-864
	ctx.r4.s64 = ctx.r10.s64 + -864;
	// b 0x82be8514
	goto loc_82BE8514;
loc_82BE84F0:
	// cmplwi cr6,r10,0
	cr6.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq cr6,0x82be8524
	if (cr6.eq) goto loc_82BE8524;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lis r10,24576
	ctx.r10.s64 = 1610612736;
	// rlwinm r9,r11,0,0,5
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFC000000;
	// cmplw cr6,r9,r10
	cr6.compare<uint32_t>(ctx.r9.u32, ctx.r10.u32, xer);
	// bne cr6,0x82be8524
	if (!cr6.eq) goto loc_82BE8524;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r4,r10,-856
	ctx.r4.s64 = ctx.r10.s64 + -856;
loc_82BE8514:
	// rlwinm r5,r11,7,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 7) & 0x1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82bea7f0
	sub_82BEA7F0(ctx, base);
	// b 0x82be8548
	goto loc_82BE8548;
loc_82BE8524:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// lis r10,-31951
	ctx.r10.s64 = -2093940736;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// addi r10,r10,18072
	ctx.r10.s64 = ctx.r10.s64 + 18072;
	// rlwinm r9,r11,8,24,29
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 8) & 0xFC;
	// rlwinm r5,r11,7,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 7) & 0x1;
	// lwzx r4,r9,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x82bea7f0
	sub_82BEA7F0(ctx, base);
	// mr r26,r25
	r26.u64 = r25.u64;
loc_82BE8548:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// rlwinm. r6,r11,17,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 17) & 0x1;
	cr0.compare<int32_t>(ctx.r6.s32, 0, xer);
	// rlwinm r7,r11,26,31,31
	ctx.r7.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	// bne 0x82be855c
	if (!cr0.eq) goto loc_82BE855C;
	// rlwinm r7,r11,18,31,31
	ctx.r7.u64 = rotl64(r11.u32 | (r11.u64 << 32), 18) & 0x1;
loc_82BE855C:
	// cmplwi cr6,r6,0
	cr6.compare<uint32_t>(ctx.r6.u32, 0, xer);
	// clrlwi r4,r11,26
	ctx.r4.u64 = r11.u32 & 0x3F;
	// bne cr6,0x82be856c
	if (!cr6.eq) goto loc_82BE856C;
	// rlwinm r4,r11,24,26,31
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 24) & 0x3F;
loc_82BE856C:
	// li r10,0
	ctx.r10.s64 = 0;
	// rlwinm r9,r11,16,28,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 16) & 0xF;
	// rlwinm r8,r11,18,31,31
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 18) & 0x1;
	// rlwinm r5,r11,12,28,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 12) & 0xF;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be7790
	sub_82BE7790(ctx, base);
	// lis r10,-32241
	ctx.r10.s64 = -2112946176;
	// lis r11,-32247
	r11.s64 = -2113339392;
	// addi r29,r10,7908
	r29.s64 = ctx.r10.s64 + 7908;
	// addi r28,r11,-1056
	r28.s64 = r11.s64 + -1056;
	// addi r11,r28,-64
	r11.s64 = r28.s64 + -64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// rlwinm r10,r10,6,26,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0x3F;
	// lbzx r30,r10,r11
	r30.u64 = PPC_LOAD_U8(ctx.r10.u32 + r11.u32);
	// cmpwi r30,0
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// ble 0x82be85b8
	if (!cr0.gt) goto loc_82BE85B8;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE85B8:
	// cmpwi cr6,r30,1
	cr6.compare<int32_t>(r30.s32, 1, xer);
	// bne cr6,0x82be86a0
	if (!cr6.eq) goto loc_82BE86A0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,0,0
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be85d4
	if (!cr0.eq) goto loc_82BE85D4;
	// li r10,1
	ctx.r10.s64 = 1;
	// b 0x82be85fc
	goto loc_82BE85FC;
loc_82BE85D4:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r11,0,1,1
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be85e8
	if (!cr0.eq) goto loc_82BE85E8;
	// li r10,2
	ctx.r10.s64 = 2;
	// b 0x82be85fc
	goto loc_82BE85FC;
loc_82BE85E8:
	// rlwinm r11,r11,0,2,2
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	// subfic r11,r11,0
	xer.ca = r11.u32 <= 0;
	r11.s64 = 0 - r11.s64;
	// subfe r11,r11,r11
	temp.u8 = (~r11.u32 + r11.u32 < ~r11.u32) | (~r11.u32 + r11.u32 + xer.ca < xer.ca);
	r11.u64 = ~r11.u64 + r11.u64 + xer.ca;
	xer.ca = temp.u8;
	// rlwinm r11,r11,0,31,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFFD;
	// addi r10,r11,3
	ctx.r10.s64 = r11.s64 + 3;
loc_82BE85FC:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r9,r11,0,2,2
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20000000;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// bne 0x82be862c
	if (!cr0.eq) goto loc_82BE862C;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// beq cr6,0x82be862c
	if (cr6.eq) goto loc_82BE862C;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// clrlwi r4,r11,24
	ctx.r4.u64 = r11.u32 & 0xFF;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// clrlwi r6,r10,24
	ctx.r6.u64 = ctx.r10.u32 & 0xFF;
	// rlwinm r5,r10,8,31,31
	ctx.r5.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0x1;
	// bl 0x82be7dd8
	sub_82BE7DD8(ctx, base);
	// b 0x82be8798
	goto loc_82BE8798;
loc_82BE862C:
	// clrlwi. r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be863c
	if (cr0.eq) goto loc_82BE863C;
	// li r11,1
	r11.s64 = 1;
	// b 0x82be8648
	goto loc_82BE8648;
loc_82BE863C:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// rlwinm r11,r11,6,26,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0x3F;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
loc_82BE8648:
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x82be865c
	if (!cr6.eq) goto loc_82BE865C;
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r6,r10,1,31,31
	ctx.r6.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x1;
	// b 0x82be8668
	goto loc_82BE8668;
loc_82BE865C:
	// cmpwi cr6,r10,2
	cr6.compare<int32_t>(ctx.r10.s32, 2, xer);
	// lwz r10,4(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r6,r10,2,31,31
	ctx.r6.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0x1;
loc_82BE8668:
	// lwz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// lwz r4,8(r31)
	ctx.r4.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// clrlwi r10,r7,24
	ctx.r10.u64 = ctx.r7.u32 & 0xFF;
	// rlwinm r9,r7,8,31,31
	ctx.r9.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 8) & 0x1;
	// stb r24,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r24.u8);
	// clrlwi r5,r4,24
	ctx.r5.u64 = ctx.r4.u32 & 0xFF;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// rlwinm r8,r8,25,31,31
	ctx.r8.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 25) & 0x1;
	// rlwinm r7,r7,3,31,31
	ctx.r7.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0x1;
	// rlwinm r4,r4,3,31,31
	ctx.r4.u64 = rotl64(ctx.r4.u32 | (ctx.r4.u64 << 32), 3) & 0x1;
	// bl 0x82be7b08
	sub_82BE7B08(ctx, base);
	// b 0x82be8798
	goto loc_82BE8798;
loc_82BE86A0:
	// cmpwi cr6,r30,2
	cr6.compare<int32_t>(r30.s32, 2, xer);
	// bne cr6,0x82be8798
	if (!cr6.eq) goto loc_82BE8798;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r11,1,31,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r11,r11,2,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
	// subf r11,r10,r11
	r11.s64 = r11.s64 - ctx.r10.s64;
	// addi r11,r11,4
	r11.s64 = r11.s64 + 4;
	// beq 0x82be86e4
	if (cr0.eq) goto loc_82BE86E4;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r10,r10,2,30,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0x3;
	// not r10,r10
	ctx.r10.u64 = ~ctx.r10.u64;
	// rlwinm r10,r10,1,30,30
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0x2;
	// cmpwi cr6,r10,3
	cr6.compare<int32_t>(ctx.r10.s32, 3, xer);
	// bne cr6,0x82be86e4
	if (!cr6.eq) goto loc_82BE86E4;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r6,r11,1,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0x1;
	// b 0x82be86f0
	goto loc_82BE86F0;
loc_82BE86E4:
	// cmpwi cr6,r11,2
	cr6.compare<int32_t>(r11.s32, 2, xer);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r6,r11,2,31,31
	ctx.r6.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
loc_82BE86F0:
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r7,4(r31)
	ctx.r7.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r5,r11,6,26,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0x3F;
	// lwz r3,8(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r8,r11,25,31,31
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 25) & 0x1;
	// stb r25,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r25.u8);
	// clrlwi r10,r7,24
	ctx.r10.u64 = ctx.r7.u32 & 0xFF;
	// rlwinm r9,r7,8,31,31
	ctx.r9.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 8) & 0x1;
	// rlwinm r7,r7,3,31,31
	ctx.r7.u64 = rotl64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0x1;
	// lbzx r11,r5,r28
	r11.u64 = PPC_LOAD_U8(ctx.r5.u32 + r28.u32);
	// clrlwi r5,r3,24
	ctx.r5.u64 = ctx.r3.u32 & 0xFF;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// bl 0x82be7b08
	sub_82BE7B08(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// lwz r8,8(r31)
	ctx.r8.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// mr r9,r11
	ctx.r9.u64 = r11.u64;
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// rlwinm r10,r11,6,24,25
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0xC0;
	// lwz r11,0(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// mr r7,r11
	ctx.r7.u64 = r11.u64;
	// rlwinm. r11,r11,0,24,24
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// rlwimi r7,r8,30,4,4
	ctx.r7.u64 = (rotl32(ctx.r8.u32, 30) & 0x8000000) | (ctx.r7.u64 & 0xFFFFFFFFF7FFFFFF);
	// rlwimi r9,r7,6,30,31
	ctx.r9.u64 = (rotl32(ctx.r7.u32, 6) & 0x3) | (ctx.r9.u64 & 0xFFFFFFFFFFFFFFFC);
	// clrlwi r5,r9,26
	ctx.r5.u64 = ctx.r9.u32 & 0x3F;
	// beq 0x82be876c
	if (cr0.eq) goto loc_82BE876C;
	// ori r5,r5,128
	ctx.r5.u64 = ctx.r5.u64 | 128;
loc_82BE876C:
	// lbz r9,4(r31)
	ctx.r9.u64 = PPC_LOAD_U8(r31.u32 + 4);
	// li r11,1
	r11.s64 = 1;
	// li r8,0
	ctx.r8.s64 = 0;
	// stb r25,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r25.u8);
	// clrlwi r9,r9,31
	ctx.r9.u64 = ctx.r9.u32 & 0x1;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r27
	ctx.r3.u64 = r27.u64;
	// bl 0x82be7b08
	sub_82BE7B08(ctx, base);
loc_82BE8798:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x82ca2c24
	return;
}

PPC_WEAK_FUNC(sub_82BE8410) {
	__imp__sub_82BE8410(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE87A0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// addi r4,r11,7908
	ctx.r4.s64 = r11.s64 + 7908;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be87e4
	if (cr0.eq) goto loc_82BE87E4;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,312
	ctx.r4.s64 = r11.s64 + 312;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE87E4:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-832
	ctx.r4.s64 = r11.s64 + -832;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE87A0) {
	__imp__sub_82BE87A0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE8808) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// lwz r11,8(r3)
	r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + int32_t(8) );
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r10,r10,5664
	ctx.r10.s64 = ctx.r10.s64 + 5664;
	// addi r9,r9,3900
	ctx.r9.s64 = ctx.r9.s64 + 3900;
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stw r10,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r10.u32);
	// stw r9,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r9.u32);
	// bne 0x82be8840
	if (!cr0.eq) goto loc_82BE8840;
	// cmplw cr6,r5,r6
	cr6.compare<uint32_t>(ctx.r5.u32, ctx.r6.u32, xer);
	// beq cr6,0x82be885c
	if (cr6.eq) goto loc_82BE885C;
loc_82BE8840:
	// rlwinm r11,r5,2,0,29
	r11.u64 = rotl64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r4,r9,-820
	ctx.r4.s64 = ctx.r9.s64 + -820;
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE885C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BE8808) {
	__imp__sub_82BE8808(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE8870) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister f0{};
	PPCRegister f31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bd4
	// stfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -88, f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// lis r10,-32768
	ctx.r10.s64 = -2147483648;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r23,r5
	r23.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm r11,r11,0,0,0
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	// cmplw cr6,r11,r10
	cr6.compare<uint32_t>(r11.u32, ctx.r10.u32, xer);
	// bne cr6,0x82be88cc
	if (!cr6.eq) goto loc_82BE88CC;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,0,0
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x80000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be88bc
	if (cr0.eq) goto loc_82BE88BC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be88c4
	goto loc_82BE88C4;
loc_82BE88BC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
loc_82BE88C4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE88CC:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// clrlwi r5,r11,27
	ctx.r5.u64 = r11.u32 & 0x1F;
	// bne cr6,0x82be9110
	if (!cr6.eq) goto loc_82BE9110;
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq cr6,0x82be912c
	if (cr6.eq) goto loc_82BE912C;
	// cmpwi cr6,r5,1
	cr6.compare<int32_t>(ctx.r5.s32, 1, xer);
	// beq cr6,0x82be8918
	if (cr6.eq) goto loc_82BE8918;
	// cmpwi cr6,r5,15
	cr6.compare<int32_t>(ctx.r5.s32, 15, xer);
	// ble cr6,0x82be890c
	if (!cr6.gt) goto loc_82BE890C;
	// cmpwi cr6,r5,19
	cr6.compare<int32_t>(ctx.r5.s32, 19, xer);
	// ble cr6,0x82be8918
	if (!cr6.gt) goto loc_82BE8918;
	// cmpwi cr6,r5,23
	cr6.compare<int32_t>(ctx.r5.s32, 23, xer);
	// ble cr6,0x82be890c
	if (!cr6.gt) goto loc_82BE890C;
	// cmpwi cr6,r5,26
	cr6.compare<int32_t>(ctx.r5.s32, 26, xer);
	// ble cr6,0x82be8918
	if (!cr6.gt) goto loc_82BE8918;
loc_82BE890C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-240
	ctx.r4.s64 = r11.s64 + -240;
	// b 0x82be9120
	goto loc_82BE9120;
loc_82BE8918:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// cmplwi cr6,r5,19
	cr6.compare<uint32_t>(ctx.r5.u32, 19, xer);
	// addi r4,r11,-568
	ctx.r4.s64 = r11.s64 + -568;
	// bgt cr6,0x82be8994
	if (cr6.gt) goto loc_82BE8994;
	// beq cr6,0x82be8988
	if (cr6.eq) goto loc_82BE8988;
	// cmplwi cr6,r5,1
	cr6.compare<uint32_t>(ctx.r5.u32, 1, xer);
	// beq cr6,0x82be8970
	if (cr6.eq) goto loc_82BE8970;
	// cmplwi cr6,r5,16
	cr6.compare<uint32_t>(ctx.r5.u32, 16, xer);
	// beq cr6,0x82be8964
	if (cr6.eq) goto loc_82BE8964;
	// cmplwi cr6,r5,17
	cr6.compare<uint32_t>(ctx.r5.u32, 17, xer);
	// beq cr6,0x82be8958
	if (cr6.eq) goto loc_82BE8958;
	// cmplwi cr6,r5,18
	cr6.compare<uint32_t>(ctx.r5.u32, 18, xer);
	// bne cr6,0x82be89cc
	if (!cr6.eq) goto loc_82BE89CC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-552
	ctx.r4.s64 = r11.s64 + -552;
	// b 0x82be89cc
	goto loc_82BE89CC;
loc_82BE8958:
	// lis r10,-31950
	ctx.r10.s64 = -2093875200;
	// addi r10,r10,6732
	ctx.r10.s64 = ctx.r10.s64 + 6732;
	// b 0x82be8978
	goto loc_82BE8978;
loc_82BE8964:
	// lis r10,-31950
	ctx.r10.s64 = -2093875200;
	// addi r10,r10,6716
	ctx.r10.s64 = ctx.r10.s64 + 6716;
	// b 0x82be8978
	goto loc_82BE8978;
loc_82BE8970:
	// lis r10,-31950
	ctx.r10.s64 = -2093875200;
	// addi r10,r10,6700
	ctx.r10.s64 = ctx.r10.s64 + 6700;
loc_82BE8978:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r11,r11,20,28,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 20) & 0xC;
	// lwzx r4,r11,r10
	ctx.r4.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// b 0x82be89cc
	goto loc_82BE89CC;
loc_82BE8988:
	// lis r10,-31950
	ctx.r10.s64 = -2093875200;
	// addi r10,r10,6748
	ctx.r10.s64 = ctx.r10.s64 + 6748;
	// b 0x82be8978
	goto loc_82BE8978;
loc_82BE8994:
	// cmplwi cr6,r5,24
	cr6.compare<uint32_t>(ctx.r5.u32, 24, xer);
	// beq cr6,0x82be89c4
	if (cr6.eq) goto loc_82BE89C4;
	// cmplwi cr6,r5,25
	cr6.compare<uint32_t>(ctx.r5.u32, 25, xer);
	// beq cr6,0x82be89b8
	if (cr6.eq) goto loc_82BE89B8;
	// cmplwi cr6,r5,26
	cr6.compare<uint32_t>(ctx.r5.u32, 26, xer);
	// bne cr6,0x82be89cc
	if (!cr6.eq) goto loc_82BE89CC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-508
	ctx.r4.s64 = r11.s64 + -508;
	// b 0x82be89cc
	goto loc_82BE89CC;
loc_82BE89B8:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-524
	ctx.r4.s64 = r11.s64 + -524;
	// b 0x82be89cc
	goto loc_82BE89CC;
loc_82BE89C4:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-536
	ctx.r4.s64 = r11.s64 + -536;
loc_82BE89CC:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea7f0
	sub_82BEA7F0(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// lis r10,-31951
	ctx.r10.s64 = -2093940736;
	// addi r30,r11,12872
	r30.s64 = r11.s64 + 12872;
	// addi r28,r10,17920
	r28.s64 = ctx.r10.s64 + 17920;
	// lis r9,-32245
	ctx.r9.s64 = -2113208320;
	// addi r27,r9,-6348
	r27.s64 = ctx.r9.s64 + -6348;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r10,r11,27
	ctx.r10.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r10,19
	cr6.compare<uint32_t>(ctx.r10.u32, 19, xer);
	// bgt cr6,0x82be8af4
	if (cr6.gt) goto loc_82BE8AF4;
	// rlwinm. r10,r11,0,13,13
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r5,r11,20,26,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 20) & 0x3F;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82be8a2c
	if (cr0.eq) goto loc_82BE8A2C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-848
	ctx.r4.s64 = r11.s64 + -848;
	// b 0x82be8a34
	goto loc_82BE8A34;
loc_82BE8A2C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-836
	ctx.r4.s64 = r11.s64 + -836;
loc_82BE8A34:
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// clrlwi. r10,r11,29
	ctx.r10.u64 = r11.u32 & 0x7;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be8a68
	if (!cr0.eq) goto loc_82BE8A68;
	// rlwinm r10,r11,0,26,28
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x38;
	// cmplwi cr6,r10,8
	cr6.compare<uint32_t>(ctx.r10.u32, 8, xer);
	// bne cr6,0x82be8a68
	if (!cr6.eq) goto loc_82BE8A68;
	// rlwinm r10,r11,0,23,25
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x1C0;
	// cmplwi cr6,r10,128
	cr6.compare<uint32_t>(ctx.r10.u32, 128, xer);
	// bne cr6,0x82be8a68
	if (!cr6.eq) goto loc_82BE8A68;
	// rlwinm r11,r11,0,20,22
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xE00;
	// cmplwi cr6,r11,1536
	cr6.compare<uint32_t>(r11.u32, 1536, xer);
	// beq cr6,0x82be8ae4
	if (cr6.eq) goto loc_82BE8AE4;
loc_82BE8A68:
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,29,29,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,26,29,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,23,29,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0x7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8AE4:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,7908
	ctx.r4.s64 = r11.s64 + 7908;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8AF4:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// li r9,4
	ctx.r9.s64 = 4;
	// li r10,0
	ctx.r10.s64 = 0;
	// rlwinm r5,r11,27,25,25
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x40;
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// rlwinm r11,r11,27,26,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x3F;
	// stb r10,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, ctx.r10.u8);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// or r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 | r11.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be7b08
	sub_82BE7B08(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r10,r11,27
	ctx.r10.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// beq cr6,0x82be8b9c
	if (cr6.eq) goto loc_82BE8B9C;
	// rlwinm r11,r11,6,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0x3;
	// cmplwi cr6,r10,18
	cr6.compare<uint32_t>(ctx.r10.u32, 18, xer);
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// beq cr6,0x82be8be4
	if (cr6.eq) goto loc_82BE8BE4;
	// cmplwi cr6,r10,24
	cr6.compare<uint32_t>(ctx.r10.u32, 24, xer);
	// beq cr6,0x82be8c08
	if (cr6.eq) goto loc_82BE8C08;
loc_82BE8B70:
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// rlwinm r11,r11,4,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 4) & 0x3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// rlwinm r11,r11,2,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x3;
	// b 0x82be8bf8
	goto loc_82BE8BF8;
loc_82BE8B9C:
	// lwz r10,8(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r10,r10,18,30,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 18) & 0x3;
	// cmplwi cr6,r10,1
	cr6.compare<uint32_t>(ctx.r10.u32, 1, xer);
	// blt cr6,0x82be8bf4
	if (cr6.lt) goto loc_82BE8BF4;
	// beq cr6,0x82be8bd0
	if (cr6.eq) goto loc_82BE8BD0;
	// cmplwi cr6,r10,4
	cr6.compare<uint32_t>(ctx.r10.u32, 4, xer);
	// bge cr6,0x82be8c0c
	if (!cr6.lt) goto loc_82BE8C0C;
	// rlwinm r11,r11,6,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0x3;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// b 0x82be8b70
	goto loc_82BE8B70;
loc_82BE8BD0:
	// rlwinm r11,r11,6,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0x3;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
loc_82BE8BE4:
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// rlwinm r11,r11,4,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 4) & 0x3;
	// b 0x82be8bf8
	goto loc_82BE8BF8;
loc_82BE8BF4:
	// rlwinm r11,r11,6,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0x3;
loc_82BE8BF8:
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
loc_82BE8C08:
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8C0C:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r10,r11,27
	ctx.r10.u64 = r11.u32 & 0x1F;
	// cmplwi cr6,r10,19
	cr6.compare<uint32_t>(ctx.r10.u32, 19, xer);
	// bgt cr6,0x82be8c30
	if (cr6.gt) goto loc_82BE8C30;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// rlwinm r5,r11,12,27,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 12) & 0x1F;
	// addi r4,r10,-492
	ctx.r4.s64 = ctx.r10.s64 + -492;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8C30:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-484
	ctx.r4.s64 = ctx.r10.s64 + -484;
	// rlwinm r5,r11,13,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 13) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8808
	sub_82BE8808(ctx, base);
	// lis r11,-32251
	r11.s64 = -2113601536;
	// addi r27,r11,31748
	r27.s64 = r11.s64 + 31748;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r10,r11,27
	ctx.r10.u64 = r11.u32 & 0x1F;
	// lbzx r10,r10,r27
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + r27.u32);
	// andi. r10,r10,23
	ctx.r10.u64 = ctx.r10.u64 & 23;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be8c84
	if (cr0.eq) goto loc_82BE8C84;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r10,-468
	ctx.r4.s64 = ctx.r10.s64 + -468;
	// rlwinm r5,r11,7,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 7) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8808
	sub_82BE8808(ctx, base);
loc_82BE8C84:
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// lis r11,-32240
	r11.s64 = -2112880640;
	// clrlwi r10,r10,27
	ctx.r10.u64 = ctx.r10.u32 & 0x1F;
	// addi r30,r11,-820
	r30.s64 = r11.s64 + -820;
	// lbzx r11,r10,r27
	r11.u64 = PPC_LOAD_U8(ctx.r10.u32 + r27.u32);
	// andi. r11,r11,19
	r11.u64 = r11.u64 & 19;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8ce0
	if (cr0.eq) goto loc_82BE8CE0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r9,r11,26,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r10,20,30,31
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 20) & 0x3;
	// bne 0x82be8cc0
	if (!cr0.eq) goto loc_82BE8CC0;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82be8ce0
	if (cr6.eq) goto loc_82BE8CE0;
loc_82BE8CC0:
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r28,408
	ctx.r10.s64 = r28.s64 + 408;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r9,-440
	ctx.r5.s64 = ctx.r9.s64 + -440;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8CE0:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,19
	r11.u64 = r11.u64 & 19;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8d34
	if (cr0.eq) goto loc_82BE8D34;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r9,r11,26,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r10,18,30,31
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 18) & 0x3;
	// bne 0x82be8d14
	if (!cr0.eq) goto loc_82BE8D14;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82be8d34
	if (cr6.eq) goto loc_82BE8D34;
loc_82BE8D14:
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r28,424
	ctx.r10.s64 = r28.s64 + 424;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r9,-428
	ctx.r5.s64 = ctx.r9.s64 + -428;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8D34:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,19
	r11.u64 = r11.u64 & 19;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8d88
	if (cr0.eq) goto loc_82BE8D88;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lhz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U16(r29.u32 + 4);
	// rlwinm. r9,r11,26,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrlwi r11,r10,30
	r11.u64 = ctx.r10.u32 & 0x3;
	// bne 0x82be8d68
	if (!cr0.eq) goto loc_82BE8D68;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82be8d88
	if (cr6.eq) goto loc_82BE8D88;
loc_82BE8D68:
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r28,440
	ctx.r10.s64 = r28.s64 + 440;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r9,-416
	ctx.r5.s64 = ctx.r9.s64 + -416;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8D88:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,23
	r11.u64 = r11.u64 & 23;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8ddc
	if (cr0.eq) goto loc_82BE8DDC;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r9,r11,26,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r10,14,29,31
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 14) & 0x7;
	// bne 0x82be8dbc
	if (!cr0.eq) goto loc_82BE8DBC;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// beq cr6,0x82be8ddc
	if (cr6.eq) goto loc_82BE8DDC;
loc_82BE8DBC:
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r28,456
	ctx.r10.s64 = r28.s64 + 456;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r9,-404
	ctx.r5.s64 = ctx.r9.s64 + -404;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8DDC:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r11,r11,0,16,17
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xC000;
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// blt cr6,0x82be8e40
	if (cr6.lt) goto loc_82BE8E40;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,23
	r11.u64 = r11.u64 & 23;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8e40
	if (cr0.eq) goto loc_82BE8E40;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lbz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U8(r29.u32 + 4);
	// rlwinm. r9,r11,26,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// clrlwi r11,r10,30
	r11.u64 = ctx.r10.u32 & 0x3;
	// bne 0x82be8e20
	if (!cr0.eq) goto loc_82BE8E20;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82be8e40
	if (cr6.eq) goto loc_82BE8E40;
loc_82BE8E20:
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r28,488
	ctx.r10.s64 = r28.s64 + 488;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r9,-392
	ctx.r5.s64 = ctx.r9.s64 + -392;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8E40:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r11,r11,0,16,17
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xC000;
	// cmplwi cr6,r11,32768
	cr6.compare<uint32_t>(r11.u32, 32768, xer);
	// blt cr6,0x82be8ea4
	if (cr6.lt) goto loc_82BE8EA4;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,23
	r11.u64 = r11.u64 & 23;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8ea4
	if (cr0.eq) goto loc_82BE8EA4;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r9,r11,26,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r10,6,30,31
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0x3;
	// bne 0x82be8e84
	if (!cr0.eq) goto loc_82BE8E84;
	// cmplwi cr6,r11,3
	cr6.compare<uint32_t>(r11.u32, 3, xer);
	// beq cr6,0x82be8ea4
	if (cr6.eq) goto loc_82BE8EA4;
loc_82BE8E84:
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r10,r28,504
	ctx.r10.s64 = r28.s64 + 504;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// addi r5,r9,-376
	ctx.r5.s64 = ctx.r9.s64 + -376;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwzx r6,r11,r10
	ctx.r6.u64 = PPC_LOAD_U32(r11.u32 + ctx.r10.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8EA4:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,23
	r11.u64 = r11.u64 & 23;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8ed8
	if (cr0.eq) goto loc_82BE8ED8;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-360
	ctx.r4.s64 = ctx.r10.s64 + -360;
	// rlwinm r5,r11,4,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 4) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8808
	sub_82BE8808(ctx, base);
loc_82BE8ED8:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,23
	r11.u64 = r11.u64 & 23;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8f0c
	if (cr0.eq) goto loc_82BE8F0C;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r10,-344
	ctx.r4.s64 = ctx.r10.s64 + -344;
	// rlwinm r5,r11,3,30,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 3) & 0x3;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8808
	sub_82BE8808(ctx, base);
loc_82BE8F0C:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// clrlwi. r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8f3c
	if (cr0.eq) goto loc_82BE8F3C;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r10,-328
	ctx.r4.s64 = ctx.r10.s64 + -328;
	// clrlwi r5,r11,31
	ctx.r5.u64 = r11.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8808
	sub_82BE8808(ctx, base);
loc_82BE8F3C:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,19
	r11.u64 = r11.u64 & 19;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8fb0
	if (cr0.eq) goto loc_82BE8FB0;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be8f6c
	if (!cr0.eq) goto loc_82BE8F6C;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,23,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x1FC;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be8fb0
	if (cr0.eq) goto loc_82BE8FB0;
loc_82BE8F6C:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// rlwinm r11,r11,23,0,8
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0xFF800000;
	// addi r4,r9,-304
	ctx.r4.s64 = ctx.r9.s64 + -304;
	// srawi r11,r11,25
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1FFFFFF) != 0);
	r11.s64 = r11.s32 >> 25;
	// lfs f0,3216(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3216);
	f0.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f13,120(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f13,f13
	ctx.f13.f64 = double(ctx.f13.s64);
	// frsp f13,f13
	ctx.f13.f64 = double(float(ctx.f13.f64));
	// fmuls f1,f13,f0
	ctx.f1.f64 = double(float(ctx.f13.f64 * f0.f64));
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE8FB0:
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// lis r10,-32246
	ctx.r10.s64 = -2113273856;
	// clrlwi r11,r11,27
	r11.u64 = r11.u32 & 0x1F;
	// lfs f31,-27852(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -27852);
	f31.f64 = double(temp.f32);
	// lbzx r11,r11,r27
	r11.u64 = PPC_LOAD_U8(r11.u32 + r27.u32);
	// andi. r11,r11,19
	r11.u64 = r11.u64 & 19;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// cmpwi r11,0
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9024
	if (cr0.eq) goto loc_82BE9024;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be8fe8
	if (!cr0.eq) goto loc_82BE8FE8;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,11,15
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x1F0000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9024
	if (cr0.eq) goto loc_82BE9024;
loc_82BE8FE8:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r11,r11,11,0,20
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 11) & 0xFFFFF800;
	// addi r4,r10,-288
	ctx.r4.s64 = ctx.r10.s64 + -288;
	// srawi r11,r11,27
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFF) != 0);
	r11.s64 = r11.s32 >> 27;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9024:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r10,r11,0,16,17
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xC000;
	// cmplwi cr6,r10,16384
	cr6.compare<uint32_t>(ctx.r10.u32, 16384, xer);
	// blt cr6,0x82be9098
	if (cr6.lt) goto loc_82BE9098;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r10,r10,27
	ctx.r10.u64 = ctx.r10.u32 & 0x1F;
	// lbzx r10,r10,r27
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + r27.u32);
	// andi. r10,r10,19
	ctx.r10.u64 = ctx.r10.u64 & 19;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be9098
	if (cr0.eq) goto loc_82BE9098;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r10,26,31,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be9060
	if (!cr0.eq) goto loc_82BE9060;
	// rlwinm. r10,r11,0,6,10
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x3E00000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be9098
	if (cr0.eq) goto loc_82BE9098;
loc_82BE9060:
	// rlwinm r11,r11,6,0,25
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 6) & 0xFFFFFFC0;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// srawi r11,r11,27
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFF) != 0);
	r11.s64 = r11.s32 >> 27;
	// addi r4,r10,-272
	ctx.r4.s64 = ctx.r10.s64 + -272;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9098:
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r10,r11,0,16,17
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xC000;
	// cmplwi cr6,r10,32768
	cr6.compare<uint32_t>(ctx.r10.u32, 32768, xer);
	// blt cr6,0x82be965c
	if (cr6.lt) goto loc_82BE965C;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// clrlwi r10,r10,27
	ctx.r10.u64 = ctx.r10.u32 & 0x1F;
	// lbzx r10,r10,r27
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r10.u32 + r27.u32);
	// andi. r10,r10,19
	ctx.r10.u64 = ctx.r10.u64 & 19;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// cmpwi r10,0
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be965c
	if (cr0.eq) goto loc_82BE965C;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r10,26,31,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be90d4
	if (!cr0.eq) goto loc_82BE90D4;
	// rlwinm. r10,r11,0,1,5
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x7C000000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be965c
	if (cr0.eq) goto loc_82BE965C;
loc_82BE90D4:
	// rlwinm r11,r11,1,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// srawi r11,r11,27
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x7FFFFFF) != 0);
	r11.s64 = r11.s32 >> 27;
	// addi r4,r10,-256
	ctx.r4.s64 = ctx.r10.s64 + -256;
	// extsw r11,r11
	r11.s64 = r11.s32;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// std r11,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, r11.u64);
	// lfd f0,120(r1)
	ctx.fpscr.disableFlushMode();
	f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 120);
	// fcfid f0,f0
	f0.f64 = double(f0.s64);
	// frsp f0,f0
	f0.f64 = double(float(f0.f64));
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(f0.f64 * f31.f64));
	// stfd f1,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82be965c
	goto loc_82BE965C;
loc_82BE9110:
	// cmpwi cr6,r5,0
	cr6.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq cr6,0x82be912c
	if (cr6.eq) goto loc_82BE912C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-600
	ctx.r4.s64 = r11.s64 + -600;
loc_82BE9120:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82be965c
	goto loc_82BE965C;
loc_82BE912C:
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// li r27,0
	r27.s64 = 0;
	// rlwinm. r11,r11,2,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// stb r27,112(r1)
	PPC_STORE_U8(ctx.r1.u32 + 112, r27.u8);
	// mr r26,r27
	r26.u64 = r27.u64;
	// mr r25,r11
	r25.u64 = r11.u64;
	// bne 0x82be9188
	if (!cr0.eq) goto loc_82BE9188;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,30,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9188
	if (!cr0.eq) goto loc_82BE9188;
	// lwz r11,8224(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8224) );
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be9188
	if (cr6.eq) goto loc_82BE9188;
	// lwz r3,8228(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8228) );
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// li r4,3
	ctx.r4.s64 = 3;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bne 0x82be9188
	if (!cr0.eq) goto loc_82BE9188;
	// li r26,1
	r26.s64 = 1;
loc_82BE9188:
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// bne cr6,0x82be919c
	if (!cr6.eq) goto loc_82BE919C;
	// clrlwi. r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq 0x82be91a0
	if (cr0.eq) goto loc_82BE91A0;
loc_82BE919C:
	// mr r11,r27
	r11.u64 = r27.u64;
loc_82BE91A0:
	// clrlwi r30,r11,24
	r30.u64 = r11.u32 & 0xFF;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// beq cr6,0x82be91b8
	if (cr6.eq) goto loc_82BE91B8;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-812
	ctx.r4.s64 = r11.s64 + -812;
	// b 0x82be91d4
	goto loc_82BE91D4;
loc_82BE91B8:
	// clrlwi. r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be91cc
	if (cr0.eq) goto loc_82BE91CC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-800
	ctx.r4.s64 = r11.s64 + -800;
	// b 0x82be91d4
	goto loc_82BE91D4;
loc_82BE91CC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-792
	ctx.r4.s64 = r11.s64 + -792;
loc_82BE91D4:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea7f0
	sub_82BEA7F0(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm. r10,r11,0,13,13
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x40000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// rlwinm r5,r11,20,26,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 20) & 0x3F;
	// beq 0x82be9210
	if (cr0.eq) goto loc_82BE9210;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-848
	ctx.r4.s64 = r11.s64 + -848;
	// b 0x82be9218
	goto loc_82BE9218;
loc_82BE9210:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-836
	ctx.r4.s64 = r11.s64 + -836;
loc_82BE9218:
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lis r10,-31951
	ctx.r10.s64 = -2093940736;
	// clrlwi. r9,r11,29
	ctx.r9.u64 = r11.u32 & 0x7;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// addi r28,r10,17920
	r28.s64 = ctx.r10.s64 + 17920;
	// bne 0x82be9254
	if (!cr0.eq) goto loc_82BE9254;
	// rlwinm r10,r11,0,26,28
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x38;
	// cmplwi cr6,r10,8
	cr6.compare<uint32_t>(ctx.r10.u32, 8, xer);
	// bne cr6,0x82be9254
	if (!cr6.eq) goto loc_82BE9254;
	// rlwinm r10,r11,0,23,25
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x1C0;
	// cmplwi cr6,r10,128
	cr6.compare<uint32_t>(ctx.r10.u32, 128, xer);
	// bne cr6,0x82be9254
	if (!cr6.eq) goto loc_82BE9254;
	// rlwinm r11,r11,0,20,22
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xE00;
	// cmplwi cr6,r11,1536
	cr6.compare<uint32_t>(r11.u32, 1536, xer);
	// beq cr6,0x82be92dc
	if (cr6.eq) goto loc_82BE92DC;
loc_82BE9254:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6348
	ctx.r4.s64 = r11.s64 + -6348;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r24,r11,12872
	r24.s64 = r11.s64 + 12872;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// clrlwi r11,r11,29
	r11.u64 = r11.u32 & 0x7;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// rlwinm r11,r11,29,29,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 29) & 0x7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// rlwinm r11,r11,26,29,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
	// rlwinm r11,r11,23,29,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0x7;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE92DC:
	// clrlwi. r24,r30,24
	r24.u64 = r30.u32 & 0xFF;
	cr0.compare<int32_t>(r24.s32, 0, xer);
	// bne 0x82be92ec
	if (!cr0.eq) goto loc_82BE92EC;
	// clrlwi. r11,r26,24
	r11.u64 = r26.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9358
	if (cr0.eq) goto loc_82BE9358;
loc_82BE92EC:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,7908
	ctx.r4.s64 = r11.s64 + 7908;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// li r11,4
	r11.s64 = 4;
	// li r10,0
	ctx.r10.s64 = 0;
	// stb r27,95(r1)
	PPC_STORE_U8(ctx.r1.u32 + 95, r27.u8);
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r11.u32);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// rlwinm r5,r11,27,25,25
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x40;
	// rlwinm r11,r11,27,26,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 27) & 0x3F;
	// or r5,r5,r11
	ctx.r5.u64 = ctx.r5.u64 | r11.u64;
	// bl 0x82be7b08
	sub_82BE7B08(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-780
	ctx.r4.s64 = r11.s64 + -780;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// rlwinm r11,r11,2,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0x3;
	// lbzx r11,r11,r28
	r11.u64 = PPC_LOAD_U8(r11.u32 + r28.u32);
	// extsb r5,r11
	ctx.r5.s64 = r11.s8;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9358:
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x82be9388
	if (cr6.eq) goto loc_82BE9388;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// rlwinm r9,r11,12,27,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 12) & 0x1F;
	// rlwinm r11,r11,7,30,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 7) & 0x3;
	// mulli r9,r9,3
	ctx.r9.s64 = ctx.r9.s64 * 3;
	// subfic r9,r9,95
	xer.ca = ctx.r9.u32 <= 95;
	ctx.r9.s64 = 95 - ctx.r9.s64;
	// addi r4,r10,-776
	ctx.r4.s64 = ctx.r10.s64 + -776;
	// subf r5,r11,r9
	ctx.r5.s64 = ctx.r9.s64 - r11.s64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9388:
	// clrlwi. r26,r26,24
	r26.u64 = r26.u32 & 0xFF;
	cr0.compare<int32_t>(r26.s32, 0, xer);
	// beq 0x82be93d0
	if (cr0.eq) goto loc_82BE93D0;
	// lbz r11,112(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 112);
	// addi r10,r28,792
	ctx.r10.s64 = r28.s64 + 792;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// rlwinm r8,r11,30,2,29
	ctx.r8.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0x3FFFFFFC;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r9,-768
	ctx.r4.s64 = ctx.r9.s64 + -768;
	// clrlwi r30,r11,28
	r30.u64 = r11.u32 & 0xF;
	// lwzx r5,r8,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82be93d0
	if (cr6.eq) goto loc_82BE93D0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,2864
	ctx.r4.s64 = r11.s64 + 2864;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE93D0:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// cmplwi cr6,r25,0
	cr6.compare<uint32_t>(r25.u32, 0, xer);
	// addi r30,r11,5664
	r30.s64 = r11.s64 + 5664;
	// addi r27,r10,3900
	r27.s64 = ctx.r10.s64 + 3900;
	// bne cr6,0x82be9468
	if (!cr6.eq) goto loc_82BE9468;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be93fc
	if (!cr0.eq) goto loc_82BE93FC;
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// bne cr6,0x82be9424
	if (!cr6.eq) goto loc_82BE9424;
loc_82BE93FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// cmpwi cr6,r23,0
	cr6.compare<int32_t>(r23.s32, 0, xer);
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// beq cr6,0x82be9414
	if (cr6.eq) goto loc_82BE9414;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
loc_82BE9414:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-760
	ctx.r4.s64 = r11.s64 + -760;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9424:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be943c
	if (!cr0.eq) goto loc_82BE943C;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,16,16
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9468
	if (cr0.eq) goto loc_82BE9468;
loc_82BE943C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// rlwinm. r11,r11,0,16,16
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9458
	if (!cr0.eq) goto loc_82BE9458;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
loc_82BE9458:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-740
	ctx.r4.s64 = r11.s64 + -740;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9468:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9480
	if (!cr0.eq) goto loc_82BE9480;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,2,7
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x3F000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be94a4
	if (cr0.eq) goto loc_82BE94A4;
loc_82BE9480:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-724
	ctx.r4.s64 = r11.s64 + -724;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// srawi r5,r11,26
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x3FFFFFF) != 0);
	ctx.r5.s64 = r11.s32 >> 26;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE94A4:
	// cmplwi cr6,r26,0
	cr6.compare<uint32_t>(r26.u32, 0, xer);
	// bne cr6,0x82be965c
	if (!cr6.eq) goto loc_82BE965C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,272
	ctx.r4.s64 = r11.s64 + 272;
	// bl 0x82bea798
	sub_82BEA798(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be94d4
	if (!cr0.eq) goto loc_82BE94D4;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,1,23
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x7FFFFF00;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be94f8
	if (cr0.eq) goto loc_82BE94F8;
loc_82BE94D4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-708
	ctx.r4.s64 = r11.s64 + -708;
	// lwz r11,8(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// rlwinm r11,r11,1,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// srawi r5,r11,9
	xer.ca = (r11.s32 < 0) & ((r11.u32 & 0x1FF) != 0);
	ctx.r5.s64 = r11.s32 >> 9;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE94F8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9510
	if (!cr0.eq) goto loc_82BE9510;
	// lhz r11,4(r29)
	r11.u64 = PPC_LOAD_U16(r29.u32 + 4);
	// clrlwi. r11,r11,26
	r11.u64 = r11.u32 & 0x3F;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9538
	if (cr0.eq) goto loc_82BE9538;
loc_82BE9510:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r11,r28,536
	r11.s64 = r28.s64 + 536;
	// addi r4,r10,-696
	ctx.r4.s64 = ctx.r10.s64 + -696;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lhz r10,4(r29)
	ctx.r10.u64 = PPC_LOAD_U16(r29.u32 + 4);
	// rlwinm r10,r10,2,24,29
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFC;
	// lwzx r5,r10,r11
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9538:
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x82be9574
	if (cr6.eq) goto loc_82BE9574;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9558
	if (!cr0.eq) goto loc_82BE9558;
	// lbz r11,11(r29)
	r11.u64 = PPC_LOAD_U8(r29.u32 + 11);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82be9574
	if (cr0.eq) goto loc_82BE9574;
loc_82BE9558:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lbz r5,11(r29)
	ctx.r5.u64 = PPC_LOAD_U8(r29.u32 + 11);
	// addi r4,r11,-680
	ctx.r4.s64 = r11.s64 + -680;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9574:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be958c
	if (!cr0.eq) goto loc_82BE958C;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,19,19
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be95b8
	if (cr0.eq) goto loc_82BE95B8;
loc_82BE958C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// mr r5,r27
	ctx.r5.u64 = r27.u64;
	// rlwinm. r11,r11,0,19,19
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x1000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be95a8
	if (!cr0.eq) goto loc_82BE95A8;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
loc_82BE95A8:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-668
	ctx.r4.s64 = r11.s64 + -668;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE95B8:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be95d0
	if (!cr0.eq) goto loc_82BE95D0;
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,18,18
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9608
	if (cr0.eq) goto loc_82BE9608;
loc_82BE95D0:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// lwz r11,4(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,18,18
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be95f0
	if (cr0.eq) goto loc_82BE95F0;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-656
	ctx.r5.s64 = r11.s64 + -656;
	// b 0x82be95f8
	goto loc_82BE95F8;
loc_82BE95F0:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-648
	ctx.r5.s64 = r11.s64 + -648;
loc_82BE95F8:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-636
	ctx.r4.s64 = r11.s64 + -636;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9608:
	// cmplwi cr6,r24,0
	cr6.compare<uint32_t>(r24.u32, 0, xer);
	// beq cr6,0x82be964c
	if (cr6.eq) goto loc_82BE964C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9628
	if (!cr0.eq) goto loc_82BE9628;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// rlwinm. r11,r11,0,2,4
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x38000000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be964c
	if (cr0.eq) goto loc_82BE964C;
loc_82BE9628:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be87a0
	sub_82BE87A0(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-620
	ctx.r4.s64 = r11.s64 + -620;
	// lwz r11,0(r29)
	r11.u64 = PPC_LOAD_U32(r29.u32 + int32_t(0) );
	// rlwinm r11,r11,5,29,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 5) & 0x7;
	// addi r5,r11,1
	ctx.r5.s64 = r11.s64 + 1;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE964C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,256
	ctx.r4.s64 = r11.s64 + 256;
	// bl 0x82bea798
	sub_82BEA798(ctx, base);
loc_82BE965C:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-88(r1)
	ctx.fpscr.disableFlushMode();
	f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// b 0x82ca2c24
	return;
}

PPC_WEAK_FUNC(sub_82BE8870) {
	__imp__sub_82BE8870(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE9668) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mr r11,r6
	r11.u64 = ctx.r6.u64;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r11
	ctx.r3.u64 = r11.u64;
	// b 0x82be9680
	goto loc_82BE9680;
loc_82BE9680:
	// mflr r12
	// bl 0x82ca2bcc
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r22,r5
	r22.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// clrlwi. r11,r29,31
	r11.u64 = r29.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9f3c
	if (cr0.eq) goto loc_82BE9F3C;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lbz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// rlwinm r30,r11,20,28,31
	r30.u64 = rotl64(r11.u32 | (r11.u64 << 32), 20) & 0xF;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x82be976c
	if (cr0.eq) goto loc_82BE976C;
	// bl 0x82bea438
	sub_82BEA438(ctx, base);
	// rlwinm r11,r22,27,5,31
	r11.u64 = rotl64(r22.u32 | (r22.u64 << 32), 27) & 0x7FFFFFF;
	// clrlwi r10,r22,27
	ctx.r10.u64 = r22.u32 & 0x1F;
	// addi r11,r11,6
	r11.s64 = r11.s64 + 6;
	// li r9,1
	ctx.r9.s64 = 1;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// slw r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r10.u8 & 0x3F));
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// and. r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9728
	if (cr0.eq) goto loc_82BE9728;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be96fc
	if (cr0.eq) goto loc_82BE96FC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-212
	ctx.r4.s64 = r11.s64 + -212;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE96FC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-204
	ctx.r4.s64 = r11.s64 + -204;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// addi r4,r11,-196
	ctx.r4.s64 = r11.s64 + -196;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
loc_82BE9728:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r11,0,29,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be973c
	if (!cr0.eq) goto loc_82BE973C;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82be976c
	if (cr6.eq) goto loc_82BE976C;
loc_82BE973C:
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be976c
	if (cr0.eq) goto loc_82BE976C;
	// srawi r11,r22,1
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x1) != 0);
	r11.s64 = r22.s32 >> 1;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// srawi r9,r22,1
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x1) != 0);
	ctx.r9.s64 = r22.s32 >> 1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r4,r10,280
	ctx.r4.s64 = ctx.r10.s64 + 280;
	// addze r5,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r5.s64 = temp.s64;
	// subf r6,r11,r22
	ctx.r6.s64 = r22.s64 - r11.s64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE976C:
	// cmplwi cr6,r30,15
	cr6.compare<uint32_t>(r30.u32, 15, xer);
	// bgt cr6,0x82be9ef8
	if (cr6.gt) goto loc_82BE9EF8;
	// lis r12,-32246
	r12.s64 = -2113273856;
	// addi r12,r12,968
	r12.s64 = r12.s64 + 968;
	// rlwinm r0,r30,1,0,30
	r0.u64 = rotl64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32065
	r12.s64 = -2101411840;
	// addi r12,r12,-26724
	r12.s64 = r12.s64 + -26724;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_82BE979C;
	case 1:
		goto loc_82BE97D8;
	case 2:
		goto loc_82BE9824;
	case 3:
		goto loc_82BE984C;
	case 4:
		goto loc_82BE98D0;
	case 5:
		goto loc_82BE98F8;
	case 6:
		goto loc_82BE9928;
	case 7:
		goto loc_82BE9958;
	case 8:
		goto loc_82BE9A24;
	case 9:
		goto loc_82BE9AE0;
	case 10:
		goto loc_82BE9BE8;
	case 11:
		goto loc_82BE9C10;
	case 12:
		goto loc_82BE9D84;
	case 13:
		goto loc_82BE9E30;
	case 14:
		goto loc_82BE9EA8;
	case 15:
		goto loc_82BE9ED0;
	default:
		__builtin_unreachable();
	}
loc_82BE979C:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,29,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-188
	ctx.r4.s64 = r11.s64 + -188;
loc_82BE97CC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// b 0x82bea25c
	// ERROR 82BEA25C
	return;
loc_82BE97D8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE97EC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-172
	ctx.r4.s64 = r11.s64 + -172;
loc_82BE97FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r6,0
	ctx.r6.s64 = 0;
	// rlwinm r5,r11,23,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0x1;
	// rlwinm r4,r10,17,31,31
	ctx.r4.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 17) & 0x1;
loc_82BE9818:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea6e8
	sub_82BEA6E8(ctx, base);
	// b 0x82bea25c
	// ERROR 82BEA25C
	return;
loc_82BE9824:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE9838:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-164
	ctx.r4.s64 = r11.s64 + -164;
	// b 0x82be97fc
	goto loc_82BE97FC;
loc_82BE984C:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-156
	ctx.r4.s64 = r11.s64 + -156;
loc_82BE9870:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be98a4
	if (!cr0.eq) goto loc_82BE98A4;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-148
	ctx.r4.s64 = r11.s64 + -148;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE98A4:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,-144
	ctx.r4.s64 = ctx.r10.s64 + -144;
	// rlwinm r5,r11,30,24,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_82BE98C0:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r6,1
	ctx.r6.s64 = 1;
	// rlwinm r4,r11,17,31,31
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 17) & 0x1;
	// b 0x82be9818
	goto loc_82BE9818;
loc_82BE98D0:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-140
	ctx.r4.s64 = r11.s64 + -140;
	// b 0x82be9870
	goto loc_82BE9870;
loc_82BE98F8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be991c
	if (cr0.eq) goto loc_82BE991C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be97ec
	goto loc_82BE97EC;
loc_82BE991C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be97ec
	goto loc_82BE97EC;
loc_82BE9928:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be994c
	if (cr0.eq) goto loc_82BE994C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be9838
	goto loc_82BE9838;
loc_82BE994C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be9838
	goto loc_82BE9838;
loc_82BE9958:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-132
	ctx.r4.s64 = r11.s64 + -132;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-124
	ctx.r4.s64 = r11.s64 + -124;
	// lhz r11,0(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// clrlwi r5,r11,27
	ctx.r5.u64 = r11.u32 & 0x1F;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-1000
	ctx.r4.s64 = r11.s64 + -1000;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// clrlwi r5,r11,19
	ctx.r5.u64 = r11.u32 & 0x1FFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm. r9,r11,26,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r10,19,31,31
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 19) & 0x1;
	// bne 0x82be99e0
	if (!cr0.eq) goto loc_82BE99E0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be9a0c
	if (cr6.eq) goto loc_82BE9A0C;
loc_82BE99E0:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be99f4
	if (cr6.eq) goto loc_82BE99F4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,3900
	ctx.r5.s64 = r11.s64 + 3900;
	// b 0x82be99fc
	goto loc_82BE99FC;
loc_82BE99F4:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r5,r11,5664
	ctx.r5.s64 = r11.s64 + 5664;
loc_82BE99FC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-116
	ctx.r4.s64 = r11.s64 + -116;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9A0C:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r5,r11,21,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 21) & 0x1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-104
	ctx.r4.s64 = r11.s64 + -104;
	// b 0x82be9f30
	goto loc_82BE9F30;
loc_82BE9A24:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm. r11,r11,0,10,10
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x200000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9a60
	if (cr0.eq) goto loc_82BE9A60;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9a54
	if (cr0.eq) goto loc_82BE9A54;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be9a68
	goto loc_82BE9A68;
loc_82BE9A54:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be9a68
	goto loc_82BE9A68;
loc_82BE9A60:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE9A68:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-84
	ctx.r4.s64 = r11.s64 + -84;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-124
	ctx.r4.s64 = r11.s64 + -124;
	// lhz r11,0(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// clrlwi r5,r11,27
	ctx.r5.u64 = r11.u32 & 0x1F;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-1000
	ctx.r4.s64 = r11.s64 + -1000;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// clrlwi r5,r11,19
	ctx.r5.u64 = r11.u32 & 0x1FFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,20,20
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-76
	ctx.r4.s64 = r11.s64 + -76;
loc_82BE9AD4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82bea25c
	// ERROR 82BEA25C
	return;
loc_82BE9AE0:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r30,0
	r30.s64 = 0;
	// rlwinm. r11,r11,0,17,17
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9b24
	if (cr0.eq) goto loc_82BE9B24;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// li r30,1
	r30.s64 = 1;
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9b18
	if (cr0.eq) goto loc_82BE9B18;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be9b2c
	goto loc_82BE9B2C;
loc_82BE9B18:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be9b2c
	goto loc_82BE9B2C;
loc_82BE9B24:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE9B2C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm. r11,r11,0,18,18
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9bb4
	if (!cr0.eq) goto loc_82BE9BB4;
	// clrlwi. r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9bb4
	if (!cr0.eq) goto loc_82BE9BB4;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-56
	ctx.r4.s64 = r11.s64 + -56;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9b80
	if (cr0.eq) goto loc_82BE9B80;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,3224
	ctx.r5.s64 = r11.s64 + 3224;
	// b 0x82be9b88
	goto loc_82BE9B88;
loc_82BE9B80:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-148
	ctx.r5.s64 = r11.s64 + -148;
loc_82BE9B88:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6332
	ctx.r4.s64 = r11.s64 + -6332;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-48
	ctx.r4.s64 = r11.s64 + -48;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r5,r11,30,24,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82be9bd4
	goto loc_82BE9BD4;
loc_82BE9BB4:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,11116
	ctx.r4.s64 = r11.s64 + 11116;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9BD4:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r4,r10,-1000
	ctx.r4.s64 = ctx.r10.s64 + -1000;
	// clrlwi r5,r11,19
	ctx.r5.u64 = r11.u32 & 0x1FFF;
	// b 0x82be9f30
	goto loc_82BE9F30;
loc_82BE9BE8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-40
	ctx.r4.s64 = r11.s64 + -40;
	// b 0x82be97cc
	goto loc_82BE97CC;
loc_82BE9C10:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r30,0
	r30.s64 = 0;
	// rlwinm. r11,r11,0,17,17
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9c54
	if (cr0.eq) goto loc_82BE9C54;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// li r30,1
	r30.s64 = 1;
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9c48
	if (cr0.eq) goto loc_82BE9C48;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be9c5c
	goto loc_82BE9C5C;
loc_82BE9C48:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be9c5c
	goto loc_82BE9C5C;
loc_82BE9C54:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE9C5C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r11,0
	r11.s64 = 0;
	// rlwinm. r10,r10,0,18,18
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x2000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be9c7c
	if (!cr0.eq) goto loc_82BE9C7C;
	// clrlwi. r10,r30,24
	ctx.r10.u64 = r30.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be9c80
	if (cr0.eq) goto loc_82BE9C80;
loc_82BE9C7C:
	// li r11,1
	r11.s64 = 1;
loc_82BE9C80:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82be9cac
	if (cr0.eq) goto loc_82BE9CAC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-36
	ctx.r4.s64 = r11.s64 + -36;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82be9d10
	goto loc_82BE9D10;
loc_82BE9CAC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-32
	ctx.r4.s64 = r11.s64 + -32;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9ce0
	if (cr0.eq) goto loc_82BE9CE0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,3224
	ctx.r5.s64 = r11.s64 + 3224;
	// b 0x82be9ce8
	goto loc_82BE9CE8;
loc_82BE9CE0:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-148
	ctx.r5.s64 = r11.s64 + -148;
loc_82BE9CE8:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6332
	ctx.r4.s64 = r11.s64 + -6332;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-48
	ctx.r4.s64 = r11.s64 + -48;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r5,r11,30,24,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9D10:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,-1000
	ctx.r4.s64 = ctx.r10.s64 + -1000;
	// clrlwi r5,r11,19
	ctx.r5.u64 = r11.u32 & 0x1FFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r11,0,29,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be9d60
	if (cr0.eq) goto loc_82BE9D60;
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r10,r10,31,31,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be9d78
	if (!cr0.eq) goto loc_82BE9D78;
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9d60
	if (cr0.eq) goto loc_82BE9D60;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r5,r11,5664
	ctx.r5.s64 = r11.s64 + 5664;
loc_82BE9D50:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-24
	ctx.r4.s64 = r11.s64 + -24;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9D60:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r5,r11,21,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 21) & 0x1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-4
	ctx.r4.s64 = r11.s64 + -4;
	// b 0x82be9f30
	goto loc_82BE9F30;
loc_82BE9D78:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,3900
	ctx.r5.s64 = r11.s64 + 3900;
	// b 0x82be9d50
	goto loc_82BE9D50;
loc_82BE9D84:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-31951
	r11.s64 = -2093940736;
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r9,r11,18776
	ctx.r9.s64 = r11.s64 + 18776;
	// addi r4,r10,-6332
	ctx.r4.s64 = ctx.r10.s64 + -6332;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r30,r11,23,30,31
	r30.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0x3;
	// rlwinm r10,r10,29,31,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1;
	// rlwinm r11,r30,1,0,30
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r5,r11,r9
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bne cr6,0x82be9e18
	if (!cr6.eq) goto loc_82BE9E18;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,24
	ctx.r4.s64 = ctx.r10.s64 + 24;
	// clrlwi r5,r11,29
	ctx.r5.u64 = r11.u32 & 0x7;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9E18:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,23,23
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,28
	ctx.r4.s64 = r11.s64 + 28;
	// b 0x82be9ad4
	goto loc_82BE9AD4;
loc_82BE9E30:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-156
	ctx.r4.s64 = r11.s64 + -156;
loc_82BE9E54:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9e88
	if (!cr0.eq) goto loc_82BE9E88;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-148
	ctx.r4.s64 = r11.s64 + -148;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9E88:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,-144
	ctx.r4.s64 = ctx.r10.s64 + -144;
	// rlwinm r5,r11,30,24,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x82be98c0
	goto loc_82BE98C0;
loc_82BE9EA8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-140
	ctx.r4.s64 = r11.s64 + -140;
	// b 0x82be9e54
	goto loc_82BE9E54;
loc_82BE9ED0:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,52
	ctx.r4.s64 = r11.s64 + 52;
	// b 0x82be97cc
	goto loc_82BE97CC;
loc_82BE9EF8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,60
	ctx.r4.s64 = r11.s64 + 60;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,80
	ctx.r4.s64 = r11.s64 + 80;
loc_82BE9F30:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82bea25c
	// ERROR 82BEA25C
	return;
loc_82BE9F3C:
	// rlwinm. r11,r29,0,29,30
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 0) & 0x6;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// lwz r11,8240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8240) );
	// cmplw cr6,r11,r22
	cr6.compare<uint32_t>(r11.u32, r22.u32, xer);
	// bgt cr6,0x82be9f54
	if (cr6.gt) goto loc_82BE9F54;
	// mr r11,r22
	r11.u64 = r22.u64;
loc_82BE9F54:
	// rlwinm. r10,r29,0,30,30
	ctx.r10.u64 = rotl64(r29.u32 | (r29.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r11,8240(r31)
	PPC_STORE_U32(r31.u32 + 8240, r11.u32);
	// rlwinm r21,r29,27,31,31
	r21.u64 = rotl64(r29.u32 | (r29.u64 << 32), 27) & 0x1;
	// beq 0x82bea000
	if (cr0.eq) goto loc_82BEA000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea438
	sub_82BEA438(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9f8c
	if (cr0.eq) goto loc_82BE9F8C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// addi r4,r11,296
	ctx.r4.s64 = r11.s64 + 296;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9F8C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// clrlwi. r10,r21,24
	ctx.r10.u64 = r21.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// addi r30,r11,-180
	r30.s64 = r11.s64 + -180;
	// beq 0x82be9fdc
	if (cr0.eq) goto loc_82BE9FDC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,172
	ctx.r4.s64 = r11.s64 + 172;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9fdc
	if (cr0.eq) goto loc_82BE9FDC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,312
	ctx.r4.s64 = r11.s64 + 312;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9FDC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// rlwinm r5,r29,28,31,31
	ctx.r5.u64 = rotl64(r29.u32 | (r29.u64 << 32), 28) & 0x1;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8870
	sub_82BE8870(ctx, base);
	// b 0x82bea25c
	// ERROR 82BEA25C
	return;
loc_82BEA000:
	// rlwinm. r11,r29,0,29,29
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82be7fc0
	sub_82BE7FC0(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// lis r8,-32240
	ctx.r8.s64 = -2112880640;
	// lis r7,-32240
	ctx.r7.s64 = -2112880640;
	// lis r6,-32240
	ctx.r6.s64 = -2112880640;
	// clrlwi. r5,r3,24
	ctx.r5.u64 = ctx.r3.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// lis r29,-14336
	r29.s64 = -939524096;
	// addi r25,r11,312
	r25.s64 = r11.s64 + 312;
	// addi r26,r10,172
	r26.s64 = ctx.r10.s64 + 172;
	// addi r27,r9,296
	r27.s64 = ctx.r9.s64 + 296;
	// addi r24,r8,232
	r24.s64 = ctx.r8.s64 + 232;
	// addi r23,r7,224
	r23.s64 = ctx.r7.s64 + 224;
	// addi r30,r6,-180
	r30.s64 = ctx.r6.s64 + -180;
	// beq 0x82bea090
	if (cr0.eq) goto loc_82BEA090;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm r10,r11,0,0,5
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFC000000;
	// cmplw cr6,r10,r29
	cr6.compare<uint32_t>(ctx.r10.u32, r29.u32, xer);
	// bne cr6,0x82bea084
	if (!cr6.eq) goto loc_82BEA084;
	// rlwinm. r10,r11,0,16,16
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82bea078
	if (cr0.eq) goto loc_82BEA078;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82be7f20
	sub_82BE7F20(ctx, base);
	// not r11,r3
	r11.u64 = ~ctx.r3.u64;
	// rlwinm r11,r11,31,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x1;
	// b 0x82bea088
	goto loc_82BEA088;
loc_82BEA078:
	// rlwinm. r11,r11,0,8,11
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xF00000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq 0x82bea088
	if (cr0.eq) goto loc_82BEA088;
loc_82BEA084:
	// li r11,0
	r11.s64 = 0;
loc_82BEA088:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea138
	if (cr0.eq) goto loc_82BEA138;
loc_82BEA090:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea438
	sub_82BEA438(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea0b4
	if (cr0.eq) goto loc_82BEA0B4;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA0B4:
	// clrlwi. r11,r21,24
	r11.u64 = r21.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea0f4
	if (cr0.eq) goto loc_82BEA0F4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea0f4
	if (cr0.eq) goto loc_82BEA0F4;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA0F4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r11,r11,5,27,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 5) & 0x1F;
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r10,2
	cr6.compare<uint32_t>(ctx.r10.u32, 2, xer);
	// blt cr6,0x82bea12c
	if (cr6.lt) goto loc_82BEA12C;
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bne 0x82bea124
	if (!cr0.eq) goto loc_82BEA124;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
loc_82BEA124:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA12C:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8030
	sub_82BE8030(ctx, base);
loc_82BEA138:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm r10,r11,0,0,5
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFC000000;
	// cmplw cr6,r10,r29
	cr6.compare<uint32_t>(ctx.r10.u32, r29.u32, xer);
	// bne cr6,0x82bea170
	if (!cr6.eq) goto loc_82BEA170;
	// rlwinm. r10,r11,0,16,16
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82bea164
	if (cr0.eq) goto loc_82BEA164;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82be7f20
	sub_82BE7F20(ctx, base);
	// not r11,r3
	r11.u64 = ~ctx.r3.u64;
	// rlwinm r11,r11,31,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x1;
	// b 0x82bea174
	goto loc_82BEA174;
loc_82BEA164:
	// rlwinm. r11,r11,0,8,11
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xF00000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq 0x82bea174
	if (cr0.eq) goto loc_82BEA174;
loc_82BEA170:
	// li r11,0
	r11.s64 = 0;
loc_82BEA174:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82bea25c
	if (!cr0.eq) {
		// ERROR 82BEA25C
		return;
	}
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82be7fc0
	sub_82BE7FC0(ctx, base);
	// clrlwi. r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bne 0x82bea1b8
	if (!cr0.eq) goto loc_82BEA1B8;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea1ac
	if (cr0.eq) goto loc_82BEA1AC;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA1AC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,92
	ctx.r4.s64 = r11.s64 + 92;
	// b 0x82bea21c
	goto loc_82BEA21C;
loc_82BEA1B8:
	// bl 0x82bea438
	sub_82BEA438(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea1d8
	if (cr0.eq) goto loc_82BEA1D8;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA1D8:
	// clrlwi. r11,r21,24
	r11.u64 = r21.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea218
	if (cr0.eq) goto loc_82BEA218;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea218
	if (cr0.eq) goto loc_82BEA218;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA218:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BEA21C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r11,r11,5,27,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 5) & 0x1F;
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r10,2
	cr6.compare<uint32_t>(ctx.r10.u32, 2, xer);
	// blt cr6,0x82bea250
	if (cr6.lt) goto loc_82BEA250;
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bne 0x82bea248
	if (!cr0.eq) goto loc_82BEA248;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
loc_82BEA248:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA250:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
}

PPC_WEAK_FUNC(sub_82BE9668) {
	__imp__sub_82BE9668(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BE9680) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r21{};
	PPCRegister r22{};
	PPCRegister r23{};
	PPCRegister r24{};
	PPCRegister r25{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2bcc
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	r29.u64 = ctx.r4.u64;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r22,r5
	r22.u64 = ctx.r5.u64;
	// mr r28,r6
	r28.u64 = ctx.r6.u64;
	// clrlwi. r11,r29,31
	r11.u64 = r29.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9f3c
	if (cr0.eq) goto loc_82BE9F3C;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lbz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// rlwinm r30,r11,20,28,31
	r30.u64 = rotl64(r11.u32 | (r11.u64 << 32), 20) & 0xF;
	// cmplwi r10,0
	cr0.compare<uint32_t>(ctx.r10.u32, 0, xer);
	// beq 0x82be976c
	if (cr0.eq) goto loc_82BE976C;
	// bl 0x82bea438
	sub_82BEA438(ctx, base);
	// rlwinm r11,r22,27,5,31
	r11.u64 = rotl64(r22.u32 | (r22.u64 << 32), 27) & 0x7FFFFFF;
	// clrlwi r10,r22,27
	ctx.r10.u64 = r22.u32 & 0x1F;
	// addi r11,r11,6
	r11.s64 = r11.s64 + 6;
	// li r9,1
	ctx.r9.s64 = 1;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// slw r10,r9,r10
	ctx.r10.u64 = ctx.r10.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r10.u8 & 0x3F));
	// lwzx r11,r11,r31
	r11.u64 = PPC_LOAD_U32(r11.u32 + r31.u32);
	// and. r11,r10,r11
	r11.u64 = ctx.r10.u64 & r11.u64;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9728
	if (cr0.eq) goto loc_82BE9728;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be96fc
	if (cr0.eq) goto loc_82BE96FC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-212
	ctx.r4.s64 = r11.s64 + -212;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE96FC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-204
	ctx.r4.s64 = r11.s64 + -204;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// addi r4,r11,-196
	ctx.r4.s64 = r11.s64 + -196;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
loc_82BE9728:
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r11,0,29,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be973c
	if (!cr0.eq) goto loc_82BE973C;
	// cmplwi cr6,r30,0
	cr6.compare<uint32_t>(r30.u32, 0, xer);
	// beq cr6,0x82be976c
	if (cr6.eq) goto loc_82BE976C;
loc_82BE973C:
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be976c
	if (cr0.eq) goto loc_82BE976C;
	// srawi r11,r22,1
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x1) != 0);
	r11.s64 = r22.s32 >> 1;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addze r11,r11
	temp.s64 = r11.s64 + xer.ca;
	xer.ca = temp.u32 < r11.u32;
	r11.s64 = temp.s64;
	// srawi r9,r22,1
	xer.ca = (r22.s32 < 0) & ((r22.u32 & 0x1) != 0);
	ctx.r9.s64 = r22.s32 >> 1;
	// rlwinm r11,r11,1,0,30
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 1) & 0xFFFFFFFE;
	// addi r4,r10,280
	ctx.r4.s64 = ctx.r10.s64 + 280;
	// addze r5,r9
	temp.s64 = ctx.r9.s64 + xer.ca;
	xer.ca = temp.u32 < ctx.r9.u32;
	ctx.r5.s64 = temp.s64;
	// subf r6,r11,r22
	ctx.r6.s64 = r22.s64 - r11.s64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE976C:
	// cmplwi cr6,r30,15
	cr6.compare<uint32_t>(r30.u32, 15, xer);
	// bgt cr6,0x82be9ef8
	if (cr6.gt) goto loc_82BE9EF8;
	// lis r12,-32246
	r12.s64 = -2113273856;
	// addi r12,r12,968
	r12.s64 = r12.s64 + 968;
	// rlwinm r0,r30,1,0,30
	r0.u64 = rotl64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// lhzx r0,r12,r0
	r0.u64 = PPC_LOAD_U16(r12.u32 + r0.u32);
	// lis r12,-32065
	r12.s64 = -2101411840;
	// addi r12,r12,-26724
	r12.s64 = r12.s64 + -26724;
	// add r12,r12,r0
	r12.u64 = r12.u64 + r0.u64;
	// mtctr r12
	ctr.u64 = r12.u64;
	// nop 
	// bctr 
	switch (r30.u64) {
	case 0:
		goto loc_82BE979C;
	case 1:
		goto loc_82BE97D8;
	case 2:
		goto loc_82BE9824;
	case 3:
		goto loc_82BE984C;
	case 4:
		goto loc_82BE98D0;
	case 5:
		goto loc_82BE98F8;
	case 6:
		goto loc_82BE9928;
	case 7:
		goto loc_82BE9958;
	case 8:
		goto loc_82BE9A24;
	case 9:
		goto loc_82BE9AE0;
	case 10:
		goto loc_82BE9BE8;
	case 11:
		goto loc_82BE9C10;
	case 12:
		goto loc_82BE9D84;
	case 13:
		goto loc_82BE9E30;
	case 14:
		goto loc_82BE9EA8;
	case 15:
		goto loc_82BE9ED0;
	default:
		__builtin_unreachable();
	}
loc_82BE979C:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,29,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-188
	ctx.r4.s64 = r11.s64 + -188;
loc_82BE97CC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// b 0x82bea25c
	goto loc_82BEA25C;
loc_82BE97D8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE97EC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-172
	ctx.r4.s64 = r11.s64 + -172;
loc_82BE97FC:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r6,0
	ctx.r6.s64 = 0;
	// rlwinm r5,r11,23,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0x1;
	// rlwinm r4,r10,17,31,31
	ctx.r4.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 17) & 0x1;
loc_82BE9818:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea6e8
	sub_82BEA6E8(ctx, base);
	// b 0x82bea25c
	goto loc_82BEA25C;
loc_82BE9824:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE9838:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-164
	ctx.r4.s64 = r11.s64 + -164;
	// b 0x82be97fc
	goto loc_82BE97FC;
loc_82BE984C:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-156
	ctx.r4.s64 = r11.s64 + -156;
loc_82BE9870:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be98a4
	if (!cr0.eq) goto loc_82BE98A4;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-148
	ctx.r4.s64 = r11.s64 + -148;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE98A4:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,-144
	ctx.r4.s64 = ctx.r10.s64 + -144;
	// rlwinm r5,r11,30,24,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_82BE98C0:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r6,1
	ctx.r6.s64 = 1;
	// rlwinm r4,r11,17,31,31
	ctx.r4.u64 = rotl64(r11.u32 | (r11.u64 << 32), 17) & 0x1;
	// b 0x82be9818
	goto loc_82BE9818;
loc_82BE98D0:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-140
	ctx.r4.s64 = r11.s64 + -140;
	// b 0x82be9870
	goto loc_82BE9870;
loc_82BE98F8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be991c
	if (cr0.eq) goto loc_82BE991C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be97ec
	goto loc_82BE97EC;
loc_82BE991C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be97ec
	goto loc_82BE97EC;
loc_82BE9928:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be994c
	if (cr0.eq) goto loc_82BE994C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be9838
	goto loc_82BE9838;
loc_82BE994C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be9838
	goto loc_82BE9838;
loc_82BE9958:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-132
	ctx.r4.s64 = r11.s64 + -132;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-124
	ctx.r4.s64 = r11.s64 + -124;
	// lhz r11,0(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// clrlwi r5,r11,27
	ctx.r5.u64 = r11.u32 & 0x1F;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-1000
	ctx.r4.s64 = r11.s64 + -1000;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// clrlwi r5,r11,19
	ctx.r5.u64 = r11.u32 & 0x1FFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm. r9,r11,26,31,31
	ctx.r9.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(ctx.r9.s32, 0, xer);
	// rlwinm r11,r10,19,31,31
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 19) & 0x1;
	// bne 0x82be99e0
	if (!cr0.eq) goto loc_82BE99E0;
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be9a0c
	if (cr6.eq) goto loc_82BE9A0C;
loc_82BE99E0:
	// cmplwi cr6,r11,0
	cr6.compare<uint32_t>(r11.u32, 0, xer);
	// beq cr6,0x82be99f4
	if (cr6.eq) goto loc_82BE99F4;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,3900
	ctx.r5.s64 = r11.s64 + 3900;
	// b 0x82be99fc
	goto loc_82BE99FC;
loc_82BE99F4:
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r5,r11,5664
	ctx.r5.s64 = r11.s64 + 5664;
loc_82BE99FC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-116
	ctx.r4.s64 = r11.s64 + -116;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9A0C:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r5,r11,21,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 21) & 0x1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-104
	ctx.r4.s64 = r11.s64 + -104;
	// b 0x82be9f30
	goto loc_82BE9F30;
loc_82BE9A24:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm. r11,r11,0,10,10
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x200000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9a60
	if (cr0.eq) goto loc_82BE9A60;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9a54
	if (cr0.eq) goto loc_82BE9A54;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be9a68
	goto loc_82BE9A68;
loc_82BE9A54:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be9a68
	goto loc_82BE9A68;
loc_82BE9A60:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE9A68:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-84
	ctx.r4.s64 = r11.s64 + -84;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-124
	ctx.r4.s64 = r11.s64 + -124;
	// lhz r11,0(r28)
	r11.u64 = PPC_LOAD_U16(r28.u32 + 0);
	// clrlwi r5,r11,27
	ctx.r5.u64 = r11.u32 & 0x1F;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-1000
	ctx.r4.s64 = r11.s64 + -1000;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// clrlwi r5,r11,19
	ctx.r5.u64 = r11.u32 & 0x1FFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,20,20
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-76
	ctx.r4.s64 = r11.s64 + -76;
loc_82BE9AD4:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82bea25c
	goto loc_82BEA25C;
loc_82BE9AE0:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r30,0
	r30.s64 = 0;
	// rlwinm. r11,r11,0,17,17
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9b24
	if (cr0.eq) goto loc_82BE9B24;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// li r30,1
	r30.s64 = 1;
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9b18
	if (cr0.eq) goto loc_82BE9B18;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be9b2c
	goto loc_82BE9B2C;
loc_82BE9B18:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be9b2c
	goto loc_82BE9B2C;
loc_82BE9B24:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE9B2C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm. r11,r11,0,18,18
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x2000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9bb4
	if (!cr0.eq) goto loc_82BE9BB4;
	// clrlwi. r11,r30,24
	r11.u64 = r30.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9bb4
	if (!cr0.eq) goto loc_82BE9BB4;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-56
	ctx.r4.s64 = r11.s64 + -56;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9b80
	if (cr0.eq) goto loc_82BE9B80;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,3224
	ctx.r5.s64 = r11.s64 + 3224;
	// b 0x82be9b88
	goto loc_82BE9B88;
loc_82BE9B80:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-148
	ctx.r5.s64 = r11.s64 + -148;
loc_82BE9B88:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6332
	ctx.r4.s64 = r11.s64 + -6332;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-48
	ctx.r4.s64 = r11.s64 + -48;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r5,r11,30,24,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82be9bd4
	goto loc_82BE9BD4;
loc_82BE9BB4:
	// lis r11,-32241
	r11.s64 = -2112946176;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,11116
	ctx.r4.s64 = r11.s64 + 11116;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9BD4:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// addi r4,r10,-1000
	ctx.r4.s64 = ctx.r10.s64 + -1000;
	// clrlwi r5,r11,19
	ctx.r5.u64 = r11.u32 & 0x1FFF;
	// b 0x82be9f30
	goto loc_82BE9F30;
loc_82BE9BE8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-40
	ctx.r4.s64 = r11.s64 + -40;
	// b 0x82be97cc
	goto loc_82BE97CC;
loc_82BE9C10:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r30,0
	r30.s64 = 0;
	// rlwinm. r11,r11,0,17,17
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9c54
	if (cr0.eq) goto loc_82BE9C54;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// li r30,1
	r30.s64 = 1;
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9c48
	if (cr0.eq) goto loc_82BE9C48;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,224
	ctx.r4.s64 = r11.s64 + 224;
	// b 0x82be9c5c
	goto loc_82BE9C5C;
loc_82BE9C48:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,232
	ctx.r4.s64 = r11.s64 + 232;
	// b 0x82be9c5c
	goto loc_82BE9C5C;
loc_82BE9C54:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
loc_82BE9C5C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r10,0(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// li r11,0
	r11.s64 = 0;
	// rlwinm. r10,r10,0,18,18
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x2000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be9c7c
	if (!cr0.eq) goto loc_82BE9C7C;
	// clrlwi. r10,r30,24
	ctx.r10.u64 = r30.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be9c80
	if (cr0.eq) goto loc_82BE9C80;
loc_82BE9C7C:
	// li r11,1
	r11.s64 = 1;
loc_82BE9C80:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82be9cac
	if (cr0.eq) goto loc_82BE9CAC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-36
	ctx.r4.s64 = r11.s64 + -36;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82be9d10
	goto loc_82BE9D10;
loc_82BE9CAC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-32
	ctx.r4.s64 = r11.s64 + -32;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9ce0
	if (cr0.eq) goto loc_82BE9CE0;
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,3224
	ctx.r5.s64 = r11.s64 + 3224;
	// b 0x82be9ce8
	goto loc_82BE9CE8;
loc_82BE9CE0:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r5,r11,-148
	ctx.r5.s64 = r11.s64 + -148;
loc_82BE9CE8:
	// lis r11,-32245
	r11.s64 = -2113208320;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-6332
	ctx.r4.s64 = r11.s64 + -6332;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-48
	ctx.r4.s64 = r11.s64 + -48;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r5,r11,30,24,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9D10:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,-1000
	ctx.r4.s64 = ctx.r10.s64 + -1000;
	// clrlwi r5,r11,19
	ctx.r5.u64 = r11.u32 & 0x1FFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r11,0,29,29
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82be9d60
	if (cr0.eq) goto loc_82BE9D60;
	// lwz r10,4(r28)
	ctx.r10.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r10,r10,31,31,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 31) & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// bne 0x82be9d78
	if (!cr0.eq) goto loc_82BE9D78;
	// rlwinm. r11,r11,26,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 26) & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9d60
	if (cr0.eq) goto loc_82BE9D60;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// addi r5,r11,5664
	ctx.r5.s64 = r11.s64 + 5664;
loc_82BE9D50:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-24
	ctx.r4.s64 = r11.s64 + -24;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9D60:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r5,r11,21,31,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 21) & 0x1;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-4
	ctx.r4.s64 = r11.s64 + -4;
	// b 0x82be9f30
	goto loc_82BE9F30;
loc_82BE9D78:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r5,r11,3900
	ctx.r5.s64 = r11.s64 + 3900;
	// b 0x82be9d50
	goto loc_82BE9D50;
loc_82BE9D84:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,16
	ctx.r4.s64 = r11.s64 + 16;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-31951
	r11.s64 = -2093940736;
	// lis r10,-32245
	ctx.r10.s64 = -2113208320;
	// addi r9,r11,18776
	ctx.r9.s64 = r11.s64 + 18776;
	// addi r4,r10,-6332
	ctx.r4.s64 = ctx.r10.s64 + -6332;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm r30,r11,23,30,31
	r30.u64 = rotl64(r11.u32 | (r11.u64 << 32), 23) & 0x3;
	// rlwinm r10,r10,29,31,31
	ctx.r10.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 29) & 0x1;
	// rlwinm r11,r30,1,0,30
	r11.u64 = rotl64(r30.u32 | (r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r10,r11
	r11.u64 = ctx.r10.u64 + r11.u64;
	// rlwinm r11,r11,2,0,29
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r5,r11,r9
	ctx.r5.u64 = PPC_LOAD_U32(r11.u32 + ctx.r9.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// cmplwi cr6,r30,3
	cr6.compare<uint32_t>(r30.u32, 3, xer);
	// bne cr6,0x82be9e18
	if (!cr6.eq) goto loc_82BE9E18;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,24
	ctx.r4.s64 = ctx.r10.s64 + 24;
	// clrlwi r5,r11,29
	ctx.r5.u64 = r11.u32 & 0x7;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9E18:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,23,23
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,28
	ctx.r4.s64 = r11.s64 + 28;
	// b 0x82be9ad4
	goto loc_82BE9AD4;
loc_82BE9E30:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-156
	ctx.r4.s64 = r11.s64 + -156;
loc_82BE9E54:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32246
	r11.s64 = -2113273856;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,21,21
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x400;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82be9e88
	if (!cr0.eq) goto loc_82BE9E88;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-148
	ctx.r4.s64 = r11.s64 + -148;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9E88:
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r10,-144
	ctx.r4.s64 = ctx.r10.s64 + -144;
	// rlwinm r5,r11,30,24,31
	ctx.r5.u64 = rotl64(r11.u32 | (r11.u64 << 32), 30) & 0xFF;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x82be98c0
	goto loc_82BE98C0;
loc_82BE9EA8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,-140
	ctx.r4.s64 = r11.s64 + -140;
	// b 0x82be9e54
	goto loc_82BE9E54;
loc_82BE9ED0:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,52
	ctx.r4.s64 = r11.s64 + 52;
	// b 0x82be97cc
	goto loc_82BE97CC;
loc_82BE9EF8:
	// lbz r11,12(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 12);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,-180
	ctx.r4.s64 = r11.s64 + -180;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,60
	ctx.r4.s64 = r11.s64 + 60;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// addi r4,r11,80
	ctx.r4.s64 = r11.s64 + 80;
loc_82BE9F30:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// b 0x82bea25c
	goto loc_82BEA25C;
loc_82BE9F3C:
	// rlwinm. r11,r29,0,29,30
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 0) & 0x6;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// lwz r11,8240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8240) );
	// cmplw cr6,r11,r22
	cr6.compare<uint32_t>(r11.u32, r22.u32, xer);
	// bgt cr6,0x82be9f54
	if (cr6.gt) goto loc_82BE9F54;
	// mr r11,r22
	r11.u64 = r22.u64;
loc_82BE9F54:
	// rlwinm. r10,r29,0,30,30
	ctx.r10.u64 = rotl64(r29.u32 | (r29.u64 << 32), 0) & 0x2;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// stw r11,8240(r31)
	PPC_STORE_U32(r31.u32 + 8240, r11.u32);
	// rlwinm r21,r29,27,31,31
	r21.u64 = rotl64(r29.u32 | (r29.u64 << 32), 27) & 0x1;
	// beq 0x82bea000
	if (cr0.eq) goto loc_82BEA000;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea438
	sub_82BEA438(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9f8c
	if (cr0.eq) goto loc_82BE9F8C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// addi r4,r11,296
	ctx.r4.s64 = r11.s64 + 296;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9F8C:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// clrlwi. r10,r21,24
	ctx.r10.u64 = r21.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// addi r30,r11,-180
	r30.s64 = r11.s64 + -180;
	// beq 0x82be9fdc
	if (cr0.eq) goto loc_82BE9FDC;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,172
	ctx.r4.s64 = r11.s64 + 172;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82be9fdc
	if (cr0.eq) goto loc_82BE9FDC;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,312
	ctx.r4.s64 = r11.s64 + 312;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BE9FDC:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r6,r22
	ctx.r6.u64 = r22.u64;
	// rlwinm r5,r29,28,31,31
	ctx.r5.u64 = rotl64(r29.u32 | (r29.u64 << 32), 28) & 0x1;
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8870
	sub_82BE8870(ctx, base);
	// b 0x82bea25c
	goto loc_82BEA25C;
loc_82BEA000:
	// rlwinm. r11,r29,0,29,29
	r11.u64 = rotl64(r29.u32 | (r29.u64 << 32), 0) & 0x4;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea25c
	if (cr0.eq) goto loc_82BEA25C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82be7fc0
	sub_82BE7FC0(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// lis r10,-32240
	ctx.r10.s64 = -2112880640;
	// lis r9,-32240
	ctx.r9.s64 = -2112880640;
	// lis r8,-32240
	ctx.r8.s64 = -2112880640;
	// lis r7,-32240
	ctx.r7.s64 = -2112880640;
	// lis r6,-32240
	ctx.r6.s64 = -2112880640;
	// clrlwi. r5,r3,24
	ctx.r5.u64 = ctx.r3.u32 & 0xFF;
	cr0.compare<int32_t>(ctx.r5.s32, 0, xer);
	// lis r29,-14336
	r29.s64 = -939524096;
	// addi r25,r11,312
	r25.s64 = r11.s64 + 312;
	// addi r26,r10,172
	r26.s64 = ctx.r10.s64 + 172;
	// addi r27,r9,296
	r27.s64 = ctx.r9.s64 + 296;
	// addi r24,r8,232
	r24.s64 = ctx.r8.s64 + 232;
	// addi r23,r7,224
	r23.s64 = ctx.r7.s64 + 224;
	// addi r30,r6,-180
	r30.s64 = ctx.r6.s64 + -180;
	// beq 0x82bea090
	if (cr0.eq) goto loc_82BEA090;
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm r10,r11,0,0,5
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFC000000;
	// cmplw cr6,r10,r29
	cr6.compare<uint32_t>(ctx.r10.u32, r29.u32, xer);
	// bne cr6,0x82bea084
	if (!cr6.eq) goto loc_82BEA084;
	// rlwinm. r10,r11,0,16,16
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82bea078
	if (cr0.eq) goto loc_82BEA078;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82be7f20
	sub_82BE7F20(ctx, base);
	// not r11,r3
	r11.u64 = ~ctx.r3.u64;
	// rlwinm r11,r11,31,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x1;
	// b 0x82bea088
	goto loc_82BEA088;
loc_82BEA078:
	// rlwinm. r11,r11,0,8,11
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xF00000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq 0x82bea088
	if (cr0.eq) goto loc_82BEA088;
loc_82BEA084:
	// li r11,0
	r11.s64 = 0;
loc_82BEA088:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea138
	if (cr0.eq) goto loc_82BEA138;
loc_82BEA090:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea438
	sub_82BEA438(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea0b4
	if (cr0.eq) goto loc_82BEA0B4;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA0B4:
	// clrlwi. r11,r21,24
	r11.u64 = r21.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea0f4
	if (cr0.eq) goto loc_82BEA0F4;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea0f4
	if (cr0.eq) goto loc_82BEA0F4;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA0F4:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r11,r11,5,27,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 5) & 0x1F;
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r10,2
	cr6.compare<uint32_t>(ctx.r10.u32, 2, xer);
	// blt cr6,0x82bea12c
	if (cr6.lt) goto loc_82BEA12C;
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bne 0x82bea124
	if (!cr0.eq) goto loc_82BEA124;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
loc_82BEA124:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA12C:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8030
	sub_82BE8030(ctx, base);
loc_82BEA138:
	// lwz r11,0(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(0) );
	// rlwinm r10,r11,0,0,5
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xFC000000;
	// cmplw cr6,r10,r29
	cr6.compare<uint32_t>(ctx.r10.u32, r29.u32, xer);
	// bne cr6,0x82bea170
	if (!cr6.eq) goto loc_82BEA170;
	// rlwinm. r10,r11,0,16,16
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x8000;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82bea164
	if (cr0.eq) goto loc_82BEA164;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82be7f20
	sub_82BE7F20(ctx, base);
	// not r11,r3
	r11.u64 = ~ctx.r3.u64;
	// rlwinm r11,r11,31,31,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 31) & 0x1;
	// b 0x82bea174
	goto loc_82BEA174;
loc_82BEA164:
	// rlwinm. r11,r11,0,8,11
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0xF00000;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// li r11,1
	r11.s64 = 1;
	// beq 0x82bea174
	if (cr0.eq) goto loc_82BEA174;
loc_82BEA170:
	// li r11,0
	r11.s64 = 0;
loc_82BEA174:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82bea25c
	if (!cr0.eq) goto loc_82BEA25C;
	// mr r3,r28
	ctx.r3.u64 = r28.u64;
	// bl 0x82be7fc0
	sub_82BE7FC0(ctx, base);
	// clrlwi. r11,r3,24
	r11.u64 = ctx.r3.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bne 0x82bea1b8
	if (!cr0.eq) goto loc_82BEA1B8;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea1ac
	if (cr0.eq) goto loc_82BEA1AC;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA1AC:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,92
	ctx.r4.s64 = r11.s64 + 92;
	// b 0x82bea21c
	goto loc_82BEA21C;
loc_82BEA1B8:
	// bl 0x82bea438
	sub_82BEA438(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea1d8
	if (cr0.eq) goto loc_82BEA1D8;
	// mr r4,r27
	ctx.r4.u64 = r27.u64;
	// mr r5,r22
	ctx.r5.u64 = r22.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA1D8:
	// clrlwi. r11,r21,24
	r11.u64 = r21.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea218
	if (cr0.eq) goto loc_82BEA218;
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = r26.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea860
	sub_82BEA860(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,26,26
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x20;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea218
	if (cr0.eq) goto loc_82BEA218;
	// mr r4,r25
	ctx.r4.u64 = r25.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA218:
	// mr r4,r30
	ctx.r4.u64 = r30.u64;
loc_82BEA21C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lwz r11,4(r28)
	r11.u64 = PPC_LOAD_U32(r28.u32 + int32_t(4) );
	// rlwinm r11,r11,5,27,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 5) & 0x1F;
	// clrlwi r10,r11,30
	ctx.r10.u64 = r11.u32 & 0x3;
	// cmplwi cr6,r10,2
	cr6.compare<uint32_t>(ctx.r10.u32, 2, xer);
	// blt cr6,0x82bea250
	if (cr6.lt) goto loc_82BEA250;
	// clrlwi. r11,r11,31
	r11.u64 = r11.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r4,r23
	ctx.r4.u64 = r23.u64;
	// bne 0x82bea248
	if (!cr0.eq) goto loc_82BEA248;
	// mr r4,r24
	ctx.r4.u64 = r24.u64;
loc_82BEA248:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
loc_82BEA250:
	// mr r4,r28
	ctx.r4.u64 = r28.u64;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8410
	sub_82BE8410(ctx, base);
loc_82BEA25C:
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r3,8236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8236) );
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
}

PPC_WEAK_FUNC(sub_82BE9680) {
	__imp__sub_82BE9680(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BEA254) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r31{};
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82be8410
	sub_82BE8410(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r3,8236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8236) );
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x82ca2c1c
	return;
}

PPC_WEAK_FUNC(sub_82BEA254) {
	__imp__sub_82BEA254(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BEA270) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r26{};
	PPCRegister r27{};
	PPCRegister r28{};
	PPCRegister r29{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// bl 0x82ca2be0
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// not r10,r8
	ctx.r10.u64 = ~ctx.r8.u64;
	// lis r9,-32065
	ctx.r9.s64 = -2101411840;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// clrlwi r10,r10,31
	ctx.r10.u64 = ctx.r10.u32 & 0x1;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// mr r29,r7
	r29.u64 = ctx.r7.u64;
	// stb r10,13(r31)
	PPC_STORE_U8(r31.u32 + 13, ctx.r10.u8);
	// li r11,0
	r11.s64 = 0;
	// stw r4,0(r31)
	PPC_STORE_U32(r31.u32 + 0, ctx.r4.u32);
	// stw r5,4(r31)
	PPC_STORE_U32(r31.u32 + 4, ctx.r5.u32);
	// li r27,1
	r27.s64 = 1;
	// stw r8,8(r31)
	PPC_STORE_U32(r31.u32 + 8, ctx.r8.u32);
	// addi r10,r9,-23328
	ctx.r10.s64 = ctx.r9.s64 + -23328;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// stw r30,16(r31)
	PPC_STORE_U32(r31.u32 + 16, r30.u32);
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// stb r27,12(r31)
	PPC_STORE_U8(r31.u32 + 12, r27.u8);
	// li r9,1
	ctx.r9.s64 = 1;
	// stb r27,8232(r31)
	PPC_STORE_U8(r31.u32 + 8232, r27.u8);
	// li r8,0
	ctx.r8.s64 = 0;
	// stw r11,8240(r31)
	PPC_STORE_U32(r31.u32 + 8240, r11.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// stw r11,8236(r31)
	PPC_STORE_U32(r31.u32 + 8236, r11.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x82b97fe0
	sub_82B97FE0(ctx, base);
	// lis r11,-32065
	r11.s64 = -2101411840;
	// li r9,7
	ctx.r9.s64 = 7;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, r31.u32);
	// addi r10,r11,-27032
	ctx.r10.s64 = r11.s64 + -27032;
	// li r8,0
	ctx.r8.s64 = 0;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = r29.u64;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82b97fe0
	sub_82B97FE0(ctx, base);
	// mr. r26,r3
	r26.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r26.s32, 0, xer);
	// blt 0x82bea3c4
	if (cr0.lt) goto loc_82BEA3C4;
	// lwz r10,8(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r10,0,23,23
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x100;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82bea3c4
	if (!cr0.eq) goto loc_82BEA3C4;
	// lwz r11,8240(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8240) );
	// addi r11,r11,1
	r11.s64 = r11.s64 + 1;
	// mulli r28,r11,12
	r28.s64 = r11.s64 * 12;
	// addi r11,r28,12
	r11.s64 = r28.s64 + 12;
	// cmplw cr6,r11,r29
	cr6.compare<uint32_t>(r11.u32, r29.u32, xer);
	// bgt cr6,0x82bea3c4
	if (cr6.gt) goto loc_82BEA3C4;
	// rlwinm. r11,r10,0,27,27
	r11.u64 = rotl64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82bea35c
	if (cr0.eq) goto loc_82BEA35C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,124
	ctx.r4.s64 = r11.s64 + 124;
	// bl 0x82bea798
	sub_82BEA798(ctx, base);
	// b 0x82bea368
	goto loc_82BEA368;
loc_82BEA35C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,3200
	ctx.r4.s64 = r11.s64 + 3200;
	// bl 0x82bea498
	sub_82BEA498(ctx, base);
loc_82BEA368:
	// stb r27,8232(r31)
	PPC_STORE_U8(r31.u32 + 8232, r27.u8);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,272
	ctx.r4.s64 = r11.s64 + 272;
	// add r29,r28,r30
	r29.u64 = r28.u64 + r30.u64;
	// bl 0x82bea798
	sub_82BEA798(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,328
	ctx.r4.s64 = r11.s64 + 328;
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// lwz r7,8(r29)
	ctx.r7.u64 = PPC_LOAD_U32(r29.u32 + int32_t(8) );
	// addi r4,r11,100
	ctx.r4.s64 = r11.s64 + 100;
	// lwz r6,4(r29)
	ctx.r6.u64 = PPC_LOAD_U32(r29.u32 + int32_t(4) );
	// lwzx r5,r28,r30
	ctx.r5.u64 = PPC_LOAD_U32(r28.u32 + r30.u32);
	// bl 0x82bea698
	sub_82BEA698(ctx, base);
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// addi r4,r11,256
	ctx.r4.s64 = r11.s64 + 256;
	// bl 0x82bea798
	sub_82BEA798(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
loc_82BEA3C4:
	// mr r3,r26
	ctx.r3.u64 = r26.u64;
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x82ca2c30
	return;
}

PPC_WEAK_FUNC(sub_82BEA270) {
	__imp__sub_82BEA270(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BEA3D0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// lbz r11,8232(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 8232);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// bne 0x82bea420
	if (!cr0.eq) goto loc_82BEA420;
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r11,r11,0,27,27
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea40c
	if (cr0.eq) goto loc_82BEA40C;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,124
	ctx.r4.s64 = r11.s64 + 124;
	// bl 0x82bea798
	sub_82BEA798(ctx, base);
	// b 0x82bea418
	goto loc_82BEA418;
loc_82BEA40C:
	// lis r11,-32256
	r11.s64 = -2113929216;
	// addi r4,r11,3200
	ctx.r4.s64 = r11.s64 + 3200;
	// bl 0x82bea498
	sub_82BEA498(ctx, base);
loc_82BEA418:
	// li r11,1
	r11.s64 = 1;
	// stb r11,8232(r31)
	PPC_STORE_U8(r31.u32 + 8232, r11.u8);
loc_82BEA420:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BEA3D0) {
	__imp__sub_82BEA3D0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BEA438) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// bl 0x82bea3d0
	sub_82BEA3D0(ctx, base);
	// lwz r11,8(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8) );
	// rlwinm. r10,r11,25,31,31
	ctx.r10.u64 = rotl64(r11.u32 | (r11.u64 << 32), 25) & 0x1;
	cr0.compare<int32_t>(ctx.r10.s32, 0, xer);
	// beq 0x82bea484
	if (cr0.eq) goto loc_82BEA484;
	// rlwinm. r11,r11,0,27,27
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x10;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// mr r3,r31
	ctx.r3.u64 = r31.u64;
	// beq 0x82bea478
	if (cr0.eq) goto loc_82BEA478;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,124
	ctx.r4.s64 = r11.s64 + 124;
	// bl 0x82bea798
	sub_82BEA798(ctx, base);
	// b 0x82bea484
	goto loc_82BEA484;
loc_82BEA478:
	// lis r11,-32240
	r11.s64 = -2112880640;
	// addi r4,r11,132
	ctx.r4.s64 = r11.s64 + 132;
	// bl 0x82bea498
	sub_82BEA498(ctx, base);
loc_82BEA484:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BEA438) {
	__imp__sub_82BEA438(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BEA498) {
	PPC_FUNC_PROLOGUE();
	PPCRegister r11{};
	PPCRegister r12{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r5,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.r5.u64);
	// std r6,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.r6.u64);
	// std r7,48(r1)
	PPC_STORE_U64(ctx.r1.u32 + 48, ctx.r7.u64);
	// std r8,56(r1)
	PPC_STORE_U64(ctx.r1.u32 + 56, ctx.r8.u64);
	// std r9,64(r1)
	PPC_STORE_U64(ctx.r1.u32 + 64, ctx.r9.u64);
	// std r10,72(r1)
	PPC_STORE_U64(ctx.r1.u32 + 72, ctx.r10.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,128
	ctx.r10.s64 = ctx.r1.s64 + 128;
	// stw r10,0(r11)
	PPC_STORE_U32(r11.u32 + 0, ctx.r10.u32);
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(80) );
	// bl 0x82bea598
	sub_82BEA598(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BEA498) {
	__imp__sub_82BEA498(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BEA4E0) {
	PPC_FUNC_PROLOGUE();
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r5
	r31.u64 = ctx.r5.u64;
	// mr r30,r6
	r30.u64 = ctx.r6.u64;
	// clrlwi. r11,r3,31
	r11.u64 = ctx.r3.u32 & 0x1;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea578
	if (cr0.eq) goto loc_82BEA578;
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm. r11,r11,0,20,20
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 0) & 0x800;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// beq 0x82bea528
	if (cr0.eq) goto loc_82BEA528;
	// lis r11,-32240
	r11.s64 = -2112880640;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// addi r6,r11,136
	ctx.r6.s64 = r11.s64 + 136;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = r30.u64;
	// bl 0x82bea8c8
	sub_82BEA8C8(ctx, base);
loc_82BEA528:
	// lwz r11,4(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(4) );
	// rlwinm r11,r11,20,28,31
	r11.u64 = rotl64(r11.u32 | (r11.u64 << 32), 20) & 0xF;
	// cmplwi cr6,r11,7
	cr6.compare<uint32_t>(r11.u32, 7, xer);
	// beq cr6,0x82bea550
	if (cr6.eq) goto loc_82BEA550;
	// cmplwi cr6,r11,8
	cr6.compare<uint32_t>(r11.u32, 8, xer);
	// beq cr6,0x82bea550
	if (cr6.eq) goto loc_82BEA550;
	// cmplwi cr6,r11,9
	cr6.compare<uint32_t>(r11.u32, 9, xer);
	// beq cr6,0x82bea550
	if (cr6.eq) goto loc_82BEA550;
	// cmplwi cr6,r11,11
	cr6.compare<uint32_t>(r11.u32, 11, xer);
	// bne cr6,0x82bea578
	if (!cr6.eq) goto loc_82BEA578;
loc_82BEA550:
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(0) );
	// addi r11,r30,24
	r11.s64 = r30.s64 + 24;
	// li r9,1
	ctx.r9.s64 = 1;
	// clrlwi r8,r10,19
	ctx.r8.u64 = ctx.r10.u32 & 0x1FFF;
	// rlwinm r10,r8,29,3,29
	ctx.r10.u64 = rotl64(ctx.r8.u32 | (ctx.r8.u64 << 32), 29) & 0x1FFFFFFC;
	// clrlwi r8,r8,27
	ctx.r8.u64 = ctx.r8.u32 & 0x1F;
	// slw r9,r9,r8
	ctx.r9.u64 = ctx.r8.u8 & 0x20 ? 0 : (ctx.r9.u32 << (ctx.r8.u8 & 0x3F));
	// lwzx r8,r10,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + r11.u32);
	// or r9,r9,r8
	ctx.r9.u64 = ctx.r9.u64 | ctx.r8.u64;
	// stwx r9,r10,r11
	PPC_STORE_U32(ctx.r10.u32 + r11.u32, ctx.r9.u32);
loc_82BEA578:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BEA4E0) {
	__imp__sub_82BEA4E0(ctx, base);
}

PPC_FUNC_IMPL(__imp__sub_82BEA598) {
	PPC_FUNC_PROLOGUE();
	PPCRegister ctr{};
	PPCXERRegister xer{};
	PPCCRRegister cr0{};
	PPCCRRegister cr6{};
	PPCRegister r11{};
	PPCRegister r12{};
	PPCRegister r30{};
	PPCRegister r31{};
	uint32_t ea{};
	// mflr r12
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, r31.u64);
	// stwu r1,-2160(r1)
	ea = -2160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	r31.u64 = ctx.r3.u64;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// cmplwi cr6,r31,0
	cr6.compare<uint32_t>(r31.u32, 0, xer);
	// beq cr6,0x82bea67c
	if (cr6.eq) goto loc_82BEA67C;
	// lwz r11,8236(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8236) );
	// cmpwi cr6,r11,0
	cr6.compare<int32_t>(r11.s32, 0, xer);
	// blt cr6,0x82bea67c
	if (cr6.lt) goto loc_82BEA67C;
	// mr r5,r4
	ctx.r5.u64 = ctx.r4.u64;
	// li r4,2048
	ctx.r4.s64 = 2048;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x832b2bec
	__imp___vsnprintf(ctx, base);
	// mr. r30,r3
	r30.u64 = ctx.r3.u64;
	cr0.compare<int32_t>(r30.s32, 0, xer);
	// ble 0x82bea67c
	if (!cr0.gt) goto loc_82BEA67C;
	// lbz r11,8233(r31)
	r11.u64 = PPC_LOAD_U8(r31.u32 + 8233);
	// cmplwi r11,0
	cr0.compare<uint32_t>(r11.u32, 0, xer);
	// beq 0x82bea658
	if (cr0.eq) goto loc_82BEA658;
	// lbz r11,80(r1)
	r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 80);
	// li r10,0
	ctx.r10.s64 = 0;
	// extsb r11,r11
	r11.s64 = r11.s8;
	// stb r10,8233(r31)
	PPC_STORE_U8(r31.u32 + 8233, ctx.r10.u8);
	// cmpwi cr6,r11,32
	cr6.compare<int32_t>(r11.s32, 32, xer);
	// beq cr6,0x82bea624
	if (cr6.eq) goto loc_82BEA624;
	// cmpwi cr6,r11,45
	cr6.compare<int32_t>(r11.s32, 45, xer);
	// beq cr6,0x82bea624
	if (cr6.eq) goto loc_82BEA624;
	// cmpwi cr6,r11,48
	cr6.compare<int32_t>(r11.s32, 48, xer);
	// blt cr6,0x82bea61c
	if (cr6.lt) goto loc_82BEA61C;
	// cmpwi cr6,r11,57
	cr6.compare<int32_t>(r11.s32, 57, xer);
	// ble cr6,0x82bea624
	if (!cr6.gt) goto loc_82BEA624;
loc_82BEA61C:
	// li r11,1
	r11.s64 = 1;
	// b 0x82bea628
	goto loc_82BEA628;
loc_82BEA624:
	// li r11,0
	r11.s64 = 0;
loc_82BEA628:
	// clrlwi. r11,r11,24
	r11.u64 = r11.u32 & 0xFF;
	cr0.compare<int32_t>(r11.s32, 0, xer);
	// bne 0x82bea658
	if (!cr0.eq) goto loc_82BEA658;
	// lis r11,-32246
	r11.s64 = -2113273856;
	// lwz r3,8220(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8220) );
	// lwz r10,8216(r31)
	ctx.r10.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8216) );
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,25232
	ctx.r4.s64 = r11.s64 + 25232;
	// mtctr r10
	ctr.u64 = ctx.r10.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x82bea658
	if (!cr0.lt) goto loc_82BEA658;
	// stw r3,8236(r31)
	PPC_STORE_U32(r31.u32 + 8236, ctx.r3.u32);
loc_82BEA658:
	// lwz r3,8220(r31)
	ctx.r3.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8220) );
	// mr r5,r30
	ctx.r5.u64 = r30.u64;
	// lwz r11,8216(r31)
	r11.u64 = PPC_LOAD_U32(r31.u32 + int32_t(8216) );
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mtctr r11
	ctr.u64 = r11.u64;
	// bctrl 
	PPC_CALL_INDIRECT_FUNC(ctr.u32);
	// cmpwi r3,0
	cr0.compare<int32_t>(ctx.r3.s32, 0, xer);
	// bge 0x82bea67c
	if (!cr0.lt) goto loc_82BEA67C;
	// stw r3,8236(r31)
	PPC_STORE_U32(r31.u32 + 8236, ctx.r3.u32);
loc_82BEA67C:
	// addi r1,r1,2160
	ctx.r1.s64 = ctx.r1.s64 + 2160;
	// lwz r12,-8(r1)
	r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + int32_t(-8) );
	// mtlr r12
	// ld r30,-24(r1)
	r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

PPC_WEAK_FUNC(sub_82BEA598) {
	__imp__sub_82BEA598(ctx, base);
}

